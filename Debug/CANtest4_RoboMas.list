
CANtest4_RoboMas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b34  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f50  08007f50  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f58  08007f58  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000006c  08007fcc  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000010c  0800806c  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004cf0  200001b0  0800810c  000201b0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  20004ea0  0800810c  00024ea0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201da  2**0
                  CONTENTS, READONLY
 15 .debug_info   000187ee  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003772  00000000  00000000  00038a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001238  00000000  00000000  0003c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e03  00000000  00000000  0003d3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b048  00000000  00000000  0003e1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001731c  00000000  00000000  00069203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001003d8  00000000  00000000  0008051f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000534c  00000000  00000000  001808f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  00185c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b0 	.word	0x200001b0
 800021c:	00000000 	.word	0x00000000
 8000220:	08007d1c 	.word	0x08007d1c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b4 	.word	0x200001b4
 800023c:	08007d1c 	.word	0x08007d1c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_frsub>:
 80002e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__addsf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_fsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002ec <__addsf3>:
 80002ec:	0042      	lsls	r2, r0, #1
 80002ee:	bf1f      	itttt	ne
 80002f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002f4:	ea92 0f03 	teqne	r2, r3
 80002f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000300:	d06a      	beq.n	80003d8 <__addsf3+0xec>
 8000302:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000306:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800030a:	bfc1      	itttt	gt
 800030c:	18d2      	addgt	r2, r2, r3
 800030e:	4041      	eorgt	r1, r0
 8000310:	4048      	eorgt	r0, r1
 8000312:	4041      	eorgt	r1, r0
 8000314:	bfb8      	it	lt
 8000316:	425b      	neglt	r3, r3
 8000318:	2b19      	cmp	r3, #25
 800031a:	bf88      	it	hi
 800031c:	4770      	bxhi	lr
 800031e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000326:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800032a:	bf18      	it	ne
 800032c:	4240      	negne	r0, r0
 800032e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000332:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000336:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4249      	negne	r1, r1
 800033e:	ea92 0f03 	teq	r2, r3
 8000342:	d03f      	beq.n	80003c4 <__addsf3+0xd8>
 8000344:	f1a2 0201 	sub.w	r2, r2, #1
 8000348:	fa41 fc03 	asr.w	ip, r1, r3
 800034c:	eb10 000c 	adds.w	r0, r0, ip
 8000350:	f1c3 0320 	rsb	r3, r3, #32
 8000354:	fa01 f103 	lsl.w	r1, r1, r3
 8000358:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800035c:	d502      	bpl.n	8000364 <__addsf3+0x78>
 800035e:	4249      	negs	r1, r1
 8000360:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000364:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000368:	d313      	bcc.n	8000392 <__addsf3+0xa6>
 800036a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800036e:	d306      	bcc.n	800037e <__addsf3+0x92>
 8000370:	0840      	lsrs	r0, r0, #1
 8000372:	ea4f 0131 	mov.w	r1, r1, rrx
 8000376:	f102 0201 	add.w	r2, r2, #1
 800037a:	2afe      	cmp	r2, #254	; 0xfe
 800037c:	d251      	bcs.n	8000422 <__addsf3+0x136>
 800037e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000382:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000386:	bf08      	it	eq
 8000388:	f020 0001 	biceq.w	r0, r0, #1
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	4770      	bx	lr
 8000392:	0049      	lsls	r1, r1, #1
 8000394:	eb40 0000 	adc.w	r0, r0, r0
 8000398:	3a01      	subs	r2, #1
 800039a:	bf28      	it	cs
 800039c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003a0:	d2ed      	bcs.n	800037e <__addsf3+0x92>
 80003a2:	fab0 fc80 	clz	ip, r0
 80003a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003aa:	ebb2 020c 	subs.w	r2, r2, ip
 80003ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80003b2:	bfaa      	itet	ge
 80003b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b8:	4252      	neglt	r2, r2
 80003ba:	4318      	orrge	r0, r3
 80003bc:	bfbc      	itt	lt
 80003be:	40d0      	lsrlt	r0, r2
 80003c0:	4318      	orrlt	r0, r3
 80003c2:	4770      	bx	lr
 80003c4:	f092 0f00 	teq	r2, #0
 80003c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003cc:	bf06      	itte	eq
 80003ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003d2:	3201      	addeq	r2, #1
 80003d4:	3b01      	subne	r3, #1
 80003d6:	e7b5      	b.n	8000344 <__addsf3+0x58>
 80003d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003e0:	bf18      	it	ne
 80003e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003e6:	d021      	beq.n	800042c <__addsf3+0x140>
 80003e8:	ea92 0f03 	teq	r2, r3
 80003ec:	d004      	beq.n	80003f8 <__addsf3+0x10c>
 80003ee:	f092 0f00 	teq	r2, #0
 80003f2:	bf08      	it	eq
 80003f4:	4608      	moveq	r0, r1
 80003f6:	4770      	bx	lr
 80003f8:	ea90 0f01 	teq	r0, r1
 80003fc:	bf1c      	itt	ne
 80003fe:	2000      	movne	r0, #0
 8000400:	4770      	bxne	lr
 8000402:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000406:	d104      	bne.n	8000412 <__addsf3+0x126>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	bf28      	it	cs
 800040c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000410:	4770      	bx	lr
 8000412:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000416:	bf3c      	itt	cc
 8000418:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800041c:	4770      	bxcc	lr
 800041e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000422:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000426:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042a:	4770      	bx	lr
 800042c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000430:	bf16      	itet	ne
 8000432:	4608      	movne	r0, r1
 8000434:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000438:	4601      	movne	r1, r0
 800043a:	0242      	lsls	r2, r0, #9
 800043c:	bf06      	itte	eq
 800043e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000442:	ea90 0f01 	teqeq	r0, r1
 8000446:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800044a:	4770      	bx	lr

0800044c <__aeabi_ui2f>:
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e004      	b.n	800045c <__aeabi_i2f+0x8>
 8000452:	bf00      	nop

08000454 <__aeabi_i2f>:
 8000454:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	ea5f 0c00 	movs.w	ip, r0
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000468:	4601      	mov	r1, r0
 800046a:	f04f 0000 	mov.w	r0, #0
 800046e:	e01c      	b.n	80004aa <__aeabi_l2f+0x2a>

08000470 <__aeabi_ul2f>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	f04f 0300 	mov.w	r3, #0
 800047c:	e00a      	b.n	8000494 <__aeabi_l2f+0x14>
 800047e:	bf00      	nop

08000480 <__aeabi_l2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800048c:	d502      	bpl.n	8000494 <__aeabi_l2f+0x14>
 800048e:	4240      	negs	r0, r0
 8000490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000494:	ea5f 0c01 	movs.w	ip, r1
 8000498:	bf02      	ittt	eq
 800049a:	4684      	moveq	ip, r0
 800049c:	4601      	moveq	r1, r0
 800049e:	2000      	moveq	r0, #0
 80004a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004a4:	bf08      	it	eq
 80004a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004ae:	fabc f28c 	clz	r2, ip
 80004b2:	3a08      	subs	r2, #8
 80004b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b8:	db10      	blt.n	80004dc <__aeabi_l2f+0x5c>
 80004ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80004be:	4463      	add	r3, ip
 80004c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004c4:	f1c2 0220 	rsb	r2, r2, #32
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	fa20 f202 	lsr.w	r2, r0, r2
 80004d0:	eb43 0002 	adc.w	r0, r3, r2
 80004d4:	bf08      	it	eq
 80004d6:	f020 0001 	biceq.w	r0, r0, #1
 80004da:	4770      	bx	lr
 80004dc:	f102 0220 	add.w	r2, r2, #32
 80004e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004e4:	f1c2 0220 	rsb	r2, r2, #32
 80004e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004ec:	fa21 f202 	lsr.w	r2, r1, r2
 80004f0:	eb43 0002 	adc.w	r0, r3, r2
 80004f4:	bf08      	it	eq
 80004f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004fa:	4770      	bx	lr

080004fc <__aeabi_uldivmod>:
 80004fc:	b953      	cbnz	r3, 8000514 <__aeabi_uldivmod+0x18>
 80004fe:	b94a      	cbnz	r2, 8000514 <__aeabi_uldivmod+0x18>
 8000500:	2900      	cmp	r1, #0
 8000502:	bf08      	it	eq
 8000504:	2800      	cmpeq	r0, #0
 8000506:	bf1c      	itt	ne
 8000508:	f04f 31ff 	movne.w	r1, #4294967295
 800050c:	f04f 30ff 	movne.w	r0, #4294967295
 8000510:	f000 b970 	b.w	80007f4 <__aeabi_idiv0>
 8000514:	f1ad 0c08 	sub.w	ip, sp, #8
 8000518:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800051c:	f000 f806 	bl	800052c <__udivmoddi4>
 8000520:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000528:	b004      	add	sp, #16
 800052a:	4770      	bx	lr

0800052c <__udivmoddi4>:
 800052c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000530:	9e08      	ldr	r6, [sp, #32]
 8000532:	460d      	mov	r5, r1
 8000534:	4604      	mov	r4, r0
 8000536:	460f      	mov	r7, r1
 8000538:	2b00      	cmp	r3, #0
 800053a:	d14a      	bne.n	80005d2 <__udivmoddi4+0xa6>
 800053c:	428a      	cmp	r2, r1
 800053e:	4694      	mov	ip, r2
 8000540:	d965      	bls.n	800060e <__udivmoddi4+0xe2>
 8000542:	fab2 f382 	clz	r3, r2
 8000546:	b143      	cbz	r3, 800055a <__udivmoddi4+0x2e>
 8000548:	fa02 fc03 	lsl.w	ip, r2, r3
 800054c:	f1c3 0220 	rsb	r2, r3, #32
 8000550:	409f      	lsls	r7, r3
 8000552:	fa20 f202 	lsr.w	r2, r0, r2
 8000556:	4317      	orrs	r7, r2
 8000558:	409c      	lsls	r4, r3
 800055a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800055e:	fa1f f58c 	uxth.w	r5, ip
 8000562:	fbb7 f1fe 	udiv	r1, r7, lr
 8000566:	0c22      	lsrs	r2, r4, #16
 8000568:	fb0e 7711 	mls	r7, lr, r1, r7
 800056c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000570:	fb01 f005 	mul.w	r0, r1, r5
 8000574:	4290      	cmp	r0, r2
 8000576:	d90a      	bls.n	800058e <__udivmoddi4+0x62>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000580:	f080 811c 	bcs.w	80007bc <__udivmoddi4+0x290>
 8000584:	4290      	cmp	r0, r2
 8000586:	f240 8119 	bls.w	80007bc <__udivmoddi4+0x290>
 800058a:	3902      	subs	r1, #2
 800058c:	4462      	add	r2, ip
 800058e:	1a12      	subs	r2, r2, r0
 8000590:	b2a4      	uxth	r4, r4
 8000592:	fbb2 f0fe 	udiv	r0, r2, lr
 8000596:	fb0e 2210 	mls	r2, lr, r0, r2
 800059a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800059e:	fb00 f505 	mul.w	r5, r0, r5
 80005a2:	42a5      	cmp	r5, r4
 80005a4:	d90a      	bls.n	80005bc <__udivmoddi4+0x90>
 80005a6:	eb1c 0404 	adds.w	r4, ip, r4
 80005aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80005ae:	f080 8107 	bcs.w	80007c0 <__udivmoddi4+0x294>
 80005b2:	42a5      	cmp	r5, r4
 80005b4:	f240 8104 	bls.w	80007c0 <__udivmoddi4+0x294>
 80005b8:	4464      	add	r4, ip
 80005ba:	3802      	subs	r0, #2
 80005bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	2100      	movs	r1, #0
 80005c4:	b11e      	cbz	r6, 80005ce <__udivmoddi4+0xa2>
 80005c6:	40dc      	lsrs	r4, r3
 80005c8:	2300      	movs	r3, #0
 80005ca:	e9c6 4300 	strd	r4, r3, [r6]
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0xbc>
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	f000 80ed 	beq.w	80007b6 <__udivmoddi4+0x28a>
 80005dc:	2100      	movs	r1, #0
 80005de:	e9c6 0500 	strd	r0, r5, [r6]
 80005e2:	4608      	mov	r0, r1
 80005e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e8:	fab3 f183 	clz	r1, r3
 80005ec:	2900      	cmp	r1, #0
 80005ee:	d149      	bne.n	8000684 <__udivmoddi4+0x158>
 80005f0:	42ab      	cmp	r3, r5
 80005f2:	d302      	bcc.n	80005fa <__udivmoddi4+0xce>
 80005f4:	4282      	cmp	r2, r0
 80005f6:	f200 80f8 	bhi.w	80007ea <__udivmoddi4+0x2be>
 80005fa:	1a84      	subs	r4, r0, r2
 80005fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000600:	2001      	movs	r0, #1
 8000602:	4617      	mov	r7, r2
 8000604:	2e00      	cmp	r6, #0
 8000606:	d0e2      	beq.n	80005ce <__udivmoddi4+0xa2>
 8000608:	e9c6 4700 	strd	r4, r7, [r6]
 800060c:	e7df      	b.n	80005ce <__udivmoddi4+0xa2>
 800060e:	b902      	cbnz	r2, 8000612 <__udivmoddi4+0xe6>
 8000610:	deff      	udf	#255	; 0xff
 8000612:	fab2 f382 	clz	r3, r2
 8000616:	2b00      	cmp	r3, #0
 8000618:	f040 8090 	bne.w	800073c <__udivmoddi4+0x210>
 800061c:	1a8a      	subs	r2, r1, r2
 800061e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000622:	fa1f fe8c 	uxth.w	lr, ip
 8000626:	2101      	movs	r1, #1
 8000628:	fbb2 f5f7 	udiv	r5, r2, r7
 800062c:	fb07 2015 	mls	r0, r7, r5, r2
 8000630:	0c22      	lsrs	r2, r4, #16
 8000632:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000636:	fb0e f005 	mul.w	r0, lr, r5
 800063a:	4290      	cmp	r0, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x124>
 800063e:	eb1c 0202 	adds.w	r2, ip, r2
 8000642:	f105 38ff 	add.w	r8, r5, #4294967295
 8000646:	d202      	bcs.n	800064e <__udivmoddi4+0x122>
 8000648:	4290      	cmp	r0, r2
 800064a:	f200 80cb 	bhi.w	80007e4 <__udivmoddi4+0x2b8>
 800064e:	4645      	mov	r5, r8
 8000650:	1a12      	subs	r2, r2, r0
 8000652:	b2a4      	uxth	r4, r4
 8000654:	fbb2 f0f7 	udiv	r0, r2, r7
 8000658:	fb07 2210 	mls	r2, r7, r0, r2
 800065c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000660:	fb0e fe00 	mul.w	lr, lr, r0
 8000664:	45a6      	cmp	lr, r4
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x14e>
 8000668:	eb1c 0404 	adds.w	r4, ip, r4
 800066c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000670:	d202      	bcs.n	8000678 <__udivmoddi4+0x14c>
 8000672:	45a6      	cmp	lr, r4
 8000674:	f200 80bb 	bhi.w	80007ee <__udivmoddi4+0x2c2>
 8000678:	4610      	mov	r0, r2
 800067a:	eba4 040e 	sub.w	r4, r4, lr
 800067e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000682:	e79f      	b.n	80005c4 <__udivmoddi4+0x98>
 8000684:	f1c1 0720 	rsb	r7, r1, #32
 8000688:	408b      	lsls	r3, r1
 800068a:	fa22 fc07 	lsr.w	ip, r2, r7
 800068e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000692:	fa05 f401 	lsl.w	r4, r5, r1
 8000696:	fa20 f307 	lsr.w	r3, r0, r7
 800069a:	40fd      	lsrs	r5, r7
 800069c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006a0:	4323      	orrs	r3, r4
 80006a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80006a6:	fa1f fe8c 	uxth.w	lr, ip
 80006aa:	fb09 5518 	mls	r5, r9, r8, r5
 80006ae:	0c1c      	lsrs	r4, r3, #16
 80006b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80006b4:	fb08 f50e 	mul.w	r5, r8, lr
 80006b8:	42a5      	cmp	r5, r4
 80006ba:	fa02 f201 	lsl.w	r2, r2, r1
 80006be:	fa00 f001 	lsl.w	r0, r0, r1
 80006c2:	d90b      	bls.n	80006dc <__udivmoddi4+0x1b0>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80006cc:	f080 8088 	bcs.w	80007e0 <__udivmoddi4+0x2b4>
 80006d0:	42a5      	cmp	r5, r4
 80006d2:	f240 8085 	bls.w	80007e0 <__udivmoddi4+0x2b4>
 80006d6:	f1a8 0802 	sub.w	r8, r8, #2
 80006da:	4464      	add	r4, ip
 80006dc:	1b64      	subs	r4, r4, r5
 80006de:	b29d      	uxth	r5, r3
 80006e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80006e4:	fb09 4413 	mls	r4, r9, r3, r4
 80006e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80006ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80006f0:	45a6      	cmp	lr, r4
 80006f2:	d908      	bls.n	8000706 <__udivmoddi4+0x1da>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80006fc:	d26c      	bcs.n	80007d8 <__udivmoddi4+0x2ac>
 80006fe:	45a6      	cmp	lr, r4
 8000700:	d96a      	bls.n	80007d8 <__udivmoddi4+0x2ac>
 8000702:	3b02      	subs	r3, #2
 8000704:	4464      	add	r4, ip
 8000706:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070a:	fba3 9502 	umull	r9, r5, r3, r2
 800070e:	eba4 040e 	sub.w	r4, r4, lr
 8000712:	42ac      	cmp	r4, r5
 8000714:	46c8      	mov	r8, r9
 8000716:	46ae      	mov	lr, r5
 8000718:	d356      	bcc.n	80007c8 <__udivmoddi4+0x29c>
 800071a:	d053      	beq.n	80007c4 <__udivmoddi4+0x298>
 800071c:	b156      	cbz	r6, 8000734 <__udivmoddi4+0x208>
 800071e:	ebb0 0208 	subs.w	r2, r0, r8
 8000722:	eb64 040e 	sbc.w	r4, r4, lr
 8000726:	fa04 f707 	lsl.w	r7, r4, r7
 800072a:	40ca      	lsrs	r2, r1
 800072c:	40cc      	lsrs	r4, r1
 800072e:	4317      	orrs	r7, r2
 8000730:	e9c6 7400 	strd	r7, r4, [r6]
 8000734:	4618      	mov	r0, r3
 8000736:	2100      	movs	r1, #0
 8000738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073c:	f1c3 0120 	rsb	r1, r3, #32
 8000740:	fa02 fc03 	lsl.w	ip, r2, r3
 8000744:	fa20 f201 	lsr.w	r2, r0, r1
 8000748:	fa25 f101 	lsr.w	r1, r5, r1
 800074c:	409d      	lsls	r5, r3
 800074e:	432a      	orrs	r2, r5
 8000750:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000754:	fa1f fe8c 	uxth.w	lr, ip
 8000758:	fbb1 f0f7 	udiv	r0, r1, r7
 800075c:	fb07 1510 	mls	r5, r7, r0, r1
 8000760:	0c11      	lsrs	r1, r2, #16
 8000762:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000766:	fb00 f50e 	mul.w	r5, r0, lr
 800076a:	428d      	cmp	r5, r1
 800076c:	fa04 f403 	lsl.w	r4, r4, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x258>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f100 38ff 	add.w	r8, r0, #4294967295
 800077a:	d22f      	bcs.n	80007dc <__udivmoddi4+0x2b0>
 800077c:	428d      	cmp	r5, r1
 800077e:	d92d      	bls.n	80007dc <__udivmoddi4+0x2b0>
 8000780:	3802      	subs	r0, #2
 8000782:	4461      	add	r1, ip
 8000784:	1b49      	subs	r1, r1, r5
 8000786:	b292      	uxth	r2, r2
 8000788:	fbb1 f5f7 	udiv	r5, r1, r7
 800078c:	fb07 1115 	mls	r1, r7, r5, r1
 8000790:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000794:	fb05 f10e 	mul.w	r1, r5, lr
 8000798:	4291      	cmp	r1, r2
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x282>
 800079c:	eb1c 0202 	adds.w	r2, ip, r2
 80007a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80007a4:	d216      	bcs.n	80007d4 <__udivmoddi4+0x2a8>
 80007a6:	4291      	cmp	r1, r2
 80007a8:	d914      	bls.n	80007d4 <__udivmoddi4+0x2a8>
 80007aa:	3d02      	subs	r5, #2
 80007ac:	4462      	add	r2, ip
 80007ae:	1a52      	subs	r2, r2, r1
 80007b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80007b4:	e738      	b.n	8000628 <__udivmoddi4+0xfc>
 80007b6:	4631      	mov	r1, r6
 80007b8:	4630      	mov	r0, r6
 80007ba:	e708      	b.n	80005ce <__udivmoddi4+0xa2>
 80007bc:	4639      	mov	r1, r7
 80007be:	e6e6      	b.n	800058e <__udivmoddi4+0x62>
 80007c0:	4610      	mov	r0, r2
 80007c2:	e6fb      	b.n	80005bc <__udivmoddi4+0x90>
 80007c4:	4548      	cmp	r0, r9
 80007c6:	d2a9      	bcs.n	800071c <__udivmoddi4+0x1f0>
 80007c8:	ebb9 0802 	subs.w	r8, r9, r2
 80007cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80007d0:	3b01      	subs	r3, #1
 80007d2:	e7a3      	b.n	800071c <__udivmoddi4+0x1f0>
 80007d4:	4645      	mov	r5, r8
 80007d6:	e7ea      	b.n	80007ae <__udivmoddi4+0x282>
 80007d8:	462b      	mov	r3, r5
 80007da:	e794      	b.n	8000706 <__udivmoddi4+0x1da>
 80007dc:	4640      	mov	r0, r8
 80007de:	e7d1      	b.n	8000784 <__udivmoddi4+0x258>
 80007e0:	46d0      	mov	r8, sl
 80007e2:	e77b      	b.n	80006dc <__udivmoddi4+0x1b0>
 80007e4:	3d02      	subs	r5, #2
 80007e6:	4462      	add	r2, ip
 80007e8:	e732      	b.n	8000650 <__udivmoddi4+0x124>
 80007ea:	4608      	mov	r0, r1
 80007ec:	e70a      	b.n	8000604 <__udivmoddi4+0xd8>
 80007ee:	4464      	add	r4, ip
 80007f0:	3802      	subs	r0, #2
 80007f2:	e742      	b.n	800067a <__udivmoddi4+0x14e>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <PopSendTx8Bytes>:
	}

	return HAL_OK;
}

HAL_StatusTypeDef PopSendTx8Bytes(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	txHeader.RTR = CAN_RTR_DATA; // Data frame
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
	txHeader.IDE = CAN_ID_EXT;	 // CAN Extend ID
 8000802:	2304      	movs	r3, #4
 8000804:	60fb      	str	r3, [r7, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	763b      	strb	r3, [r7, #24]

	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 800080a:	e035      	b.n	8000878 <PopSendTx8Bytes+0x80>
		if (isfull == 0 && readpoint == writepoint)break;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <PopSendTx8Bytes+0xa0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d105      	bne.n	8000820 <PopSendTx8Bytes+0x28>
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <PopSendTx8Bytes+0xa4>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <PopSendTx8Bytes+0xa8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d034      	beq.n	800088a <PopSendTx8Bytes+0x92>

		txHeader.DLC = buffer[readpoint].DLC;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <PopSendTx8Bytes+0xa4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <PopSendTx8Bytes+0xac>)
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	4413      	add	r3, r2
 800082a:	3304      	adds	r3, #4
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	617b      	str	r3, [r7, #20]
		txHeader.ExtId = buffer[readpoint].ExtId;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <PopSendTx8Bytes+0xa4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <PopSendTx8Bytes+0xac>)
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60bb      	str	r3, [r7, #8]

		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, buffer[readpoint].bytes, &txMailbox);
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <PopSendTx8Bytes+0xb0>)
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <PopSendTx8Bytes+0xa4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	011b      	lsls	r3, r3, #4
 8000848:	3308      	adds	r3, #8
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <PopSendTx8Bytes+0xac>)
 800084c:	441a      	add	r2, r3
 800084e:	463b      	mov	r3, r7
 8000850:	1d39      	adds	r1, r7, #4
 8000852:	f001 fef7 	bl	8002644 <HAL_CAN_AddTxMessage>
 8000856:	4603      	mov	r3, r0
 8000858:	77fb      	strb	r3, [r7, #31]
		if (ret != HAL_OK)return ret;
 800085a:	7ffb      	ldrb	r3, [r7, #31]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <PopSendTx8Bytes+0x6c>
 8000860:	7ffb      	ldrb	r3, [r7, #31]
 8000862:	e014      	b.n	800088e <PopSendTx8Bytes+0x96>

		readpoint = (readpoint + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <PopSendTx8Bytes+0xa4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <PopSendTx8Bytes+0xa4>)
 8000870:	6013      	str	r3, [r2, #0]
		isfull = 0;
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <PopSendTx8Bytes+0xa0>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
	while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0){
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <PopSendTx8Bytes+0xb0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f001 ffb1 	bl	80027e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1c1      	bne.n	800080c <PopSendTx8Bytes+0x14>
 8000888:	e000      	b.n	800088c <PopSendTx8Bytes+0x94>
		if (isfull == 0 && readpoint == writepoint)break;
 800088a:	bf00      	nop
	}

	return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200024a8 	.word	0x200024a8
 800089c:	200024a0 	.word	0x200024a0
 80008a0:	200024a4 	.word	0x200024a4
 80008a4:	200004a0 	.word	0x200004a0
 80008a8:	200001cc 	.word	0x200001cc

080008ac <WhenTxMailbox0_1_2CompleteCallbackCalled>:

void WhenTxMailbox0_1_2CompleteCallbackCalled(){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 80008b0:	f7ff ffa2 	bl	80007f8 <PopSendTx8Bytes>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <WhenTxMailbox0_1_2AbortCallbackCalled>:

void WhenTxMailbox0_1_2AbortCallbackCalled(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	PopSendTx8Bytes();
 80008bc:	f7ff ff9c 	bl	80007f8 <PopSendTx8Bytes>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <WhenCANRxFifo0MsgPending>:

void WhenCANRxFifo0MsgPending(CAN_HandleTypeDef *phcan, NUM_OF_DEVICES *num_of){ // Fifo0MsgPendingで呼び出すこと. CAN受信時に呼び出される関数
 80008c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008c8:	b08e      	sub	sp, #56	; 0x38
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
 80008ce:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK){
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	f107 0218 	add.w	r2, r7, #24
 80008d8:	2100      	movs	r1, #0
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f001 ffb7 	bl	800284e <HAL_CAN_GetRxMessage>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d004      	beq.n	80008f0 <WhenCANRxFifo0MsgPending+0x2c>
		// Reception Error
		printf("GetRxMessage error\n\r");
 80008e6:	486e      	ldr	r0, [pc, #440]	; (8000aa0 <WhenCANRxFifo0MsgPending+0x1dc>)
 80008e8:	f006 fb48 	bl	8006f7c <iprintf>
		Error_Handler();
 80008ec:	f001 f870 	bl	80019d0 <Error_Handler>
	}
	// awakeコマンドを受信した場合
	CAN_Device can_device = Extract_CAN_Device(rxHeader.ExtId);
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	2200      	movs	r2, #0
 80008f4:	4698      	mov	r8, r3
 80008f6:	4691      	mov	r9, r2
 80008f8:	4640      	mov	r0, r8
 80008fa:	4649      	mov	r1, r9
 80008fc:	f000 f8e2 	bl	8000ac4 <Extract_CAN_Device>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	733a      	strb	r2, [r7, #12]
 8000906:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800090a:	737a      	strb	r2, [r7, #13]
 800090c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8000910:	73bb      	strb	r3, [r7, #14]
	uint8_t extracted_cmd = Extract_CAN_CMD(rxHeader.ExtId);
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	2200      	movs	r2, #0
 8000916:	461c      	mov	r4, r3
 8000918:	4615      	mov	r5, r2
 800091a:	4620      	mov	r0, r4
 800091c:	4629      	mov	r1, r5
 800091e:	f000 f91d 	bl	8000b5c <Extract_CAN_CMD>
 8000922:	4603      	mov	r3, r0
 8000924:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(extracted_cmd == AWAKE_CMD){
 8000928:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800092c:	2b00      	cmp	r3, #0
 800092e:	d139      	bne.n	80009a4 <WhenCANRxFifo0MsgPending+0xe0>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000930:	2300      	movs	r3, #0
 8000932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000936:	e013      	b.n	8000960 <WhenCANRxFifo0MsgPending+0x9c>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000938:	7b3b      	ldrb	r3, [r7, #12]
 800093a:	4618      	mov	r0, r3
 800093c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000940:	4958      	ldr	r1, [pc, #352]	; (8000aa4 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000942:	4603      	mov	r3, r0
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	1a1b      	subs	r3, r3, r0
 8000948:	440b      	add	r3, r1
 800094a:	4413      	add	r3, r2
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	7c3b      	ldrb	r3, [r7, #16]
 8000950:	429a      	cmp	r2, r3
 8000952:	f000 80a0 	beq.w	8000a96 <WhenCANRxFifo0MsgPending+0x1d2>
		for(uint8_t i = 0; i < num_detected[can_device.node_type]; i++){
 8000956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800095a:	3301      	adds	r3, #1
 800095c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000960:	7b3b      	ldrb	r3, [r7, #12]
 8000962:	461a      	mov	r2, r3
 8000964:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000966:	5c9b      	ldrb	r3, [r3, r2]
 8000968:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800096c:	429a      	cmp	r2, r3
 800096e:	d3e3      	bcc.n	8000938 <WhenCANRxFifo0MsgPending+0x74>
		}
		node_id_list[can_device.node_type][num_detected[can_device.node_type]] = rxData[0];
 8000970:	7b3b      	ldrb	r3, [r7, #12]
 8000972:	4619      	mov	r1, r3
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	461a      	mov	r2, r3
 8000978:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 800097a:	5c9b      	ldrb	r3, [r3, r2]
 800097c:	461c      	mov	r4, r3
 800097e:	7c38      	ldrb	r0, [r7, #16]
 8000980:	4a48      	ldr	r2, [pc, #288]	; (8000aa4 <WhenCANRxFifo0MsgPending+0x1e0>)
 8000982:	460b      	mov	r3, r1
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	1a5b      	subs	r3, r3, r1
 8000988:	4413      	add	r3, r2
 800098a:	4423      	add	r3, r4
 800098c:	4602      	mov	r2, r0
 800098e:	701a      	strb	r2, [r3, #0]
		num_detected[can_device.node_type] += 1;
 8000990:	7b3b      	ldrb	r3, [r7, #12]
 8000992:	461a      	mov	r2, r3
 8000994:	4b44      	ldr	r3, [pc, #272]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000996:	5c9b      	ldrb	r3, [r3, r2]
 8000998:	7b3a      	ldrb	r2, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	b2d9      	uxtb	r1, r3
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 80009a0:	5499      	strb	r1, [r3, r2]
 80009a2:	e04a      	b.n	8000a3a <WhenCANRxFifo0MsgPending+0x176>
	}else if(extracted_cmd == FB_CMD){
 80009a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d146      	bne.n	8000a3a <WhenCANRxFifo0MsgPending+0x176>
		if (can_device.node_type == NODE_MCMD1){
 80009ac:	7b3b      	ldrb	r3, [r7, #12]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d10d      	bne.n	80009ce <WhenCANRxFifo0MsgPending+0x10a>
			memcpy(&(_feedback_table_mcmd1[can_device.node_id].feedback_motor[can_device.device_num]),
 80009b2:	7b7b      	ldrb	r3, [r7, #13]
 80009b4:	7bba      	ldrb	r2, [r7, #14]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	4a3b      	ldr	r2, [pc, #236]	; (8000aac <WhenCANRxFifo0MsgPending+0x1e8>)
 80009be:	4413      	add	r3, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	cb03      	ldmia	r3!, {r0, r1}
 80009c8:	6010      	str	r0, [r2, #0]
 80009ca:	6051      	str	r1, [r2, #4]
 80009cc:	e035      	b.n	8000a3a <WhenCANRxFifo0MsgPending+0x176>
                   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD2){
 80009ce:	7b3b      	ldrb	r3, [r7, #12]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d10d      	bne.n	80009f0 <WhenCANRxFifo0MsgPending+0x12c>
			memcpy(&(_feedback_table_mcmd2[can_device.node_id].feedback_motor[can_device.device_num]),
 80009d4:	7b7b      	ldrb	r3, [r7, #13]
 80009d6:	7bba      	ldrb	r2, [r7, #14]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	4a34      	ldr	r2, [pc, #208]	; (8000ab0 <WhenCANRxFifo0MsgPending+0x1ec>)
 80009e0:	4413      	add	r3, r2
 80009e2:	461a      	mov	r2, r3
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	cb03      	ldmia	r3!, {r0, r1}
 80009ea:	6010      	str	r0, [r2, #0]
 80009ec:	6051      	str	r1, [r2, #4]
 80009ee:	e024      	b.n	8000a3a <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD3){
 80009f0:	7b3b      	ldrb	r3, [r7, #12]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d10d      	bne.n	8000a12 <WhenCANRxFifo0MsgPending+0x14e>
			memcpy(&(_feedback_table_mcmd3[can_device.node_id].feedback_motor[can_device.device_num]),
 80009f6:	7b7b      	ldrb	r3, [r7, #13]
 80009f8:	7bba      	ldrb	r2, [r7, #14]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4a2c      	ldr	r2, [pc, #176]	; (8000ab4 <WhenCANRxFifo0MsgPending+0x1f0>)
 8000a02:	4413      	add	r3, r2
 8000a04:	461a      	mov	r2, r3
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	cb03      	ldmia	r3!, {r0, r1}
 8000a0c:	6010      	str	r0, [r2, #0]
 8000a0e:	6051      	str	r1, [r2, #4]
 8000a10:	e013      	b.n	8000a3a <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else if(can_device.node_type == NODE_MCMD4){
 8000a12:	7b3b      	ldrb	r3, [r7, #12]
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d10d      	bne.n	8000a34 <WhenCANRxFifo0MsgPending+0x170>
			memcpy(&(_feedback_table_mcmd4[can_device.node_id].feedback_motor[can_device.device_num]),
 8000a18:	7b7b      	ldrb	r3, [r7, #13]
 8000a1a:	7bba      	ldrb	r2, [r7, #14]
 8000a1c:	005b      	lsls	r3, r3, #1
 8000a1e:	4413      	add	r3, r2
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <WhenCANRxFifo0MsgPending+0x1f4>)
 8000a24:	4413      	add	r3, r2
 8000a26:	461a      	mov	r2, r3
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	cb03      	ldmia	r3!, {r0, r1}
 8000a2e:	6010      	str	r0, [r2, #0]
 8000a30:	6051      	str	r1, [r2, #4]
 8000a32:	e002      	b.n	8000a3a <WhenCANRxFifo0MsgPending+0x176>
				   rxData, sizeof(MCMD_Feedback_Typedef));
		}else{
			printf("Error\n\r");
 8000a34:	4821      	ldr	r0, [pc, #132]	; (8000abc <WhenCANRxFifo0MsgPending+0x1f8>)
 8000a36:	f006 faa1 	bl	8006f7c <iprintf>
		}
	}else{

    }
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a3c:	785a      	ldrb	r2, [r3, #1]
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d128      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a48:	789a      	ldrb	r2, [r3, #2]
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d122      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a54:	78da      	ldrb	r2, [r3, #3]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	789b      	ldrb	r3, [r3, #2]
	if (num_detected[NODE_MCMD1] == num_of->mcmd1 && num_detected[NODE_MCMD2] == num_of->mcmd2 &&
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d11c      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a60:	791a      	ldrb	r2, [r3, #4]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	78db      	ldrb	r3, [r3, #3]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d116      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a6c:	795a      	ldrb	r2, [r3, #5]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	791b      	ldrb	r3, [r3, #4]
		    num_detected[NODE_MCMD3] == num_of->mcmd3 && num_detected[NODE_SERVO] == num_of->servo &&
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d110      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
		    num_detected[NODE_AIR] == num_of->air && num_detected[NODE_MCMD4]==num_of->mcmd4 &&num_detected[NODE_OTHER] == num_of->other){
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a78:	799a      	ldrb	r2, [r3, #6]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	795b      	ldrb	r3, [r3, #5]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d10a      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <WhenCANRxFifo0MsgPending+0x1e4>)
 8000a84:	7a1a      	ldrb	r2, [r3, #8]
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	799b      	ldrb	r3, [r3, #6]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d104      	bne.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
		all_node_detected = 1;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <WhenCANRxFifo0MsgPending+0x1fc>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e000      	b.n	8000a98 <WhenCANRxFifo0MsgPending+0x1d4>
			if(node_id_list[can_device.node_type][i] == rxData[0])return;
 8000a96:	bf00      	nop
	}
}
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000aa0:	08007d34 	.word	0x08007d34
 8000aa4:	200001e0 	.word	0x200001e0
 8000aa8:	200001d4 	.word	0x200001d4
 8000aac:	20000220 	.word	0x20000220
 8000ab0:	200002c0 	.word	0x200002c0
 8000ab4:	20000360 	.word	0x20000360
 8000ab8:	20000400 	.word	0x20000400
 8000abc:	08007d4c 	.word	0x08007d4c
 8000ac0:	200001d0 	.word	0x200001d0

08000ac4 <Extract_CAN_Device>:
uint64_t Make_CAN_ID(Node_Type node_type, uint8_t node_id, uint8_t device_num, uint8_t cmd){
    return ( (((uint8_t)node_type & 0b111) << 11) | (((node_id)&0b111) << 8) | ((device_num&0b111) << 5)
             | (cmd&0b11111) );
}

CAN_Device Extract_CAN_Device(uint64_t can_id) {  // CAN_IDからCAN_Deviceを抽出する
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	e9c7 0100 	strd	r0, r1, [r7]
    CAN_Device ans;
    ans.device_num = ((can_id>>5) & 0b111);
 8000ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ad2:	f04f 0200 	mov.w	r2, #0
 8000ad6:	f04f 0300 	mov.w	r3, #0
 8000ada:	0942      	lsrs	r2, r0, #5
 8000adc:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 8000ae0:	094b      	lsrs	r3, r1, #5
 8000ae2:	b2d3      	uxtb	r3, r2
 8000ae4:	f003 0307 	and.w	r3, r3, #7
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	72bb      	strb	r3, [r7, #10]
    ans.node_id = ((can_id>>8) & 0b111);
 8000aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	0a02      	lsrs	r2, r0, #8
 8000afa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000afe:	0a0b      	lsrs	r3, r1, #8
 8000b00:	b2d3      	uxtb	r3, r2
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	727b      	strb	r3, [r7, #9]
    ans.node_type = (Node_Type)( (can_id>>11) & 0b111);
 8000b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b0e:	f04f 0200 	mov.w	r2, #0
 8000b12:	f04f 0300 	mov.w	r3, #0
 8000b16:	0ac2      	lsrs	r2, r0, #11
 8000b18:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8000b1c:	0acb      	lsrs	r3, r1, #11
 8000b1e:	b2d3      	uxtb	r3, r2
 8000b20:	f003 0307 	and.w	r3, r3, #7
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	723b      	strb	r3, [r7, #8]
    return ans;
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	f107 0208 	add.w	r2, r7, #8
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	4611      	mov	r1, r2
 8000b34:	8019      	strh	r1, [r3, #0]
 8000b36:	3302      	adds	r3, #2
 8000b38:	0c12      	lsrs	r2, r2, #16
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	7b3a      	ldrb	r2, [r7, #12]
 8000b40:	f362 0307 	bfi	r3, r2, #0, #8
 8000b44:	7b7a      	ldrb	r2, [r7, #13]
 8000b46:	f362 230f 	bfi	r3, r2, #8, #8
 8000b4a:	7bba      	ldrb	r2, [r7, #14]
 8000b4c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <Extract_CAN_CMD>:

uint8_t Extract_CAN_CMD(uint64_t can_id){ return ( can_id & 0b11111); }  // cmdを抽出
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	e9c7 0100 	strd	r0, r1, [r7]
 8000b66:	783b      	ldrb	r3, [r7, #0]
 8000b68:	f003 031f 	and.w	r3, r3, #31
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <C620_PID_Ctrl_init>:

float clip_f(float value, float min, float max){
    return fminf(max, fmaxf(value, min));
}

void C620_PID_Ctrl_init(C620_PID_StructTypedef *params) {
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
    params->_integral = 0.0f;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f04f 0200 	mov.w	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
    params->_prev_value = 0.0f;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <C620_Ctrl_Struct_init>:
int16_t c620_current_f2int(float current) {
    return (int16_t) (current * 16384.0f / 20.0f);
}


void C620_Ctrl_Struct_init(C620_Ctrl_StructTypedef *ctrl_struct) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
    ctrl_struct->_target_value = 0.0f;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	63da      	str	r2, [r3, #60]	; 0x3c
    ctrl_struct->_enable_flag = 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    C620_PID_Ctrl_init(&(ctrl_struct->pid));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffde 	bl	8000b7a <C620_PID_Ctrl_init>
    C620_PID_Ctrl_init(&(ctrl_struct->pid_vel));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3318      	adds	r3, #24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffd9 	bl	8000b7a <C620_PID_Ctrl_init>
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <C620_Init>:

void C620_Init(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < size; i++) {
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e00c      	b.n	8000bfc <C620_Init+0x2c>
        C620_Ctrl_Struct_init(&(dev_info_array[i].ctrl_param));
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	224c      	movs	r2, #76	; 0x4c
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	3304      	adds	r3, #4
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ffd4 	bl	8000b9e <C620_Ctrl_Struct_init>
    for (uint8_t i = 0; i < size; i++) {
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	7bfa      	ldrb	r2, [r7, #15]
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3ee      	bcc.n	8000be2 <C620_Init+0x12>
    }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <C620_WaitForConnect>:
    }
    if (flag_1)C620_SendBytes(phcan, 0x200, (uint8_t *) data1, sizeof(data1));
    if (flag_2)C620_SendBytes(phcan, 0x1FF, (uint8_t *) data2, sizeof(data2));
}

void C620_WaitForConnect(C620_DeviceInfo dev_info_array[], uint8_t size) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
    uint8_t flag = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	77fb      	strb	r3, [r7, #31]
    printf("[C620] Wait for Connection...\n");
 8000c20:	4815      	ldr	r0, [pc, #84]	; (8000c78 <C620_WaitForConnect+0x68>)
 8000c22:	f006 fa11 	bl	8007048 <puts>
    while (!flag) {
 8000c26:	e01d      	b.n	8000c64 <C620_WaitForConnect+0x54>
        flag = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < size; i++) {
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	77bb      	strb	r3, [r7, #30]
 8000c30:	e014      	b.n	8000c5c <C620_WaitForConnect+0x4c>
            if (!Get_C620_FeedbackData(&dev_info_array[i]).get_flag) {
 8000c32:	7fbb      	ldrb	r3, [r7, #30]
 8000c34:	224c      	movs	r2, #76	; 0x4c
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	441a      	add	r2, r3
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fafb 	bl	8001240 <Get_C620_FeedbackData>
 8000c4a:	7b7b      	ldrb	r3, [r7, #13]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d102      	bne.n	8000c56 <C620_WaitForConnect+0x46>
                flag = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	77fb      	strb	r3, [r7, #31]
                break;
 8000c54:	e006      	b.n	8000c64 <C620_WaitForConnect+0x54>
        for (uint8_t i = 0; i < size; i++) {
 8000c56:	7fbb      	ldrb	r3, [r7, #30]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	77bb      	strb	r3, [r7, #30]
 8000c5c:	7fba      	ldrb	r2, [r7, #30]
 8000c5e:	78fb      	ldrb	r3, [r7, #3]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d3e6      	bcc.n	8000c32 <C620_WaitForConnect+0x22>
    while (!flag) {
 8000c64:	7ffb      	ldrb	r3, [r7, #31]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0de      	beq.n	8000c28 <C620_WaitForConnect+0x18>
            }
        }
    }
    printf("[C620] All Connected!\n");
 8000c6a:	4804      	ldr	r0, [pc, #16]	; (8000c7c <C620_WaitForConnect+0x6c>)
 8000c6c:	f006 f9ec 	bl	8007048 <puts>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	08007e50 	.word	0x08007e50
 8000c7c:	08007e70 	.word	0x08007e70

08000c80 <C620_SetTarget>:
void C620_ChangeControl(C620_DeviceInfo *dev_info, C620_CTRL_TYPE new_ctrl_type) {
    C620_Ctrl_Struct_init(&(dev_info->ctrl_param));
    dev_info->ctrl_param.ctrl_type = new_ctrl_type;
}

void C620_SetTarget(C620_DeviceInfo *device_info, float target_value) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	ed87 0a00 	vstr	s0, [r7]
    device_info->ctrl_param._target_value = target_value;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <C620_ControlEnable>:

void C620_ControlEnable(C620_DeviceInfo *dev_info) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
    dev_info->ctrl_param._enable_flag = 1;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_C620_PopSendTx8Bytes>:
        p_can_ring->is_full = 1;
    }
    return HAL_OK;
}

HAL_StatusTypeDef _C620_PopSendTx8Bytes(CAN_HandleTypeDef *phcan, CAN_RingBuf *p_can_ring) {
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b08a      	sub	sp, #40	; 0x28
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint32_t txMailbox;

    txHeader.RTR = CAN_RTR_DATA;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
    txHeader.TransmitGlobalTime = DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3020 	strb.w	r3, [r7, #32]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8000cd2:	e04d      	b.n	8000d70 <_C620_PopSendTx8Bytes+0xb6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000cda:	7a1b      	ldrb	r3, [r3, #8]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d109      	bne.n	8000cf4 <_C620_PopSendTx8Bytes+0x3a>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d044      	beq.n	8000d7e <_C620_PopSendTx8Bytes+0xc4>

        txHeader.DLC = p_can_ring->buffer[p_can_ring->read_point].DLC;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	4413      	add	r3, r2
 8000d02:	3304      	adds	r3, #4
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	61fb      	str	r3, [r7, #28]
        txHeader.StdId = p_can_ring->buffer[p_can_ring->read_point].StdId;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	011b      	lsls	r3, r3, #4
 8000d14:	4413      	add	r3, r2
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
        txHeader.ExtId = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

        HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(phcan, &txHeader, p_can_ring->buffer[p_can_ring->read_point].bytes,
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	3308      	adds	r3, #8
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	f107 010c 	add.w	r1, r7, #12
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f001 fc84 	bl	8002644 <HAL_CAN_AddTxMessage>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                                     &txMailbox);
        if (ret != HAL_OK)return ret;
 8000d42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <_C620_PopSendTx8Bytes+0x96>
 8000d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d4e:	e018      	b.n	8000d82 <_C620_PopSendTx8Bytes+0xc8>
        p_can_ring->read_point = ((p_can_ring->read_point) + 1) & (CAN_TXBUFFER_SIZE - 1);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8000d64:	6013      	str	r3, [r2, #0]
        p_can_ring->is_full = 0;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	721a      	strb	r2, [r3, #8]
    while (HAL_CAN_GetTxMailboxesFreeLevel(phcan) > 0) {
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f001 fd37 	bl	80027e4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1ab      	bne.n	8000cd4 <_C620_PopSendTx8Bytes+0x1a>
 8000d7c:	e000      	b.n	8000d80 <_C620_PopSendTx8Bytes+0xc6>
        if ((p_can_ring->is_full == 0) && (p_can_ring->read_point == p_can_ring->write_point))break;
 8000d7e:	bf00      	nop
    }
    return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <C620_WhenTxMailboxCompleteCallbackCalled>:
    }
    return HAL_OK;
}


void C620_WhenTxMailboxCompleteCallbackCalled(CAN_HandleTypeDef *phcan) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <C620_WhenTxMailboxCompleteCallbackCalled+0x24>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d104      	bne.n	8000da8 <C620_WhenTxMailboxCompleteCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8000d9e:	4905      	ldr	r1, [pc, #20]	; (8000db4 <C620_WhenTxMailboxCompleteCallbackCalled+0x28>)
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff8a 	bl	8000cba <_C620_PopSendTx8Bytes>
 8000da6:	e000      	b.n	8000daa <C620_WhenTxMailboxCompleteCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8000da8:	bf00      	nop
}
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	200024ac 	.word	0x200024ac
 8000db4:	200024b0 	.word	0x200024b0

08000db8 <C620_WhenTxMailboxAbortCallbackCalled>:

void C620_WhenTxMailboxAbortCallbackCalled(CAN_HandleTypeDef *phcan) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    if (_c620_phcan_global != phcan)return;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <C620_WhenTxMailboxAbortCallbackCalled+0x24>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d104      	bne.n	8000dd4 <C620_WhenTxMailboxAbortCallbackCalled+0x1c>
    _C620_PopSendTx8Bytes(phcan, &_can_buf_ring1);
 8000dca:	4905      	ldr	r1, [pc, #20]	; (8000de0 <C620_WhenTxMailboxAbortCallbackCalled+0x28>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff74 	bl	8000cba <_C620_PopSendTx8Bytes>
 8000dd2:	e000      	b.n	8000dd6 <C620_WhenTxMailboxAbortCallbackCalled+0x1e>
    if (_c620_phcan_global != phcan)return;
 8000dd4:	bf00      	nop
}
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200024ac 	.word	0x200024ac
 8000de0:	200024b0 	.word	0x200024b0

08000de4 <_set_fb_data_raw>:


void _set_fb_data_raw(const uint8_t rxData[], uint8_t device_id) {
 8000de4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000de8:	b085      	sub	sp, #20
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	460b      	mov	r3, r1
 8000df0:	70fb      	strb	r3, [r7, #3]
    if (device_id > 9 || device_id <= 0)return;
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	2b09      	cmp	r3, #9
 8000df6:	f200 80f5 	bhi.w	8000fe4 <_set_fb_data_raw+0x200>
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 80f1 	beq.w	8000fe4 <_set_fb_data_raw+0x200>

    _c620_feedback_data_raw_global[device_id]._get_counter += 1;
 8000e02:	78fb      	ldrb	r3, [r7, #3]
 8000e04:	4a7a      	ldr	r2, [pc, #488]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e06:	015b      	lsls	r3, r3, #5
 8000e08:	4413      	add	r3, r2
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	3201      	adds	r2, #1
 8000e10:	b2d1      	uxtb	r1, r2
 8000e12:	4a77      	ldr	r2, [pc, #476]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e14:	015b      	lsls	r3, r3, #5
 8000e16:	4413      	add	r3, r2
 8000e18:	460a      	mov	r2, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
    if (_c620_feedback_data_raw_global[device_id]._get_counter > 128) {
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	4a74      	ldr	r2, [pc, #464]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e20:	015b      	lsls	r3, r3, #5
 8000e22:	4413      	add	r3, r2
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b80      	cmp	r3, #128	; 0x80
 8000e28:	d905      	bls.n	8000e36 <_set_fb_data_raw+0x52>
        _c620_feedback_data_raw_global[device_id]._get_counter = 128;  // overflow対策
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	4a70      	ldr	r2, [pc, #448]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e2e:	015b      	lsls	r3, r3, #5
 8000e30:	4413      	add	r3, r2
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	701a      	strb	r2, [r3, #0]
    }

    if (_c620_feedback_data_raw_global[device_id]._get_counter < 50) {  // M3508のEncoderの初期位置を取得
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	4a6d      	ldr	r2, [pc, #436]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e3a:	015b      	lsls	r3, r3, #5
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b31      	cmp	r3, #49	; 0x31
 8000e42:	d836      	bhi.n	8000eb2 <_set_fb_data_raw+0xce>
        _c620_feedback_data_raw_global[device_id]._internal_offset_pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b21b      	sxth	r3, r3
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	b291      	uxth	r1, r2
 8000e5c:	4a64      	ldr	r2, [pc, #400]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e5e:	015b      	lsls	r3, r3, #5
 8000e60:	4413      	add	r3, r2
 8000e62:	3312      	adds	r3, #18
 8000e64:	460a      	mov	r2, r1
 8000e66:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos_pre = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b21b      	sxth	r3, r3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	b291      	uxth	r1, r2
 8000e80:	4a5b      	ldr	r2, [pc, #364]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000e82:	015b      	lsls	r3, r3, #5
 8000e84:	4413      	add	r3, r2
 8000e86:	3314      	adds	r3, #20
 8000e88:	460a      	mov	r2, r1
 8000e8a:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	b291      	uxth	r1, r2
 8000ea4:	4a52      	ldr	r2, [pc, #328]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000ea6:	015b      	lsls	r3, r3, #5
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3310      	adds	r3, #16
 8000eac:	460a      	mov	r2, r1
 8000eae:	801a      	strh	r2, [r3, #0]
        return;
 8000eb0:	e099      	b.n	8000fe6 <_set_fb_data_raw+0x202>
    }

    // dataの設定
    _c620_feedback_data_raw_global[device_id].pos_pre = _c620_feedback_data_raw_global[device_id].pos;
 8000eb2:	78fa      	ldrb	r2, [r7, #3]
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	494e      	ldr	r1, [pc, #312]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000eb8:	0152      	lsls	r2, r2, #5
 8000eba:	440a      	add	r2, r1
 8000ebc:	3210      	adds	r2, #16
 8000ebe:	8811      	ldrh	r1, [r2, #0]
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000ec2:	015b      	lsls	r3, r3, #5
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3314      	adds	r3, #20
 8000ec8:	460a      	mov	r2, r1
 8000eca:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].pos = (uint16_t) (rxData[0] << 8 | rxData[1]);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	b291      	uxth	r1, r2
 8000ee4:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	4413      	add	r3, r2
 8000eea:	3310      	adds	r3, #16
 8000eec:	460a      	mov	r2, r1
 8000eee:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].vel = (int16_t) (rxData[2] << 8 | rxData[3]);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	021b      	lsls	r3, r3, #8
 8000ef8:	b219      	sxth	r1, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3303      	adds	r3, #3
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	78fb      	ldrb	r3, [r7, #3]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	b211      	sxth	r1, r2
 8000f08:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f0a:	015b      	lsls	r3, r3, #5
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3316      	adds	r3, #22
 8000f10:	460a      	mov	r2, r1
 8000f12:	801a      	strh	r2, [r3, #0]
    _c620_feedback_data_raw_global[device_id].cur = (int16_t) (rxData[4] << 8 | rxData[5]);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3304      	adds	r3, #4
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	b219      	sxth	r1, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3305      	adds	r3, #5
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	b211      	sxth	r1, r2
 8000f2c:	4a30      	ldr	r2, [pc, #192]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	4413      	add	r3, r2
 8000f32:	3318      	adds	r3, #24
 8000f34:	460a      	mov	r2, r1
 8000f36:	801a      	strh	r2, [r3, #0]

    // 回転数の計算
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f3c:	015b      	lsls	r3, r3, #5
 8000f3e:	4413      	add	r3, r2
 8000f40:	3310      	adds	r3, #16
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
                       (int32_t) (_c620_feedback_data_raw_global[device_id].pos_pre);
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f4a:	015b      	lsls	r3, r3, #5
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3314      	adds	r3, #20
 8000f50:	881b      	ldrh	r3, [r3, #0]
    int32_t diff_pos = (int32_t) (_c620_feedback_data_raw_global[device_id].pos) -
 8000f52:	1acb      	subs	r3, r1, r3
 8000f54:	60fb      	str	r3, [r7, #12]
    if (diff_pos > 4096) {
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f5c:	dd1f      	ble.n	8000f9e <_set_fb_data_raw+0x1ba>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != -(INT64_MAX / 10)) {
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f62:	015b      	lsls	r3, r3, #5
 8000f64:	4413      	add	r3, r2
 8000f66:	3308      	adds	r3, #8
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	4921      	ldr	r1, [pc, #132]	; (8000ff4 <_set_fb_data_raw+0x210>)
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	bf08      	it	eq
 8000f72:	f112 3fcc 	cmneq.w	r2, #3435973836	; 0xcccccccc
 8000f76:	d036      	beq.n	8000fe6 <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num -= 1;
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	4413      	add	r3, r2
 8000f80:	3308      	adds	r3, #8
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	78f9      	ldrb	r1, [r7, #3]
 8000f88:	f112 38ff 	adds.w	r8, r2, #4294967295
 8000f8c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8000f90:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000f92:	014b      	lsls	r3, r1, #5
 8000f94:	4413      	add	r3, r2
 8000f96:	3308      	adds	r3, #8
 8000f98:	e9c3 8900 	strd	r8, r9, [r3]
 8000f9c:	e023      	b.n	8000fe6 <_set_fb_data_raw+0x202>
        }  // overflow対策
    } else if (diff_pos < -4096) {
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000fa4:	da1f      	bge.n	8000fe6 <_set_fb_data_raw+0x202>
        if (_c620_feedback_data_raw_global[device_id]._rot_num != (INT64_MAX / 10)) {
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000faa:	015b      	lsls	r3, r3, #5
 8000fac:	4413      	add	r3, r2
 8000fae:	3308      	adds	r3, #8
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <_set_fb_data_raw+0x214>)
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	bf08      	it	eq
 8000fba:	f1b2 3fcc 	cmpeq.w	r2, #3435973836	; 0xcccccccc
 8000fbe:	d012      	beq.n	8000fe6 <_set_fb_data_raw+0x202>
            _c620_feedback_data_raw_global[device_id]._rot_num += 1;
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000fc4:	015b      	lsls	r3, r3, #5
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	78f9      	ldrb	r1, [r7, #3]
 8000fd0:	1c54      	adds	r4, r2, #1
 8000fd2:	f143 0500 	adc.w	r5, r3, #0
 8000fd6:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <_set_fb_data_raw+0x20c>)
 8000fd8:	014b      	lsls	r3, r1, #5
 8000fda:	4413      	add	r3, r2
 8000fdc:	3308      	adds	r3, #8
 8000fde:	e9c3 4500 	strd	r4, r5, [r3]
 8000fe2:	e000      	b.n	8000fe6 <_set_fb_data_raw+0x202>
    if (device_id > 9 || device_id <= 0)return;
 8000fe4:	bf00      	nop
        }  // overflow対策
    }
}
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000fee:	4770      	bx	lr
 8000ff0:	200044c0 	.word	0x200044c0
 8000ff4:	f3333333 	.word	0xf3333333
 8000ff8:	0ccccccc 	.word	0x0ccccccc

08000ffc <C620_WhenCANRxFifo1MsgPending>:

void C620_WhenCANRxFifo1MsgPending(CAN_HandleTypeDef *phcan) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    // Fifo0はCANLibで使うので、Fifo1を使う事。
    if (_c620_phcan_global != phcan)return;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <C620_WhenCANRxFifo1MsgPending+0x60>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d121      	bne.n	8001052 <C620_WhenCANRxFifo1MsgPending+0x56>
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    if (HAL_CAN_GetRxMessage(phcan, CAN_RX_FIFO1, &rxHeader, rxData) != HAL_OK) {
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	f107 0214 	add.w	r2, r7, #20
 8001016:	2101      	movs	r1, #1
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f001 fc18 	bl	800284e <HAL_CAN_GetRxMessage>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <C620_WhenCANRxFifo1MsgPending+0x32>
        // Reception Error
        printf("GetRxMessage error\n\r");
 8001024:	480e      	ldr	r0, [pc, #56]	; (8001060 <C620_WhenCANRxFifo1MsgPending+0x64>)
 8001026:	f005 ffa9 	bl	8006f7c <iprintf>
        Error_Handler();
 800102a:	f000 fcd1 	bl	80019d0 <Error_Handler>
    }

    if (((rxHeader.StdId - 0x200) < 9) && ((rxHeader.StdId - 0x200) >= 1)) {
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001034:	2b08      	cmp	r3, #8
 8001036:	d80d      	bhi.n	8001054 <C620_WhenCANRxFifo1MsgPending+0x58>
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800103e:	d009      	beq.n	8001054 <C620_WhenCANRxFifo1MsgPending+0x58>
        _set_fb_data_raw(rxData, rxHeader.StdId - 0x200);  // fb_data_rawにデータを入力
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff feca 	bl	8000de4 <_set_fb_data_raw>
 8001050:	e000      	b.n	8001054 <C620_WhenCANRxFifo1MsgPending+0x58>
    if (_c620_phcan_global != phcan)return;
 8001052:	bf00      	nop
    }
}
 8001054:	3730      	adds	r7, #48	; 0x30
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200024ac 	.word	0x200024ac
 8001060:	08007e88 	.word	0x08007e88

08001064 <Init_C620_CAN_System>:


void Init_C620_CAN_System(CAN_HandleTypeDef *phcan) {  //CAN初期化
 8001064:	b580      	push	{r7, lr}
 8001066:	b08e      	sub	sp, #56	; 0x38
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    _c620_phcan_global = phcan;
 800106c:	4a6c      	ldr	r2, [pc, #432]	; (8001220 <Init_C620_CAN_System+0x1bc>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
    CAN_FilterTypeDef sFilterConfig;

    //フィルタバンク設定
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001076:	2301      	movs	r3, #1
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800107a:	2301      	movs	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterActivation = ENABLE;
 800107e:	2301      	movs	r3, #1
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFilterConfig.SlaveStartFilterBank = 14;
 8001082:	230e      	movs	r3, #14
 8001084:	633b      	str	r3, [r7, #48]	; 0x30

    // CAN2をつかうならSlaveStartFilterBank以上の値をFilterBankに設定する必要がある
    // FIFO1に初期化用のフィルタを設定
    sFilterConfig.FilterBank = 10; // CANLibで6まで使ってる
 8001086:	230a      	movs	r3, #10
 8001088:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b1000) << 5;
 800108a:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800108e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 8001090:	4b64      	ldr	r3, [pc, #400]	; (8001224 <Init_C620_CAN_System+0x1c0>)
 8001092:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f001 f99d 	bl	80023e4 <HAL_CAN_ConfigFilter>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <Init_C620_CAN_System+0x50>
        Error_Handler();
 80010b0:	f000 fc8e 	bl	80019d0 <Error_Handler>
    }

    sFilterConfig.FilterBank = 11; // CANLibで6まで使ってる
 80010b4:	230b      	movs	r3, #11
 80010b6:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0001) << 5;
 80010b8:	f244 0320 	movw	r3, #16416	; 0x4020
 80010bc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0110) << 5;
 80010be:	4b5a      	ldr	r3, [pc, #360]	; (8001228 <Init_C620_CAN_System+0x1c4>)
 80010c0:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 80010c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ca:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f001 f986 	bl	80023e4 <HAL_CAN_ConfigFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <Init_C620_CAN_System+0x7e>
        Error_Handler();
 80010de:	f000 fc77 	bl	80019d0 <Error_Handler>
    }

    sFilterConfig.FilterBank = 12; // CANLibで6まで使ってる
 80010e2:	230c      	movs	r3, #12
 80010e4:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0010) << 5;
 80010e6:	f244 0340 	movw	r3, #16448	; 0x4040
 80010ea:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = (((1 << 12) - 1) ^ 0b0100) << 5;
 80010ec:	4b4f      	ldr	r3, [pc, #316]	; (800122c <Init_C620_CAN_System+0x1c8>)
 80010ee:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 80010f0:	2300      	movs	r3, #0
 80010f2:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 80010f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f8:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 f96f 	bl	80023e4 <HAL_CAN_ConfigFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <Init_C620_CAN_System+0xac>
        Error_Handler();
 800110c:	f000 fc60 	bl	80019d0 <Error_Handler>
    }

    sFilterConfig.FilterBank = 13; // CANLibで6まで使ってる
 8001110:	230d      	movs	r3, #13
 8001112:	623b      	str	r3, [r7, #32]
    sFilterConfig.FilterIdHigh = (0x200 | 0b0100) << 5;
 8001114:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001118:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterMaskIdHigh = ((1 << 12) - 1) << 5;
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <Init_C620_CAN_System+0x1c0>)
 800111c:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterIdLow = 0b000; // 下16bit
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterMaskIdLow = (1 << 16) - 1;  // Standard ID
 8001122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001126:	61bb      	str	r3, [r7, #24]
    if (HAL_CAN_ConfigFilter(phcan, &sFilterConfig) != HAL_OK) {
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	4619      	mov	r1, r3
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 f958 	bl	80023e4 <HAL_CAN_ConfigFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <Init_C620_CAN_System+0xda>
        Error_Handler();
 800113a:	f000 fc49 	bl	80019d0 <Error_Handler>
    }

    if (HAL_CAN_Start(phcan) != HAL_OK) {
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f001 fa3c 	bl	80025bc <HAL_CAN_Start>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <Init_C620_CAN_System+0xf0>
        printf(" -> Start Error CAN_C620\n");
 800114a:	4839      	ldr	r0, [pc, #228]	; (8001230 <Init_C620_CAN_System+0x1cc>)
 800114c:	f005 ff7c 	bl	8007048 <puts>
        Error_Handler();
 8001150:	f000 fc3e 	bl	80019d0 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8001154:	2110      	movs	r1, #16
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 fc8b 	bl	8002a72 <HAL_CAN_ActivateNotification>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <Init_C620_CAN_System+0x108>
        printf(" -> FIFO1 CAN_Activation error1\n\r");
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <Init_C620_CAN_System+0x1d0>)
 8001164:	f005 ff0a 	bl	8006f7c <iprintf>
        Error_Handler();
 8001168:	f000 fc32 	bl	80019d0 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(phcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f001 fc7f 	bl	8002a72 <HAL_CAN_ActivateNotification>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <Init_C620_CAN_System+0x120>
        printf(" -> CAN_Activation error2\n\r");
 800117a:	482f      	ldr	r0, [pc, #188]	; (8001238 <Init_C620_CAN_System+0x1d4>)
 800117c:	f005 fefe 	bl	8006f7c <iprintf>
        Error_Handler();
 8001180:	f000 fc26 	bl	80019d0 <Error_Handler>
    }

    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800118a:	e040      	b.n	800120e <Init_C620_CAN_System+0x1aa>
        _c620_feedback_data_raw_global[i].pos = 0;
 800118c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <Init_C620_CAN_System+0x1d8>)
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	4413      	add	r3, r2
 8001196:	3310      	adds	r3, #16
 8001198:	2200      	movs	r2, #0
 800119a:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].pos_pre = 0;
 800119c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011a0:	4a26      	ldr	r2, [pc, #152]	; (800123c <Init_C620_CAN_System+0x1d8>)
 80011a2:	015b      	lsls	r3, r3, #5
 80011a4:	4413      	add	r3, r2
 80011a6:	3314      	adds	r3, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._rot_num = 0;
 80011ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <Init_C620_CAN_System+0x1d8>)
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	4413      	add	r3, r2
 80011b6:	f103 0108 	add.w	r1, r3, #8
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	e9c1 2300 	strd	r2, r3, [r1]
        _c620_feedback_data_raw_global[i].vel = 0;
 80011c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <Init_C620_CAN_System+0x1d8>)
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	4413      	add	r3, r2
 80011d0:	3316      	adds	r3, #22
 80011d2:	2200      	movs	r2, #0
 80011d4:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i].cur = 0;
 80011d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011da:	4a18      	ldr	r2, [pc, #96]	; (800123c <Init_C620_CAN_System+0x1d8>)
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4413      	add	r3, r2
 80011e0:	3318      	adds	r3, #24
 80011e2:	2200      	movs	r2, #0
 80011e4:	801a      	strh	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._get_counter = 0;
 80011e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <Init_C620_CAN_System+0x1d8>)
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	4413      	add	r3, r2
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
        _c620_feedback_data_raw_global[i]._internal_offset_pos = 0;
 80011f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <Init_C620_CAN_System+0x1d8>)
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	4413      	add	r3, r2
 80011fe:	3312      	adds	r3, #18
 8001200:	2200      	movs	r2, #0
 8001202:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 9; i++) {  // init fb_data_raw
 8001204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001208:	3301      	adds	r3, #1
 800120a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800120e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001212:	2b08      	cmp	r3, #8
 8001214:	d9ba      	bls.n	800118c <Init_C620_CAN_System+0x128>
    }
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	3738      	adds	r7, #56	; 0x38
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200024ac 	.word	0x200024ac
 8001224:	0001ffe0 	.word	0x0001ffe0
 8001228:	0001ff20 	.word	0x0001ff20
 800122c:	0001ff60 	.word	0x0001ff60
 8001230:	08007ea0 	.word	0x08007ea0
 8001234:	08007ebc 	.word	0x08007ebc
 8001238:	08007ee0 	.word	0x08007ee0
 800123c:	200044c0 	.word	0x200044c0

08001240 <Get_C620_FeedbackData>:


C620_FeedbackData Get_C620_FeedbackData(C620_DeviceInfo *device_info) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	ed2d 8b02 	vpush	{d8}
 8001246:	b08b      	sub	sp, #44	; 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
    uint8_t device_id = device_info->device_id;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (device_id >= 9)device_id = 0;
 8001256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125a:	2b08      	cmp	r3, #8
 800125c:	d902      	bls.n	8001264 <Get_C620_FeedbackData+0x24>
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    C620_FeedbackData fb_data;
    fb_data.device_id = device_id;
 8001264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001268:	733b      	strb	r3, [r7, #12]
    c620_feedback_data_raw *data = &(_c620_feedback_data_raw_global[device_id]);
 800126a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800126e:	015b      	lsls	r3, r3, #5
 8001270:	4a49      	ldr	r2, [pc, #292]	; (8001398 <Get_C620_FeedbackData+0x158>)
 8001272:	4413      	add	r3, r2
 8001274:	623b      	str	r3, [r7, #32]

    int32_t offset_pos = (int32_t) (data->pos) - (int32_t) (data->_internal_offset_pos);
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	8a1b      	ldrh	r3, [r3, #16]
 800127a:	461a      	mov	r2, r3
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	8a5b      	ldrh	r3, [r3, #18]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	61fb      	str	r3, [r7, #28]
    if (device_info->ctrl_param.use_internal_offset != C620_USE_OFFSET_POS_DISABLE) {
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128a:	2b00      	cmp	r3, #0
 800128c:	d016      	beq.n	80012bc <Get_C620_FeedbackData+0x7c>
        fb_data.position = ((float)offset_pos) / 8192.0f + (float) (data->_rot_num);
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800139c <Get_C620_FeedbackData+0x15c>
 800129c:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff f8e9 	bl	8000480 <__aeabi_l2f>
 80012ae:	ee07 0a90 	vmov	s15, r0
 80012b2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012b6:	edc7 7a04 	vstr	s15, [r7, #16]
 80012ba:	e016      	b.n	80012ea <Get_C620_FeedbackData+0xaa>
    } else {
        fb_data.position = ((float)data->pos) / 8192.0f + (float) (data->_rot_num);
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	8a1b      	ldrh	r3, [r3, #16]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800139c <Get_C620_FeedbackData+0x15c>
 80012cc:	ee87 8a87 	vdiv.f32	s16, s15, s14
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff f8d1 	bl	8000480 <__aeabi_l2f>
 80012de:	ee07 0a90 	vmov	s15, r0
 80012e2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012e6:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    fb_data.velocity = ((float) (data->vel)) / 60.0f;
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f8:	eddf 6a29 	vldr	s13, [pc, #164]	; 80013a0 <Get_C620_FeedbackData+0x160>
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.current = ((float) (data->cur * 20)) / 16384.0f;
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800130a:	461a      	mov	r2, r3
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	ee07 3a90 	vmov	s15, r3
 8001318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800131c:	eddf 6a21 	vldr	s13, [pc, #132]	; 80013a4 <Get_C620_FeedbackData+0x164>
 8001320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001324:	edc7 7a06 	vstr	s15, [r7, #24]
    fb_data.get_flag = (data->_get_counter > 50);
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b32      	cmp	r3, #50	; 0x32
 800132e:	bf8c      	ite	hi
 8001330:	2301      	movhi	r3, #1
 8001332:	2300      	movls	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	737b      	strb	r3, [r7, #13]

    fb_data.velocity *= device_info->ctrl_param.quant_per_rot;
 8001338:	ed97 7a05 	vldr	s14, [r7, #20]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001346:	edc7 7a05 	vstr	s15, [r7, #20]
    fb_data.position *= device_info->ctrl_param.quant_per_rot;
 800134a:	ed97 7a04 	vldr	s14, [r7, #16]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001354:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001358:	edc7 7a04 	vstr	s15, [r7, #16]
    if(device_info->ctrl_param.rotation == C620_ROT_CW){  // TODO: 反転処理(確認)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10b      	bne.n	800137e <Get_C620_FeedbackData+0x13e>
        fb_data.velocity *= -1.0f;
 8001366:	edd7 7a05 	vldr	s15, [r7, #20]
 800136a:	eef1 7a67 	vneg.f32	s15, s15
 800136e:	edc7 7a05 	vstr	s15, [r7, #20]
        fb_data.position *= -1.0f;
 8001372:	edd7 7a04 	vldr	s15, [r7, #16]
 8001376:	eef1 7a67 	vneg.f32	s15, s15
 800137a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    return fb_data;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	461c      	mov	r4, r3
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001388:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	372c      	adds	r7, #44	; 0x2c
 8001390:	46bd      	mov	sp, r7
 8001392:	ecbd 8b02 	vpop	{d8}
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	200044c0 	.word	0x200044c0
 800139c:	46000000 	.word	0x46000000
 80013a0:	42700000 	.word	0x42700000
 80013a4:	46800000 	.word	0x46800000

080013a8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(uint8_t ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80013b2:	1df9      	adds	r1, r7, #7
 80013b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013b8:	2201      	movs	r2, #1
 80013ba:	4804      	ldr	r0, [pc, #16]	; (80013cc <__io_putchar+0x24>)
 80013bc:	f004 f9d4 	bl	8005768 <HAL_UART_Transmit>
    return ch;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200046f0 	.word	0x200046f0

080013d0 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fcd7 	bl	8000d8c <C620_WhenTxMailboxCompleteCallbackCalled>
    WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fa64 	bl	80008ac <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fcdf 	bl	8000db8 <C620_WhenTxMailboxAbortCallbackCalled>
    WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fa5c 	bl	80008b8 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fcbb 	bl	8000d8c <C620_WhenTxMailboxCompleteCallbackCalled>
    WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fa48 	bl	80008ac <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fcc3 	bl	8000db8 <C620_WhenTxMailboxAbortCallbackCalled>
    WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fa40 	bl	80008b8 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxCompleteCallbackCalled(hcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fc9f 	bl	8000d8c <C620_WhenTxMailboxCompleteCallbackCalled>
    WhenTxMailbox0_1_2CompleteCallbackCalled(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fa2c 	bl	80008ac <WhenTxMailbox0_1_2CompleteCallbackCalled>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    C620_WhenTxMailboxAbortCallbackCalled(hcan);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fca7 	bl	8000db8 <C620_WhenTxMailboxAbortCallbackCalled>
    WhenTxMailbox0_1_2AbortCallbackCalled(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fa24 	bl	80008b8 <WhenTxMailbox0_1_2AbortCallbackCalled>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    WhenCANRxFifo0MsgPending(hcan, &num_of_devices);
 8001480:	4903      	ldr	r1, [pc, #12]	; (8001490 <HAL_CAN_RxFifo0MsgPendingCallback+0x18>)
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fa1e 	bl	80008c4 <WhenCANRxFifo0MsgPending>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20004ce0 	.word	0x20004ce0

08001494 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    C620_WhenCANRxFifo1MsgPending(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fdad 	bl	8000ffc <C620_WhenCANRxFifo1MsgPending>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b2:	f000 fe1a 	bl	80020ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b6:	f000 f877 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ba:	f000 f9e7 	bl	800188c <MX_GPIO_Init>
  MX_DMA_Init();
 80014be:	f000 f9c7 	bl	8001850 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80014c2:	f000 f967 	bl	8001794 <MX_USART3_UART_Init>
  MX_ETH_Init();
 80014c6:	f000 f917 	bl	80016f8 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014ca:	f000 f993 	bl	80017f4 <MX_USB_OTG_FS_PCD_Init>
  MX_CAN1_Init();
 80014ce:	f000 f8dd 	bl	800168c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  Init_C620_CAN_System(&hcan1);  // Init CAN System for C620
 80014d2:	482c      	ldr	r0, [pc, #176]	; (8001584 <main+0xd8>)
 80014d4:	f7ff fdc6 	bl	8001064 <Init_C620_CAN_System>
  C620_Init(c620_dev_info_global, num_of_c620);
 80014d8:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <main+0xdc>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	482b      	ldr	r0, [pc, #172]	; (800158c <main+0xe0>)
 80014e0:	f7ff fb76 	bl	8000bd0 <C620_Init>

  c620_dev_info_global[0].device_id = 1;  // 1スタートな事に注意
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <main+0xe0>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
  c620_dev_info_global[0].ctrl_param.accel_limit = C620_ACCEL_LIMIT_ENABLE;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <main+0xe0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  //c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_CALIB;
  c620_dev_info_global[0].ctrl_param.use_internal_offset = C620_USE_OFFSET_POS_INTERNAL;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <main+0xe0>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  c620_dev_info_global[0].ctrl_param.ctrl_type = C620_CTRL_VEL;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <main+0xe0>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  c620_dev_info_global[0].ctrl_param.accel_limit_size = 15.0f;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <main+0xe0>)
 8001504:	4a22      	ldr	r2, [pc, #136]	; (8001590 <main+0xe4>)
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
  c620_dev_info_global[0].ctrl_param.quant_per_rot = 1.0f/19.0f / 3.0f * 3.141592f * 2.0f;  //M3508は19:1
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <main+0xe0>)
 800150a:	4a22      	ldr	r2, [pc, #136]	; (8001594 <main+0xe8>)
 800150c:	63da      	str	r2, [r3, #60]	; 0x3c
  c620_dev_info_global[0].ctrl_param.rotation = C620_ROT_ACW;  // 半時計周り
 800150e:	4b1f      	ldr	r3, [pc, #124]	; (800158c <main+0xe0>)
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

  c620_dev_info_global[0].ctrl_param.pid_vel.kp = 4.5f;  // 位置制御の場合はpid_velに速度制御用のgainを設定する
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <main+0xe0>)
 8001518:	4a1f      	ldr	r2, [pc, #124]	; (8001598 <main+0xec>)
 800151a:	61da      	str	r2, [r3, #28]
  c620_dev_info_global[0].ctrl_param.pid_vel.ki = 0.0f;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <main+0xe0>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	621a      	str	r2, [r3, #32]
  c620_dev_info_global[0].ctrl_param.pid_vel.kd = 0.0f;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <main+0xe0>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  c620_dev_info_global[0].ctrl_param.pid_vel.kff = 0.0f;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <main+0xe0>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28

  c620_dev_info_global[0].ctrl_param.pid.kp = 12.3f;  // 位置制御用
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <main+0xe0>)
 8001536:	4a19      	ldr	r2, [pc, #100]	; (800159c <main+0xf0>)
 8001538:	605a      	str	r2, [r3, #4]
  c620_dev_info_global[0].ctrl_param.pid.ki = 0.16f;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <main+0xe0>)
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <main+0xf4>)
 800153e:	609a      	str	r2, [r3, #8]
  c620_dev_info_global[0].ctrl_param.pid.kd = 0.0f;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <main+0xe0>)
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  c620_dev_info_global[0].ctrl_param.pid.kff = 0.0f;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <main+0xe0>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	611a      	str	r2, [r3, #16]

  //C620_Calibration(&c620_dev_info_global[0], -2.0f, C620_SWITCH_NO, GPIOG, GPIO_PIN_1, &hcan1);  // calibration
  C620_SetTarget(&c620_dev_info_global[0], 10.0f);  // 目標値を設定
 8001550:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <main+0xe0>)
 8001556:	f7ff fb93 	bl	8000c80 <C620_SetTarget>
  C620_WaitForConnect(c620_dev_info_global, num_of_c620);  // C620の接続待ち
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <main+0xdc>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4619      	mov	r1, r3
 8001560:	480a      	ldr	r0, [pc, #40]	; (800158c <main+0xe0>)
 8001562:	f7ff fb55 	bl	8000c10 <C620_WaitForConnect>
  C620_ControlEnable(&c620_dev_info_global[0]);
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <main+0xe0>)
 8001568:	f7ff fb99 	bl	8000c9e <C620_ControlEnable>
  for(;;){
	  C620_fb=Get_C620_FeedbackData(&(c620_dev_info_global[0]));
 800156c:	4c0d      	ldr	r4, [pc, #52]	; (80015a4 <main+0xf8>)
 800156e:	463b      	mov	r3, r7
 8001570:	4906      	ldr	r1, [pc, #24]	; (800158c <main+0xe0>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fe64 	bl	8001240 <Get_C620_FeedbackData>
 8001578:	463b      	mov	r3, r7
 800157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001580:	e7f4      	b.n	800156c <main+0xc0>
 8001582:	bf00      	nop
 8001584:	20004618 	.word	0x20004618
 8001588:	20000000 	.word	0x20000000
 800158c:	20004ce8 	.word	0x20004ce8
 8001590:	41700000 	.word	0x41700000
 8001594:	3de1c0f3 	.word	0x3de1c0f3
 8001598:	40900000 	.word	0x40900000
 800159c:	4144cccd 	.word	0x4144cccd
 80015a0:	3e23d70a 	.word	0x3e23d70a
 80015a4:	20004d34 	.word	0x20004d34

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	2234      	movs	r2, #52	; 0x34
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 fe26 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015cc:	f002 ff22 	bl	8004414 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <SystemClock_Config+0xdc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <SystemClock_Config+0xdc>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <SystemClock_Config+0xdc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <SystemClock_Config+0xe0>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f0:	4a25      	ldr	r2, [pc, #148]	; (8001688 <SystemClock_Config+0xe0>)
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <SystemClock_Config+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001604:	2301      	movs	r3, #1
 8001606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800160c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001618:	2304      	movs	r3, #4
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800161c:	2360      	movs	r3, #96	; 0x60
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001620:	2302      	movs	r3, #2
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001624:	2304      	movs	r3, #4
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001628:	2302      	movs	r3, #2
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4618      	mov	r0, r3
 8001632:	f002 ff4f 	bl	80044d4 <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800163c:	f000 f9c8 	bl	80019d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001640:	f002 fef8 	bl	8004434 <HAL_PWREx_EnableOverDrive>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800164a:	f000 f9c1 	bl	80019d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164e:	230f      	movs	r3, #15
 8001650:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001652:	2302      	movs	r3, #2
 8001654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	2103      	movs	r1, #3
 800166a:	4618      	mov	r0, r3
 800166c:	f003 f9e0 	bl	8004a30 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001676:	f000 f9ab 	bl	80019d0 <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3750      	adds	r7, #80	; 0x50
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_CAN1_Init+0x64>)
 8001692:	4a18      	ldr	r2, [pc, #96]	; (80016f4 <MX_CAN1_Init+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <MX_CAN1_Init+0x64>)
 8001698:	2206      	movs	r2, #6
 800169a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_CAN1_Init+0x64>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016aa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80016ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016be:	2200      	movs	r2, #0
 80016c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_CAN1_Init+0x64>)
 80016dc:	f000 fd86 	bl	80021ec <HAL_CAN_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80016e6:	f000 f973 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20004618 	.word	0x20004618
 80016f4:	40006400 	.word	0x40006400

080016f8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <MX_ETH_Init+0x84>)
 80016fe:	4a20      	ldr	r2, [pc, #128]	; (8001780 <MX_ETH_Init+0x88>)
 8001700:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_ETH_Init+0x8c>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_ETH_Init+0x8c>)
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_ETH_Init+0x8c>)
 8001710:	22e1      	movs	r2, #225	; 0xe1
 8001712:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_ETH_Init+0x8c>)
 8001716:	2200      	movs	r2, #0
 8001718:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_ETH_Init+0x8c>)
 800171c:	2200      	movs	r2, #0
 800171e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_ETH_Init+0x8c>)
 8001722:	2200      	movs	r2, #0
 8001724:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <MX_ETH_Init+0x84>)
 8001728:	4a16      	ldr	r2, [pc, #88]	; (8001784 <MX_ETH_Init+0x8c>)
 800172a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_ETH_Init+0x84>)
 800172e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001732:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_ETH_Init+0x84>)
 8001736:	4a14      	ldr	r2, [pc, #80]	; (8001788 <MX_ETH_Init+0x90>)
 8001738:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <MX_ETH_Init+0x84>)
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <MX_ETH_Init+0x94>)
 800173e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_ETH_Init+0x84>)
 8001742:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001746:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <MX_ETH_Init+0x84>)
 800174a:	f002 f82f 	bl	80037ac <HAL_ETH_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001754:	f000 f93c 	bl	80019d0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001758:	2238      	movs	r2, #56	; 0x38
 800175a:	2100      	movs	r1, #0
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <MX_ETH_Init+0x98>)
 800175e:	f005 fd53 	bl	8007208 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_ETH_Init+0x98>)
 8001764:	2221      	movs	r2, #33	; 0x21
 8001766:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_ETH_Init+0x98>)
 800176a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800176e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <MX_ETH_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20004640 	.word	0x20004640
 8001780:	40028000 	.word	0x40028000
 8001784:	20004d44 	.word	0x20004d44
 8001788:	2000010c 	.word	0x2000010c
 800178c:	2000006c 	.word	0x2000006c
 8001790:	200045e0 	.word	0x200045e0

08001794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART3_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <MX_USART3_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART3_UART_Init+0x58>)
 80017d8:	f003 ff78 	bl	80056cc <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 f8f5 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200046f0 	.word	0x200046f0
 80017f0:	40004800 	.word	0x40004800

080017f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001802:	2206      	movs	r2, #6
 8001804:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001808:	2202      	movs	r2, #2
 800180a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001814:	2202      	movs	r2, #2
 8001816:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181a:	2201      	movs	r2, #1
 800181c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182c:	2201      	movs	r2, #1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001838:	f002 fca3 	bl	8004182 <HAL_PCD_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 f8c5 	bl	80019d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200047d8 	.word	0x200047d8

08001850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_DMA_Init+0x38>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <MX_DMA_Init+0x38>)
 800185c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_DMA_Init+0x38>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200e      	movs	r0, #14
 8001874:	f001 fbe7 	bl	8003046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001878:	200e      	movs	r0, #14
 800187a:	f001 fc00 	bl	800307e <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	605a      	str	r2, [r3, #4]
 800189c:	609a      	str	r2, [r3, #8]
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a46      	ldr	r2, [pc, #280]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a3a      	ldr	r2, [pc, #232]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <MX_GPIO_Init+0x134>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800191a:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <MX_GPIO_Init+0x134>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <MX_GPIO_Init+0x134>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f244 0181 	movw	r1, #16513	; 0x4081
 8001938:	4822      	ldr	r0, [pc, #136]	; (80019c4 <MX_GPIO_Init+0x138>)
 800193a:	f002 fc09 	bl	8004150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	4821      	ldr	r0, [pc, #132]	; (80019c8 <MX_GPIO_Init+0x13c>)
 8001944:	f002 fc04 	bl	8004150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <MX_GPIO_Init+0x140>)
 8001960:	f002 fa4a 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001964:	f244 0381 	movw	r3, #16513	; 0x4081
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4811      	ldr	r0, [pc, #68]	; (80019c4 <MX_GPIO_Init+0x138>)
 800197e:	f002 fa3b 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001982:	2340      	movs	r3, #64	; 0x40
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <MX_GPIO_Init+0x13c>)
 800199a:	f002 fa2d 	bl	8003df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 031c 	add.w	r3, r7, #28
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_GPIO_Init+0x13c>)
 80019b2:	f002 fa21 	bl	8003df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40021800 	.word	0x40021800
 80019cc:	40020800 	.word	0x40020800

080019d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d4:	b672      	cpsid	i
}
 80019d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <Error_Handler+0x8>
	...

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_MspInit+0x44>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <HAL_MspInit+0x44>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_MspInit+0x44>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x44>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x44>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x44>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a23      	ldr	r2, [pc, #140]	; (8001ad0 <HAL_CAN_MspInit+0xac>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d13f      	bne.n	8001ac6 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_CAN_MspInit+0xb0>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_CAN_MspInit+0xb0>)
 8001a4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_CAN_MspInit+0xb0>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_CAN_MspInit+0xb0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_CAN_MspInit+0xb0>)
 8001a64:	f043 0308 	orr.w	r3, r3, #8
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_CAN_MspInit+0xb0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a76:	2303      	movs	r3, #3
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a86:	2309      	movs	r3, #9
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <HAL_CAN_MspInit+0xb4>)
 8001a92:	f002 f9b1 	bl	8003df8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2013      	movs	r0, #19
 8001a9c:	f001 fad3 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001aa0:	2013      	movs	r0, #19
 8001aa2:	f001 faec 	bl	800307e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f001 facb 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ab0:	2014      	movs	r0, #20
 8001ab2:	f001 fae4 	bl	800307e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2015      	movs	r0, #21
 8001abc:	f001 fac3 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001ac0:	2015      	movs	r0, #21
 8001ac2:	f001 fadc 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ac6:	bf00      	nop
 8001ac8:	3728      	adds	r7, #40	; 0x28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40006400 	.word	0x40006400
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020c00 	.word	0x40020c00

08001adc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08e      	sub	sp, #56	; 0x38
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	; (8001c34 <HAL_ETH_MspInit+0x158>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	f040 8096 	bne.w	8001c2c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b22:	6313      	str	r3, [r2, #48]	; 0x30
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	4a40      	ldr	r2, [pc, #256]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3c:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b44:	61bb      	str	r3, [r7, #24]
 8001b46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b48:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a3a      	ldr	r2, [pc, #232]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b2c      	ldr	r3, [pc, #176]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b90:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	4a28      	ldr	r2, [pc, #160]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_ETH_MspInit+0x15c>)
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ba8:	2332      	movs	r3, #50	; 0x32
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bb8:	230b      	movs	r3, #11
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481e      	ldr	r0, [pc, #120]	; (8001c3c <HAL_ETH_MspInit+0x160>)
 8001bc4:	f002 f918 	bl	8003df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001bc8:	2386      	movs	r3, #134	; 0x86
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd8:	230b      	movs	r3, #11
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4817      	ldr	r0, [pc, #92]	; (8001c40 <HAL_ETH_MspInit+0x164>)
 8001be4:	f002 f908 	bl	8003df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bfa:	230b      	movs	r3, #11
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c02:	4619      	mov	r1, r3
 8001c04:	480f      	ldr	r0, [pc, #60]	; (8001c44 <HAL_ETH_MspInit+0x168>)
 8001c06:	f002 f8f7 	bl	8003df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001c0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c1c:	230b      	movs	r3, #11
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4808      	ldr	r0, [pc, #32]	; (8001c48 <HAL_ETH_MspInit+0x16c>)
 8001c28:	f002 f8e6 	bl	8003df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3738      	adds	r7, #56	; 0x38
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40028000 	.word	0x40028000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020800 	.word	0x40020800
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40021800 	.word	0x40021800

08001c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0ae      	sub	sp, #184	; 0xb8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2290      	movs	r2, #144	; 0x90
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 facb 	bl	8007208 <memset>
  if(huart->Instance==USART3)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_UART_MspInit+0x120>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d172      	bne.n	8001d62 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f8f6 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c96:	f7ff fe9b 	bl	80019d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c9a:	4b35      	ldr	r3, [pc, #212]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <HAL_UART_MspInit+0x124>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4820      	ldr	r0, [pc, #128]	; (8001d74 <HAL_UART_MspInit+0x128>)
 8001cf2:	f002 f881 	bl	8003df8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <HAL_UART_MspInit+0x130>)
 8001cfa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d36:	4810      	ldr	r0, [pc, #64]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d38:	f001 f9bc 	bl	80030b4 <HAL_DMA_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001d42:	f7ff fe45 	bl	80019d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d4a:	671a      	str	r2, [r3, #112]	; 0x70
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_UART_MspInit+0x12c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2027      	movs	r0, #39	; 0x27
 8001d58:	f001 f975 	bl	8003046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d5c:	2027      	movs	r0, #39	; 0x27
 8001d5e:	f001 f98e 	bl	800307e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	37b8      	adds	r7, #184	; 0xb8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40004800 	.word	0x40004800
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	20004778 	.word	0x20004778
 8001d7c:	40026058 	.word	0x40026058

08001d80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0ae      	sub	sp, #184	; 0xb8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2290      	movs	r2, #144	; 0x90
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 fa31 	bl	8007208 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dae:	d159      	bne.n	8001e64 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001db0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001db4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 f85b 	bl	8004e7c <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001dcc:	f7ff fe00 	bl	80019d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001de8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e02:	230a      	movs	r3, #10
 8001e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4818      	ldr	r0, [pc, #96]	; (8001e70 <HAL_PCD_MspInit+0xf0>)
 8001e10:	f001 fff2 	bl	8003df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4810      	ldr	r0, [pc, #64]	; (8001e70 <HAL_PCD_MspInit+0xf0>)
 8001e30:	f001 ffe2 	bl	8003df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e3e:	6353      	str	r3, [r2, #52]	; 0x34
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e56:	6453      	str	r3, [r2, #68]	; 0x44
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <HAL_PCD_MspInit+0xec>)
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	37b8      	adds	r7, #184	; 0xb8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020000 	.word	0x40020000

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <NMI_Handler+0x4>

08001e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <HardFault_Handler+0x4>

08001e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <MemManage_Handler+0x4>

08001e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <BusFault_Handler+0x4>

08001e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <UsageFault_Handler+0x4>

08001e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec0:	f000 f950 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <DMA1_Stream3_IRQHandler+0x10>)
 8001ece:	f001 fa31 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20004778 	.word	0x20004778

08001edc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <CAN1_TX_IRQHandler+0x10>)
 8001ee2:	f000 fdec 	bl	8002abe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20004618 	.word	0x20004618

08001ef0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <CAN1_RX0_IRQHandler+0x10>)
 8001ef6:	f000 fde2 	bl	8002abe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20004618 	.word	0x20004618

08001f04 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <CAN1_RX1_IRQHandler+0x10>)
 8001f0a:	f000 fdd8 	bl	8002abe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20004618 	.word	0x20004618

08001f18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART3_IRQHandler+0x10>)
 8001f1e:	f003 fca7 	bl	8005870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200046f0 	.word	0x200046f0

08001f2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	e00a      	b.n	8001f54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f3e:	f3af 8000 	nop.w
 8001f42:	4601      	mov	r1, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	b2ca      	uxtb	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	3301      	adds	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf0      	blt.n	8001f3e <_read+0x12>
  }

  return len;
 8001f5c:	687b      	ldr	r3, [r7, #4]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e009      	b.n	8001f8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	60ba      	str	r2, [r7, #8]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fa11 	bl	80013a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	dbf1      	blt.n	8001f78 <_write+0x12>
  }
  return len;
 8001f94:	687b      	ldr	r3, [r7, #4]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <_close>:

int _close(int file)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fc6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_isatty>:

int _isatty(int file)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <_sbrk+0x5c>)
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <_sbrk+0x60>)
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <_sbrk+0x64>)
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <_sbrk+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <_sbrk+0x64>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	429a      	cmp	r2, r3
 8002036:	d207      	bcs.n	8002048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002038:	f005 f934 	bl	80072a4 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	220c      	movs	r2, #12
 8002040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e009      	b.n	800205c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <_sbrk+0x64>)
 8002058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20080000 	.word	0x20080000
 8002068:	00000400 	.word	0x00000400
 800206c:	20004d4c 	.word	0x20004d4c
 8002070:	20004ea0 	.word	0x20004ea0

08002074 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800209c:	480d      	ldr	r0, [pc, #52]	; (80020d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800209e:	490e      	ldr	r1, [pc, #56]	; (80020d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020b4:	4c0b      	ldr	r4, [pc, #44]	; (80020e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c2:	f7ff ffd7 	bl	8002074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020c6:	f005 f8f3 	bl	80072b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ca:	f7ff f9ef 	bl	80014ac <main>
  bx  lr    
 80020ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80020dc:	08007f60 	.word	0x08007f60
  ldr r2, =_sbss
 80020e0:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80020e4:	20004ea0 	.word	0x20004ea0

080020e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>

080020ea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ee:	2003      	movs	r0, #3
 80020f0:	f000 ff9e 	bl	8003030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 f805 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fa:	f7ff fc6f 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 ffb9 	bl	800309a <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 ff81 	bl	8003046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000004 	.word	0x20000004
 800215c:	2000000c 	.word	0x2000000c
 8002160:	20000008 	.word	0x20000008

08002164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_IncTick+0x20>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x24>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	; (8002188 <HAL_IncTick+0x24>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2000000c 	.word	0x2000000c
 8002188:	20004d50 	.word	0x20004d50

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <HAL_GetTick+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20004d50 	.word	0x20004d50

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff ffee 	bl	800218c <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_Delay+0x44>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffde 	bl	800218c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000000c 	.word	0x2000000c

080021ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0ed      	b.n	80023da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fc0a 	bl	8001a24 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002220:	f7ff ffb4 	bl	800218c <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002226:	e012      	b.n	800224e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002228:	f7ff ffb0 	bl	800218c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b0a      	cmp	r3, #10
 8002234:	d90b      	bls.n	800224e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0c5      	b.n	80023da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0e5      	beq.n	8002228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0202 	bic.w	r2, r2, #2
 800226a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800226c:	f7ff ff8e 	bl	800218c <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002272:	e012      	b.n	800229a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002274:	f7ff ff8a 	bl	800218c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b0a      	cmp	r3, #10
 8002280:	d90b      	bls.n	800229a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2205      	movs	r2, #5
 8002292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09f      	b.n	80023da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1e5      	bne.n	8002274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e1b      	ldrb	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e007      	b.n	80022d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7e5b      	ldrb	r3, [r3, #25]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e007      	b.n	80022fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e9b      	ldrb	r3, [r3, #26]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e007      	b.n	8002326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0220 	bic.w	r2, r2, #32
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7edb      	ldrb	r3, [r3, #27]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0210 	bic.w	r2, r2, #16
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e007      	b.n	8002350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0210 	orr.w	r2, r2, #16
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7f1b      	ldrb	r3, [r3, #28]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d108      	bne.n	800236a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e007      	b.n	800237a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7f5b      	ldrb	r3, [r3, #29]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0204 	orr.w	r2, r2, #4
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	ea42 0103 	orr.w	r1, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d003      	beq.n	800240a <HAL_CAN_ConfigFilter+0x26>
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b02      	cmp	r3, #2
 8002406:	f040 80c7 	bne.w	8002598 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d001      	beq.n	8002418 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002416:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4a63      	ldr	r2, [pc, #396]	; (80025b8 <HAL_CAN_ConfigFilter+0x1d4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d111      	bne.n	8002454 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002436:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	431a      	orrs	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2201      	movs	r2, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d123      	bne.n	80024c6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3248      	adds	r2, #72	; 0x48
 80024a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024bc:	6979      	ldr	r1, [r7, #20]
 80024be:	3348      	adds	r3, #72	; 0x48
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d122      	bne.n	8002514 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3248      	adds	r2, #72	; 0x48
 80024f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002508:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800250a:	6979      	ldr	r1, [r7, #20]
 800250c:	3348      	adds	r3, #72	; 0x48
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800252e:	e007      	b.n	8002540 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800255a:	e007      	b.n	800256c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	431a      	orrs	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800258a:	f023 0201 	bic.w	r2, r3, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e006      	b.n	80025a6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40003400 	.word	0x40003400
 80025b8:	40006400 	.word	0x40006400

080025bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d12e      	bne.n	800262e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025e8:	f7ff fdd0 	bl	800218c <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025ee:	e012      	b.n	8002616 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f0:	f7ff fdcc 	bl	800218c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d90b      	bls.n	8002616 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e012      	b.n	800263c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e5      	bne.n	80025f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e006      	b.n	800263c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d003      	beq.n	8002670 <HAL_CAN_AddTxMessage+0x2c>
 8002668:	7ffb      	ldrb	r3, [r7, #31]
 800266a:	2b02      	cmp	r3, #2
 800266c:	f040 80ad 	bne.w	80027ca <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8095 	beq.w	80027ba <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	0e1b      	lsrs	r3, r3, #24
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800269a:	2201      	movs	r2, #1
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026b6:	68f9      	ldr	r1, [r7, #12]
 80026b8:	6809      	ldr	r1, [r1, #0]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3318      	adds	r3, #24
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	440b      	add	r3, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e00f      	b.n	80026e8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026d2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026d8:	68f9      	ldr	r1, [r7, #12]
 80026da:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026dc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	3318      	adds	r3, #24
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	440b      	add	r3, r1
 80026e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6819      	ldr	r1, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3318      	adds	r3, #24
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	440b      	add	r3, r1
 80026f8:	3304      	adds	r3, #4
 80026fa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	7d1b      	ldrb	r3, [r3, #20]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d111      	bne.n	8002728 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3318      	adds	r3, #24
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	3304      	adds	r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6811      	ldr	r1, [r2, #0]
 8002718:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3318      	adds	r3, #24
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	440b      	add	r3, r1
 8002724:	3304      	adds	r3, #4
 8002726:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3307      	adds	r3, #7
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	061a      	lsls	r2, r3, #24
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3306      	adds	r3, #6
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3305      	adds	r3, #5
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	021b      	lsls	r3, r3, #8
 8002742:	4313      	orrs	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	3204      	adds	r2, #4
 8002748:	7812      	ldrb	r2, [r2, #0]
 800274a:	4610      	mov	r0, r2
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	6811      	ldr	r1, [r2, #0]
 8002750:	ea43 0200 	orr.w	r2, r3, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	440b      	add	r3, r1
 800275a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800275e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3303      	adds	r3, #3
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	061a      	lsls	r2, r3, #24
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3302      	adds	r3, #2
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3301      	adds	r3, #1
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	4313      	orrs	r3, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	4610      	mov	r0, r2
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	6811      	ldr	r1, [r2, #0]
 8002786:	ea43 0200 	orr.w	r2, r3, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	440b      	add	r3, r1
 8002790:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002794:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3318      	adds	r3, #24
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3318      	adds	r3, #24
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	440b      	add	r3, r1
 80027b4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e00e      	b.n	80027d8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e006      	b.n	80027d8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
  }
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3724      	adds	r7, #36	; 0x24
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80027f8:	7afb      	ldrb	r3, [r7, #11]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d002      	beq.n	8002804 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d11d      	bne.n	8002840 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3301      	adds	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3301      	adds	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002840:	68fb      	ldr	r3, [r7, #12]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800284e:	b480      	push	{r7}
 8002850:	b087      	sub	sp, #28
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	607a      	str	r2, [r7, #4]
 800285a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002862:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d003      	beq.n	8002872 <HAL_CAN_GetRxMessage+0x24>
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b02      	cmp	r3, #2
 800286e:	f040 80f3 	bne.w	8002a58 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10e      	bne.n	8002896 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d116      	bne.n	80028b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e0e7      	b.n	8002a66 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d107      	bne.n	80028b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0d8      	b.n	8002a66 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	331b      	adds	r3, #27
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	4413      	add	r3, r2
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0204 	and.w	r2, r3, #4
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	331b      	adds	r3, #27
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0d5b      	lsrs	r3, r3, #21
 80028e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	331b      	adds	r3, #27
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	4413      	add	r3, r2
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	08db      	lsrs	r3, r3, #3
 80028fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	331b      	adds	r3, #27
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0202 	and.w	r2, r3, #2
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	331b      	adds	r3, #27
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	3304      	adds	r3, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	331b      	adds	r3, #27
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0a1b      	lsrs	r3, r3, #8
 8002944:	b2da      	uxtb	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	331b      	adds	r3, #27
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	4413      	add	r3, r2
 8002956:	3304      	adds	r3, #4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	4413      	add	r3, r2
 800296c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0a1a      	lsrs	r2, r3, #8
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0c1a      	lsrs	r2, r3, #16
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	3302      	adds	r3, #2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e1a      	lsrs	r2, r3, #24
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	3303      	adds	r3, #3
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3304      	adds	r3, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0a1a      	lsrs	r2, r3, #8
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3305      	adds	r3, #5
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0c1a      	lsrs	r2, r3, #16
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	3306      	adds	r3, #6
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0e1a      	lsrs	r2, r3, #24
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	3307      	adds	r3, #7
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0220 	orr.w	r2, r2, #32
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	e007      	b.n	8002a54 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0220 	orr.w	r2, r2, #32
 8002a52:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e006      	b.n	8002a66 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
  }
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a82:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d002      	beq.n	8002a90 <HAL_CAN_ActivateNotification+0x1e>
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d109      	bne.n	8002aa4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6959      	ldr	r1, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e006      	b.n	8002ab2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b08a      	sub	sp, #40	; 0x28
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d07c      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d023      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2201      	movs	r2, #1
 8002b14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe fc55 	bl	80013d0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b26:	e016      	b.n	8002b56 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e00c      	b.n	8002b56 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	e002      	b.n	8002b56 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fe fc4b 	bl	80013ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d024      	beq.n	8002baa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fe fc47 	bl	8001408 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b7a:	e016      	b.n	8002baa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e00c      	b.n	8002baa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	e002      	b.n	8002baa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7fe fc3d 	bl	8001424 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d024      	beq.n	8002bfe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002bbc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fe fc39 	bl	8001440 <HAL_CAN_TxMailbox2CompleteCallback>
 8002bce:	e016      	b.n	8002bfe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d004      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	e00c      	b.n	8002bfe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e002      	b.n	8002bfe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fe fc2f 	bl	800145c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00c      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2210      	movs	r2, #16
 8002c20:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f8f4 	bl	8002e2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7fe fc0b 	bl	8001478 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00c      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2210      	movs	r2, #16
 8002c84:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8cc 	bl	8002e40 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe fbe7 	bl	8001494 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d006      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8b6 	bl	8002e54 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8af 	bl	8002e68 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d07b      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d072      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	f043 0302 	orr.w	r3, r3, #2
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d043      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d03e      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8c:	2b60      	cmp	r3, #96	; 0x60
 8002d8e:	d02b      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x32a>
 8002d90:	2b60      	cmp	r3, #96	; 0x60
 8002d92:	d82e      	bhi.n	8002df2 <HAL_CAN_IRQHandler+0x334>
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d022      	beq.n	8002dde <HAL_CAN_IRQHandler+0x320>
 8002d98:	2b50      	cmp	r3, #80	; 0x50
 8002d9a:	d82a      	bhi.n	8002df2 <HAL_CAN_IRQHandler+0x334>
 8002d9c:	2b40      	cmp	r3, #64	; 0x40
 8002d9e:	d019      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x316>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d826      	bhi.n	8002df2 <HAL_CAN_IRQHandler+0x334>
 8002da4:	2b30      	cmp	r3, #48	; 0x30
 8002da6:	d010      	beq.n	8002dca <HAL_CAN_IRQHandler+0x30c>
 8002da8:	2b30      	cmp	r3, #48	; 0x30
 8002daa:	d822      	bhi.n	8002df2 <HAL_CAN_IRQHandler+0x334>
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d002      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x2f8>
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d005      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002db4:	e01d      	b.n	8002df2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dbe:	e019      	b.n	8002df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f043 0310 	orr.w	r3, r3, #16
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc8:	e014      	b.n	8002df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f043 0320 	orr.w	r3, r3, #32
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd2:	e00f      	b.n	8002df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ddc:	e00a      	b.n	8002df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002de6:	e005      	b.n	8002df4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002df0:	e000      	b.n	8002df4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002df2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e02:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2204      	movs	r2, #4
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f82c 	bl	8002e7c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e24:	bf00      	nop
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eac:	4013      	ands	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00
 8002ed4:	05fa0000 	.word	0x05fa0000

08002ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 0307 	and.w	r3, r3, #7
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	db0b      	blt.n	8002f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	f003 021f 	and.w	r2, r3, #31
 8002f0c:	4907      	ldr	r1, [pc, #28]	; (8002f2c <__NVIC_EnableIRQ+0x38>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2001      	movs	r0, #1
 8002f16:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000e100 	.word	0xe000e100

08002f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	6039      	str	r1, [r7, #0]
 8002f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	db0a      	blt.n	8002f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	490c      	ldr	r1, [pc, #48]	; (8002f7c <__NVIC_SetPriority+0x4c>)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	440b      	add	r3, r1
 8002f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f58:	e00a      	b.n	8002f70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <__NVIC_SetPriority+0x50>)
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b04      	subs	r3, #4
 8002f68:	0112      	lsls	r2, r2, #4
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	761a      	strb	r2, [r3, #24]
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000e100 	.word	0xe000e100
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f1c3 0307 	rsb	r3, r3, #7
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	bf28      	it	cs
 8002fa2:	2304      	movcs	r3, #4
 8002fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2b06      	cmp	r3, #6
 8002fac:	d902      	bls.n	8002fb4 <NVIC_EncodePriority+0x30>
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	3b03      	subs	r3, #3
 8002fb2:	e000      	b.n	8002fb6 <NVIC_EncodePriority+0x32>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43da      	mvns	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	4313      	orrs	r3, r2
         );
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffc:	d301      	bcc.n	8003002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00f      	b.n	8003022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <SysTick_Config+0x40>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3b01      	subs	r3, #1
 8003008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800300a:	210f      	movs	r1, #15
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f7ff ff8e 	bl	8002f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <SysTick_Config+0x40>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <SysTick_Config+0x40>)
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000e010 	.word	0xe000e010

08003030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff29 	bl	8002e90 <__NVIC_SetPriorityGrouping>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003046:	b580      	push	{r7, lr}
 8003048:	b086      	sub	sp, #24
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003058:	f7ff ff3e 	bl	8002ed8 <__NVIC_GetPriorityGrouping>
 800305c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff8e 	bl	8002f84 <NVIC_EncodePriority>
 8003068:	4602      	mov	r2, r0
 800306a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306e:	4611      	mov	r1, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ff5d 	bl	8002f30 <__NVIC_SetPriority>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff31 	bl	8002ef4 <__NVIC_EnableIRQ>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff ffa2 	bl	8002fec <SysTick_Config>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030c0:	f7ff f864 	bl	800218c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e099      	b.n	8003204 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030f0:	e00f      	b.n	8003112 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030f2:	f7ff f84b 	bl	800218c <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d908      	bls.n	8003112 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2203      	movs	r2, #3
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e078      	b.n	8003204 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e8      	bne.n	80030f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_DMA_Init+0x158>)
 800312c:	4013      	ands	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4313      	orrs	r3, r2
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0307 	bic.w	r3, r3, #7
 8003192:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d117      	bne.n	80031d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00e      	beq.n	80031d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fa7b 	bl	80036b4 <DMA_CheckFifoParam>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031d2:	2301      	movs	r3, #1
 80031d4:	e016      	b.n	8003204 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa32 	bl	8003648 <DMA_CalcBaseAndBitshift>
 80031e4:	4603      	mov	r3, r0
 80031e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	223f      	movs	r2, #63	; 0x3f
 80031ee:	409a      	lsls	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	e010803f 	.word	0xe010803f

08003210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7fe ffb5 	bl	800218c <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e052      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_Abort+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003292:	e013      	b.n	80032bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003294:	f7fe ff7a 	bl	800218c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d90c      	bls.n	80032bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e015      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	223f      	movs	r2, #63	; 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00c      	b.n	8003328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003340:	4b8e      	ldr	r3, [pc, #568]	; (800357c <HAL_DMA_IRQHandler+0x248>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8e      	ldr	r2, [pc, #568]	; (8003580 <HAL_DMA_IRQHandler+0x24c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2208      	movs	r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d043      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	2210      	movs	r2, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e01f      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e016      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0208 	bic.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2220      	movs	r2, #32
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808f 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8087 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	2220      	movs	r2, #32
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d136      	bne.n	800354c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_IRQHandler+0x1da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	223f      	movs	r2, #63	; 0x3f
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07e      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
        }
        return;
 800354a:	e079      	b.n	8003640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e02c      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
 800357a:	bf00      	nop
 800357c:	20000004 	.word	0x20000004
 8003580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e01e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0210 	bic.w	r2, r2, #16
 80035b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d032      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d307      	bcc.n	800361c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_DMA_IRQHandler+0x2cc>
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800361c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003640:	bf00      	nop
    }
  }
}
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3b10      	subs	r3, #16
 8003658:	4a13      	ldr	r2, [pc, #76]	; (80036a8 <DMA_CalcBaseAndBitshift+0x60>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	091b      	lsrs	r3, r3, #4
 8003660:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <DMA_CalcBaseAndBitshift+0x64>)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d908      	bls.n	8003688 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <DMA_CalcBaseAndBitshift+0x68>)
 800367e:	4013      	ands	r3, r2
 8003680:	1d1a      	adds	r2, r3, #4
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	659a      	str	r2, [r3, #88]	; 0x58
 8003686:	e006      	b.n	8003696 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003690:	4013      	ands	r3, r2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	aaaaaaab 	.word	0xaaaaaaab
 80036ac:	08007f14 	.word	0x08007f14
 80036b0:	fffffc00 	.word	0xfffffc00

080036b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11f      	bne.n	800370e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d856      	bhi.n	8003782 <DMA_CheckFifoParam+0xce>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <DMA_CheckFifoParam+0x28>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	080036ed 	.word	0x080036ed
 80036e0:	080036ff 	.word	0x080036ff
 80036e4:	080036ed 	.word	0x080036ed
 80036e8:	08003783 	.word	0x08003783
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d046      	beq.n	8003786 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fc:	e043      	b.n	8003786 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003706:	d140      	bne.n	800378a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370c:	e03d      	b.n	800378a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	d121      	bne.n	800375c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b03      	cmp	r3, #3
 800371c:	d837      	bhi.n	800378e <DMA_CheckFifoParam+0xda>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <DMA_CheckFifoParam+0x70>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	08003735 	.word	0x08003735
 8003728:	0800373b 	.word	0x0800373b
 800372c:	08003735 	.word	0x08003735
 8003730:	0800374d 	.word	0x0800374d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      break;
 8003738:	e030      	b.n	800379c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d025      	beq.n	8003792 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374a:	e022      	b.n	8003792 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003754:	d11f      	bne.n	8003796 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800375a:	e01c      	b.n	8003796 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d903      	bls.n	800376a <DMA_CheckFifoParam+0xb6>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d003      	beq.n	8003770 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003768:	e018      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      break;
 800376e:	e015      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e00b      	b.n	800379a <DMA_CheckFifoParam+0xe6>
      break;
 8003782:	bf00      	nop
 8003784:	e00a      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      break;
 8003786:	bf00      	nop
 8003788:	e008      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      break;
 800378a:	bf00      	nop
 800378c:	e006      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      break;
 800378e:	bf00      	nop
 8003790:	e004      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      break;
 8003792:	bf00      	nop
 8003794:	e002      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      break;   
 8003796:	bf00      	nop
 8003798:	e000      	b.n	800379c <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
    }
  } 
  
  return status; 
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06a      	b.n	8003894 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d106      	bne.n	80037d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2223      	movs	r2, #35	; 0x23
 80037cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fe f983 	bl	8001adc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_ETH_Init+0xf0>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a30      	ldr	r2, [pc, #192]	; (800389c <HAL_ETH_Init+0xf0>)
 80037dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b2e      	ldr	r3, [pc, #184]	; (800389c <HAL_ETH_Init+0xf0>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80037ee:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <HAL_ETH_Init+0xf4>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <HAL_ETH_Init+0xf4>)
 80037f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80037fa:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_ETH_Init+0xf4>)
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4927      	ldr	r1, [pc, #156]	; (80038a0 <HAL_ETH_Init+0xf4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003808:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <HAL_ETH_Init+0xf4>)
 800380a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003822:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003824:	f7fe fcb2 	bl	800218c <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800382a:	e011      	b.n	8003850 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800382c:	f7fe fcae 	bl	800218c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800383a:	d909      	bls.n	8003850 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2204      	movs	r2, #4
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	22e0      	movs	r2, #224	; 0xe0
 8003848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e021      	b.n	8003894 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e4      	bne.n	800382c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f958 	bl	8003b18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f9ff 	bl	8003c6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa55 	bl	8003d1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	461a      	mov	r2, r3
 800387a:	2100      	movs	r1, #0
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f9bd 	bl	8003bfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2210      	movs	r2, #16
 800388e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40023800 	.word	0x40023800
 80038a0:	40013800 	.word	0x40013800

080038a4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4b51      	ldr	r3, [pc, #324]	; (8003a00 <ETH_SetMACConfig+0x15c>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	7c1b      	ldrb	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <ETH_SetMACConfig+0x28>
 80038c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038ca:	e000      	b.n	80038ce <ETH_SetMACConfig+0x2a>
 80038cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	7c5b      	ldrb	r3, [r3, #17]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <ETH_SetMACConfig+0x38>
 80038d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038da:	e000      	b.n	80038de <ETH_SetMACConfig+0x3a>
 80038dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	7fdb      	ldrb	r3, [r3, #31]
 80038ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80038ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80038f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	7f92      	ldrb	r2, [r2, #30]
 80038f8:	2a00      	cmp	r2, #0
 80038fa:	d102      	bne.n	8003902 <ETH_SetMACConfig+0x5e>
 80038fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003900:	e000      	b.n	8003904 <ETH_SetMACConfig+0x60>
 8003902:	2200      	movs	r2, #0
                        macconf->Speed |
 8003904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	7f1b      	ldrb	r3, [r3, #28]
 800390a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800390c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	791b      	ldrb	r3, [r3, #4]
 8003918:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800391a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003922:	2a00      	cmp	r2, #0
 8003924:	d102      	bne.n	800392c <ETH_SetMACConfig+0x88>
 8003926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392a:	e000      	b.n	800392e <ETH_SetMACConfig+0x8a>
 800392c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800392e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	7bdb      	ldrb	r3, [r3, #15]
 8003934:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003936:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800393c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003944:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003946:	4313      	orrs	r3, r2
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800395e:	2001      	movs	r0, #1
 8003960:	f7fe fc20 	bl	80021a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	f64f 7341 	movw	r3, #65345	; 0xff41
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003982:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800398a:	2a00      	cmp	r2, #0
 800398c:	d101      	bne.n	8003992 <ETH_SetMACConfig+0xee>
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	e000      	b.n	8003994 <ETH_SetMACConfig+0xf0>
 8003992:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003994:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800399a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80039a2:	2a01      	cmp	r2, #1
 80039a4:	d101      	bne.n	80039aa <ETH_SetMACConfig+0x106>
 80039a6:	2208      	movs	r2, #8
 80039a8:	e000      	b.n	80039ac <ETH_SetMACConfig+0x108>
 80039aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80039ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80039b4:	2a01      	cmp	r2, #1
 80039b6:	d101      	bne.n	80039bc <ETH_SetMACConfig+0x118>
 80039b8:	2204      	movs	r2, #4
 80039ba:	e000      	b.n	80039be <ETH_SetMACConfig+0x11a>
 80039bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80039c6:	2a01      	cmp	r2, #1
 80039c8:	d101      	bne.n	80039ce <ETH_SetMACConfig+0x12a>
 80039ca:	2202      	movs	r2, #2
 80039cc:	e000      	b.n	80039d0 <ETH_SetMACConfig+0x12c>
 80039ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039d0:	4313      	orrs	r3, r2
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039e8:	2001      	movs	r0, #1
 80039ea:	f7fe fbdb 	bl	80021a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	619a      	str	r2, [r3, #24]
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	ff20810f 	.word	0xff20810f

08003a04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <ETH_SetDMAConfig+0x110>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	7b1b      	ldrb	r3, [r3, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <ETH_SetDMAConfig+0x2c>
 8003a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a2e:	e000      	b.n	8003a32 <ETH_SetDMAConfig+0x2e>
 8003a30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	7b5b      	ldrb	r3, [r3, #13]
 8003a36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	7f52      	ldrb	r2, [r2, #29]
 8003a3e:	2a00      	cmp	r2, #0
 8003a40:	d102      	bne.n	8003a48 <ETH_SetDMAConfig+0x44>
 8003a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a46:	e000      	b.n	8003a4a <ETH_SetDMAConfig+0x46>
 8003a48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	7b9b      	ldrb	r3, [r3, #14]
 8003a50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	7f1b      	ldrb	r3, [r3, #28]
 8003a5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	7f9b      	ldrb	r3, [r3, #30]
 8003a66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7fe fb82 	bl	80021a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	791b      	ldrb	r3, [r3, #4]
 8003ab2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ab8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003abe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ac4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003acc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003ace:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ad6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003adc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003aea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003af8:	2001      	movs	r0, #1
 8003afa:	f7fe fb53 	bl	80021a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b06:	461a      	mov	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	f8de3f23 	.word	0xf8de3f23

08003b18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b0a6      	sub	sp, #152	; 0x98
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b54:	2300      	movs	r3, #0
 8003b56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fe86 	bl	80038a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bcc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003be8:	f107 0308 	add.w	r3, r7, #8
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ff08 	bl	8003a04 <ETH_SetDMAConfig>
}
 8003bf4:	bf00      	nop
 8003bf6:	3798      	adds	r7, #152	; 0x98
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3305      	adds	r3, #5
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	021b      	lsls	r3, r3, #8
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	3204      	adds	r2, #4
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <ETH_MACAddressConfig+0x68>)
 8003c1e:	4413      	add	r3, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3303      	adds	r3, #3
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	061a      	lsls	r2, r3, #24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3302      	adds	r3, #2
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	041b      	lsls	r3, r3, #16
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	4313      	orrs	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	7812      	ldrb	r2, [r2, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <ETH_MACAddressConfig+0x6c>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6013      	str	r3, [r2, #0]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40028040 	.word	0x40028040
 8003c68:	40028044 	.word	0x40028044

08003c6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e03e      	b.n	8003cf8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68d9      	ldr	r1, [r3, #12]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	440b      	add	r3, r1
 8003c8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	3206      	adds	r2, #6
 8003cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d80c      	bhi.n	8003cdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	440b      	add	r3, r1
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	e004      	b.n	8003ce6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d9bd      	bls.n	8003c7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	611a      	str	r2, [r3, #16]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e046      	b.n	8003dba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6919      	ldr	r1, [r3, #16]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	440b      	add	r3, r1
 8003d3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2200      	movs	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003d70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	3212      	adds	r2, #18
 8003d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d80c      	bhi.n	8003daa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6919      	ldr	r1, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	440b      	add	r3, r1
 8003da2:	461a      	mov	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	e004      	b.n	8003db4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	461a      	mov	r2, r3
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3301      	adds	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d9b5      	bls.n	8003d2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dea:	60da      	str	r2, [r3, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e175      	b.n	8004104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f040 8164 	bne.w	80040fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d005      	beq.n	8003e4e <HAL_GPIO_Init+0x56>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d130      	bne.n	8003eb0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 0201 	and.w	r2, r3, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d017      	beq.n	8003eec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d123      	bne.n	8003f40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	08da      	lsrs	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3208      	adds	r2, #8
 8003f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	220f      	movs	r2, #15
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	08da      	lsrs	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3208      	adds	r2, #8
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80be 	beq.w	80040fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f82:	4b66      	ldr	r3, [pc, #408]	; (800411c <HAL_GPIO_Init+0x324>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4a65      	ldr	r2, [pc, #404]	; (800411c <HAL_GPIO_Init+0x324>)
 8003f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8e:	4b63      	ldr	r3, [pc, #396]	; (800411c <HAL_GPIO_Init+0x324>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f9a:	4a61      	ldr	r2, [pc, #388]	; (8004120 <HAL_GPIO_Init+0x328>)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_GPIO_Init+0x32c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d037      	beq.n	8004036 <HAL_GPIO_Init+0x23e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a57      	ldr	r2, [pc, #348]	; (8004128 <HAL_GPIO_Init+0x330>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_GPIO_Init+0x23a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_GPIO_Init+0x334>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02b      	beq.n	800402e <HAL_GPIO_Init+0x236>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a55      	ldr	r2, [pc, #340]	; (8004130 <HAL_GPIO_Init+0x338>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d025      	beq.n	800402a <HAL_GPIO_Init+0x232>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a54      	ldr	r2, [pc, #336]	; (8004134 <HAL_GPIO_Init+0x33c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <HAL_GPIO_Init+0x22e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a53      	ldr	r2, [pc, #332]	; (8004138 <HAL_GPIO_Init+0x340>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x22a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a52      	ldr	r2, [pc, #328]	; (800413c <HAL_GPIO_Init+0x344>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x226>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a51      	ldr	r2, [pc, #324]	; (8004140 <HAL_GPIO_Init+0x348>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x222>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a50      	ldr	r2, [pc, #320]	; (8004144 <HAL_GPIO_Init+0x34c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x21e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4f      	ldr	r2, [pc, #316]	; (8004148 <HAL_GPIO_Init+0x350>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x21a>
 800400e:	2309      	movs	r3, #9
 8004010:	e012      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004012:	230a      	movs	r3, #10
 8004014:	e010      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004016:	2308      	movs	r3, #8
 8004018:	e00e      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800401a:	2307      	movs	r3, #7
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800401e:	2306      	movs	r3, #6
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004036:	2300      	movs	r3, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004048:	4935      	ldr	r1, [pc, #212]	; (8004120 <HAL_GPIO_Init+0x328>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <HAL_GPIO_Init+0x354>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800407a:	4a34      	ldr	r2, [pc, #208]	; (800414c <HAL_GPIO_Init+0x354>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_GPIO_Init+0x354>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a4:	4a29      	ldr	r2, [pc, #164]	; (800414c <HAL_GPIO_Init+0x354>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040aa:	4b28      	ldr	r3, [pc, #160]	; (800414c <HAL_GPIO_Init+0x354>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ce:	4a1f      	ldr	r2, [pc, #124]	; (800414c <HAL_GPIO_Init+0x354>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_GPIO_Init+0x354>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f8:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_GPIO_Init+0x354>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	f67f ae86 	bls.w	8003e18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40013800 	.word	0x40013800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40020800 	.word	0x40020800
 8004130:	40020c00 	.word	0x40020c00
 8004134:	40021000 	.word	0x40021000
 8004138:	40021400 	.word	0x40021400
 800413c:	40021800 	.word	0x40021800
 8004140:	40021c00 	.word	0x40021c00
 8004144:	40022000 	.word	0x40022000
 8004148:	40022400 	.word	0x40022400
 800414c:	40013c00 	.word	0x40013c00

08004150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	807b      	strh	r3, [r7, #2]
 800415c:	4613      	mov	r3, r2
 800415e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004160:	787b      	ldrb	r3, [r7, #1]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004166:	887a      	ldrh	r2, [r7, #2]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800416c:	e003      	b.n	8004176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800416e:	887b      	ldrh	r3, [r7, #2]
 8004170:	041a      	lsls	r2, r3, #16
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	619a      	str	r2, [r3, #24]
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004184:	b08f      	sub	sp, #60	; 0x3c
 8004186:	af0a      	add	r7, sp, #40	; 0x28
 8004188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e116      	b.n	80043c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd fde6 	bl	8001d80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2203      	movs	r2, #3
 80041b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d102      	bne.n	80041ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f002 fb74 	bl	80068c0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	687e      	ldr	r6, [r7, #4]
 80041e0:	466d      	mov	r5, sp
 80041e2:	f106 0410 	add.w	r4, r6, #16
 80041e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041f6:	1d33      	adds	r3, r6, #4
 80041f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041fa:	6838      	ldr	r0, [r7, #0]
 80041fc:	f002 fb08 	bl	8006810 <USB_CoreInit>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0d7      	b.n	80043c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f002 fb62 	bl	80068e2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
 8004222:	e04a      	b.n	80042ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004224:	7bfa      	ldrb	r2, [r7, #15]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	333d      	adds	r3, #61	; 0x3d
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	333c      	adds	r3, #60	; 0x3c
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800424c:	7bfa      	ldrb	r2, [r7, #15]
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	b298      	uxth	r0, r3
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	3344      	adds	r3, #68	; 0x44
 8004260:	4602      	mov	r2, r0
 8004262:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	3340      	adds	r3, #64	; 0x40
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	3348      	adds	r3, #72	; 0x48
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800428c:	7bfa      	ldrb	r2, [r7, #15]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4413      	add	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	334c      	adds	r3, #76	; 0x4c
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042a0:	7bfa      	ldrb	r2, [r7, #15]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3354      	adds	r3, #84	; 0x54
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	3301      	adds	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d3af      	bcc.n	8004224 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e044      	b.n	8004354 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	3301      	adds	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d3b5      	bcc.n	80042ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	687e      	ldr	r6, [r7, #4]
 8004366:	466d      	mov	r5, sp
 8004368:	f106 0410 	add.w	r4, r6, #16
 800436c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800436e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004372:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004374:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004378:	e885 0003 	stmia.w	r5, {r0, r1}
 800437c:	1d33      	adds	r3, r6, #4
 800437e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004380:	6838      	ldr	r0, [r7, #0]
 8004382:	f002 fafb 	bl	800697c <USB_DevInit>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e014      	b.n	80043c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f80b 	bl	80043cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f002 fcb9 	bl	8006d32 <USB_DevDisconnect>

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_PCDEx_ActivateLPM+0x44>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	10000003 	.word	0x10000003

08004414 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]
}
 8004424:	bf00      	nop
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40007000 	.word	0x40007000

08004434 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a22      	ldr	r2, [pc, #136]	; (80044cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_PWREx_EnableOverDrive+0x98>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004462:	f7fd fe93 	bl	800218c <HAL_GetTick>
 8004466:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004468:	e009      	b.n	800447e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800446a:	f7fd fe8f 	bl	800218c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004478:	d901      	bls.n	800447e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e022      	b.n	80044c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800447e:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448a:	d1ee      	bne.n	800446a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800448c:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004496:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004498:	f7fd fe78 	bl	800218c <HAL_GetTick>
 800449c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800449e:	e009      	b.n	80044b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044a0:	f7fd fe74 	bl	800218c <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ae:	d901      	bls.n	80044b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e007      	b.n	80044c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044c0:	d1ee      	bne.n	80044a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e29b      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8087 	beq.w	8004606 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f8:	4b96      	ldr	r3, [pc, #600]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b04      	cmp	r3, #4
 8004502:	d00c      	beq.n	800451e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004504:	4b93      	ldr	r3, [pc, #588]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d112      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
 8004510:	4b90      	ldr	r3, [pc, #576]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451c:	d10b      	bne.n	8004536 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800451e:	4b8d      	ldr	r3, [pc, #564]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d06c      	beq.n	8004604 <HAL_RCC_OscConfig+0x130>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d168      	bne.n	8004604 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e275      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x7a>
 8004540:	4b84      	ldr	r3, [pc, #528]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a83      	ldr	r2, [pc, #524]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	e02e      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCC_OscConfig+0x9c>
 8004556:	4b7f      	ldr	r3, [pc, #508]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7e      	ldr	r2, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800455c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	4b7c      	ldr	r3, [pc, #496]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7b      	ldr	r2, [pc, #492]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e01d      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004578:	d10c      	bne.n	8004594 <HAL_RCC_OscConfig+0xc0>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004580:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	4b73      	ldr	r3, [pc, #460]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a72      	ldr	r2, [pc, #456]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800458c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e00b      	b.n	80045ac <HAL_RCC_OscConfig+0xd8>
 8004594:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a6e      	ldr	r2, [pc, #440]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800459a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	4b6c      	ldr	r3, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a6b      	ldr	r2, [pc, #428]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80045a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d013      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fd fdea 	bl	800218c <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fd fde6 	bl	800218c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e229      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ce:	4b61      	ldr	r3, [pc, #388]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e014      	b.n	8004606 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd fdd6 	bl	800218c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fd fdd2 	bl	800218c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e215      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f6:	4b57      	ldr	r3, [pc, #348]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f0      	bne.n	80045e4 <HAL_RCC_OscConfig+0x110>
 8004602:	e000      	b.n	8004606 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d069      	beq.n	80046e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004612:	4b50      	ldr	r3, [pc, #320]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00b      	beq.n	8004636 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461e:	4b4d      	ldr	r3, [pc, #308]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b08      	cmp	r3, #8
 8004628:	d11c      	bne.n	8004664 <HAL_RCC_OscConfig+0x190>
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d116      	bne.n	8004664 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_RCC_OscConfig+0x17a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d001      	beq.n	800464e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e1e9      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	493d      	ldr	r1, [pc, #244]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	e040      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d023      	beq.n	80046b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a38      	ldr	r2, [pc, #224]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fd fd88 	bl	800218c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004680:	f7fd fd84 	bl	800218c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1c7      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004692:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469e:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4929      	ldr	r1, [pc, #164]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]
 80046b2:	e018      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b4:	4b27      	ldr	r3, [pc, #156]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a26      	ldr	r2, [pc, #152]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fd fd64 	bl	800218c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c8:	f7fd fd60 	bl	800218c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e1a3      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046da:	4b1e      	ldr	r3, [pc, #120]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d038      	beq.n	8004764 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d019      	beq.n	800472e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fa:	4b16      	ldr	r3, [pc, #88]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	4a15      	ldr	r2, [pc, #84]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fd fd41 	bl	800218c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7fd fd3d 	bl	800218c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e180      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x23a>
 800472c:	e01a      	b.n	8004764 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_RCC_OscConfig+0x280>)
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd fd27 	bl	800218c <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00a      	b.n	8004758 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004742:	f7fd fd23 	bl	800218c <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d903      	bls.n	8004758 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e166      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
 8004754:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004758:	4b92      	ldr	r3, [pc, #584]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ee      	bne.n	8004742 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 80a4 	beq.w	80048ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b8c      	ldr	r3, [pc, #560]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b89      	ldr	r3, [pc, #548]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a88      	ldr	r2, [pc, #544]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b86      	ldr	r3, [pc, #536]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479a:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCC_OscConfig+0x4d4>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80047a6:	4b80      	ldr	r3, [pc, #512]	; (80049a8 <HAL_RCC_OscConfig+0x4d4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7f      	ldr	r2, [pc, #508]	; (80049a8 <HAL_RCC_OscConfig+0x4d4>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fd fceb 	bl	800218c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fd fce7 	bl	800218c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	; 0x64
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e12a      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047cc:	4b76      	ldr	r3, [pc, #472]	; (80049a8 <HAL_RCC_OscConfig+0x4d4>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x31a>
 80047e0:	4b70      	ldr	r3, [pc, #448]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a6f      	ldr	r2, [pc, #444]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e02d      	b.n	800484a <HAL_RCC_OscConfig+0x376>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x33c>
 80047f6:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	4b68      	ldr	r3, [pc, #416]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a67      	ldr	r2, [pc, #412]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e01c      	b.n	800484a <HAL_RCC_OscConfig+0x376>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_OscConfig+0x35e>
 8004818:	4b62      	ldr	r3, [pc, #392]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	4a61      	ldr	r2, [pc, #388]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800481e:	f043 0304 	orr.w	r3, r3, #4
 8004822:	6713      	str	r3, [r2, #112]	; 0x70
 8004824:	4b5f      	ldr	r3, [pc, #380]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	4a5e      	ldr	r2, [pc, #376]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6713      	str	r3, [r2, #112]	; 0x70
 8004830:	e00b      	b.n	800484a <HAL_RCC_OscConfig+0x376>
 8004832:	4b5c      	ldr	r3, [pc, #368]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004836:	4a5b      	ldr	r2, [pc, #364]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6713      	str	r3, [r2, #112]	; 0x70
 800483e:	4b59      	ldr	r3, [pc, #356]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	4a58      	ldr	r2, [pc, #352]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004852:	f7fd fc9b 	bl	800218c <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fd fc97 	bl	800218c <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0d8      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	4b4c      	ldr	r3, [pc, #304]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ee      	beq.n	800485a <HAL_RCC_OscConfig+0x386>
 800487c:	e014      	b.n	80048a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fd fc85 	bl	800218c <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fd fc81 	bl	800218c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0c2      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489c:	4b41      	ldr	r3, [pc, #260]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ee      	bne.n	8004886 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ae:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a3c      	ldr	r2, [pc, #240]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80ae 	beq.w	8004a20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c4:	4b37      	ldr	r3, [pc, #220]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d06d      	beq.n	80049ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d14b      	bne.n	8004970 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a31      	ldr	r2, [pc, #196]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 80048de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd fc52 	bl	800218c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fd fc4e 	bl	800218c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e091      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	3b01      	subs	r3, #1
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	071b      	lsls	r3, r3, #28
 8004936:	491b      	ldr	r1, [pc, #108]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd fc20 	bl	800218c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004950:	f7fd fc1c 	bl	800218c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e05f      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x47c>
 800496e:	e057      	b.n	8004a20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0b      	ldr	r2, [pc, #44]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fd fc06 	bl	800218c <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fd fc02 	bl	800218c <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e045      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_RCC_OscConfig+0x4d0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x4b0>
 80049a2:	e03d      	b.n	8004a20 <HAL_RCC_OscConfig+0x54c>
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049ac:	4b1f      	ldr	r3, [pc, #124]	; (8004a2c <HAL_RCC_OscConfig+0x558>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d030      	beq.n	8004a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d129      	bne.n	8004a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d122      	bne.n	8004a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d119      	bne.n	8004a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	085b      	lsrs	r3, r3, #1
 80049f4:	3b01      	subs	r3, #1
 80049f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d10f      	bne.n	8004a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800

08004a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0d0      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d910      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	4965      	ldr	r1, [pc, #404]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b59      	ldr	r3, [pc, #356]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a58      	ldr	r2, [pc, #352]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a52      	ldr	r2, [pc, #328]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	494d      	ldr	r1, [pc, #308]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d040      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d115      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e073      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06b      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4936      	ldr	r1, [pc, #216]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fd fb32 	bl	800218c <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fd fb2e 	bl	800218c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e053      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b54:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d210      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 020f 	bic.w	r2, r3, #15
 8004b6a:	4922      	ldr	r1, [pc, #136]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 030f 	and.w	r3, r3, #15
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e032      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bae:	4b12      	ldr	r3, [pc, #72]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	490e      	ldr	r1, [pc, #56]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bc2:	f000 f821 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	490a      	ldr	r1, [pc, #40]	; (8004bfc <HAL_RCC_ClockConfig+0x1cc>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	4a09      	ldr	r2, [pc, #36]	; (8004c00 <HAL_RCC_ClockConfig+0x1d0>)
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bde:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1d4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd fa8e 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	08007efc 	.word	0x08007efc
 8004c00:	20000004 	.word	0x20000004
 8004c04:	20000008 	.word	0x20000008

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c0c:	b094      	sub	sp, #80	; 0x50
 8004c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c10:	2300      	movs	r3, #0
 8004c12:	647b      	str	r3, [r7, #68]	; 0x44
 8004c14:	2300      	movs	r3, #0
 8004c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c18:	2300      	movs	r3, #0
 8004c1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c20:	4b79      	ldr	r3, [pc, #484]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d00d      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x40>
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	f200 80e1 	bhi.w	8004df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x34>
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c3a:	e0db      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4b73      	ldr	r3, [pc, #460]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c40:	e0db      	b.n	8004dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c42:	4b73      	ldr	r3, [pc, #460]	; (8004e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c46:	e0d8      	b.n	8004dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c48:	4b6f      	ldr	r3, [pc, #444]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c52:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d063      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	2200      	movs	r2, #0
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c70:	633b      	str	r3, [r7, #48]	; 0x30
 8004c72:	2300      	movs	r3, #0
 8004c74:	637b      	str	r3, [r7, #52]	; 0x34
 8004c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c7a:	4622      	mov	r2, r4
 8004c7c:	462b      	mov	r3, r5
 8004c7e:	f04f 0000 	mov.w	r0, #0
 8004c82:	f04f 0100 	mov.w	r1, #0
 8004c86:	0159      	lsls	r1, r3, #5
 8004c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c8c:	0150      	lsls	r0, r2, #5
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4621      	mov	r1, r4
 8004c94:	1a51      	subs	r1, r2, r1
 8004c96:	6139      	str	r1, [r7, #16]
 8004c98:	4629      	mov	r1, r5
 8004c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cac:	4659      	mov	r1, fp
 8004cae:	018b      	lsls	r3, r1, #6
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cb6:	4651      	mov	r1, sl
 8004cb8:	018a      	lsls	r2, r1, #6
 8004cba:	4651      	mov	r1, sl
 8004cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8004cc0:	4659      	mov	r1, fp
 8004cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cda:	4690      	mov	r8, r2
 8004cdc:	4699      	mov	r9, r3
 8004cde:	4623      	mov	r3, r4
 8004ce0:	eb18 0303 	adds.w	r3, r8, r3
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	eb49 0303 	adc.w	r3, r9, r3
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	024b      	lsls	r3, r1, #9
 8004cfe:	4621      	mov	r1, r4
 8004d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d04:	4621      	mov	r1, r4
 8004d06:	024a      	lsls	r2, r1, #9
 8004d08:	4610      	mov	r0, r2
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0e:	2200      	movs	r2, #0
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d18:	f7fb fbf0 	bl	80004fc <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4613      	mov	r3, r2
 8004d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d24:	e058      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d26:	4b38      	ldr	r3, [pc, #224]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	099b      	lsrs	r3, r3, #6
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	4618      	mov	r0, r3
 8004d30:	4611      	mov	r1, r2
 8004d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d36:	623b      	str	r3, [r7, #32]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d40:	4642      	mov	r2, r8
 8004d42:	464b      	mov	r3, r9
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f04f 0100 	mov.w	r1, #0
 8004d4c:	0159      	lsls	r1, r3, #5
 8004d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d52:	0150      	lsls	r0, r2, #5
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4641      	mov	r1, r8
 8004d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d5e:	4649      	mov	r1, r9
 8004d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d78:	ebb2 040a 	subs.w	r4, r2, sl
 8004d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	00eb      	lsls	r3, r5, #3
 8004d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d8e:	00e2      	lsls	r2, r4, #3
 8004d90:	4614      	mov	r4, r2
 8004d92:	461d      	mov	r5, r3
 8004d94:	4643      	mov	r3, r8
 8004d96:	18e3      	adds	r3, r4, r3
 8004d98:	603b      	str	r3, [r7, #0]
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	eb45 0303 	adc.w	r3, r5, r3
 8004da0:	607b      	str	r3, [r7, #4]
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dae:	4629      	mov	r1, r5
 8004db0:	028b      	lsls	r3, r1, #10
 8004db2:	4621      	mov	r1, r4
 8004db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db8:	4621      	mov	r1, r4
 8004dba:	028a      	lsls	r2, r1, #10
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	61fa      	str	r2, [r7, #28]
 8004dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dcc:	f7fb fb96 	bl	80004fc <__aeabi_uldivmod>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	3301      	adds	r3, #1
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004df2:	e002      	b.n	8004dfa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8004df6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3750      	adds	r7, #80	; 0x50
 8004e00:	46bd      	mov	sp, r7
 8004e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e06:	bf00      	nop
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	00f42400 	.word	0x00f42400
 8004e10:	007a1200 	.word	0x007a1200

08004e14 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e18:	4b03      	ldr	r3, [pc, #12]	; (8004e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000004 	.word	0x20000004

08004e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e30:	f7ff fff0 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	0a9b      	lsrs	r3, r3, #10
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	4903      	ldr	r1, [pc, #12]	; (8004e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	08007f0c 	.word	0x08007f0c

08004e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e58:	f7ff ffdc 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0b5b      	lsrs	r3, r3, #13
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4903      	ldr	r1, [pc, #12]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40023800 	.word	0x40023800
 8004e78:	08007f0c 	.word	0x08007f0c

08004e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b088      	sub	sp, #32
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e90:	2300      	movs	r3, #0
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d012      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ea4:	4b69      	ldr	r3, [pc, #420]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	4a68      	ldr	r2, [pc, #416]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004eae:	6093      	str	r3, [r2, #8]
 8004eb0:	4b66      	ldr	r3, [pc, #408]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	4964      	ldr	r1, [pc, #400]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d017      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ed6:	4b5d      	ldr	r3, [pc, #372]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	4959      	ldr	r1, [pc, #356]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ef4:	d101      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d017      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f12:	4b4e      	ldr	r3, [pc, #312]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	494a      	ldr	r1, [pc, #296]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f30:	d101      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 808b 	beq.w	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b3a      	ldr	r3, [pc, #232]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	4a39      	ldr	r2, [pc, #228]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6c:	4b37      	ldr	r3, [pc, #220]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f78:	4b35      	ldr	r3, [pc, #212]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a34      	ldr	r2, [pc, #208]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f84:	f7fd f902 	bl	800218c <HAL_GetTick>
 8004f88:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8c:	f7fd f8fe 	bl	800218c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	; 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e38f      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d035      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d02e      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ff0:	4b16      	ldr	r3, [pc, #88]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d114      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fd f8c6 	bl	800218c <HAL_GetTick>
 8005000:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005002:	e00a      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005004:	f7fd f8c2 	bl	800218c <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e351      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501a:	4b0c      	ldr	r3, [pc, #48]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ee      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005032:	d111      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005040:	4b04      	ldr	r3, [pc, #16]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005042:	400b      	ands	r3, r1
 8005044:	4901      	ldr	r1, [pc, #4]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
 800504a:	e00b      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800504c:	40023800 	.word	0x40023800
 8005050:	40007000 	.word	0x40007000
 8005054:	0ffffcff 	.word	0x0ffffcff
 8005058:	4bac      	ldr	r3, [pc, #688]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4aab      	ldr	r2, [pc, #684]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005062:	6093      	str	r3, [r2, #8]
 8005064:	4ba9      	ldr	r3, [pc, #676]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	49a6      	ldr	r1, [pc, #664]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005072:	4313      	orrs	r3, r2
 8005074:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0310 	and.w	r3, r3, #16
 800507e:	2b00      	cmp	r3, #0
 8005080:	d010      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005082:	4ba2      	ldr	r3, [pc, #648]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005088:	4aa0      	ldr	r2, [pc, #640]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800508e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005092:	4b9e      	ldr	r3, [pc, #632]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005094:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	499b      	ldr	r1, [pc, #620]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050b0:	4b96      	ldr	r3, [pc, #600]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050be:	4993      	ldr	r1, [pc, #588]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050d2:	4b8e      	ldr	r3, [pc, #568]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050e0:	498a      	ldr	r1, [pc, #552]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050f4:	4b85      	ldr	r3, [pc, #532]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005102:	4982      	ldr	r1, [pc, #520]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005116:	4b7d      	ldr	r3, [pc, #500]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4979      	ldr	r1, [pc, #484]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00a      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005138:	4b74      	ldr	r3, [pc, #464]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f023 0203 	bic.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	4971      	ldr	r1, [pc, #452]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800515a:	4b6c      	ldr	r3, [pc, #432]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005160:	f023 020c 	bic.w	r2, r3, #12
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005168:	4968      	ldr	r1, [pc, #416]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	4313      	orrs	r3, r2
 800516c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00a      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800517c:	4b63      	ldr	r3, [pc, #396]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518a:	4960      	ldr	r1, [pc, #384]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800519e:	4b5b      	ldr	r3, [pc, #364]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ac:	4957      	ldr	r1, [pc, #348]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051c0:	4b52      	ldr	r3, [pc, #328]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	494f      	ldr	r1, [pc, #316]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051e2:	4b4a      	ldr	r3, [pc, #296]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	4946      	ldr	r1, [pc, #280]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00a      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005204:	4b41      	ldr	r3, [pc, #260]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	493e      	ldr	r1, [pc, #248]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005214:	4313      	orrs	r3, r2
 8005216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	4935      	ldr	r1, [pc, #212]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00a      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005256:	492d      	ldr	r1, [pc, #180]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800526a:	4b28      	ldr	r3, [pc, #160]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005278:	4924      	ldr	r1, [pc, #144]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005288:	d101      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800529a:	2301      	movs	r3, #1
 800529c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b8:	4914      	ldr	r1, [pc, #80]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052dc:	490b      	ldr	r1, [pc, #44]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00f      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005300:	4902      	ldr	r1, [pc, #8]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005308:	e002      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800531c:	4b8a      	ldr	r3, [pc, #552]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005322:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	4986      	ldr	r1, [pc, #536]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532e:	4313      	orrs	r3, r2
 8005330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00b      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005340:	4b81      	ldr	r3, [pc, #516]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005346:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005350:	497d      	ldr	r1, [pc, #500]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d006      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80d6 	beq.w	8005518 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800536c:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a75      	ldr	r2, [pc, #468]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005378:	f7fc ff08 	bl	800218c <HAL_GetTick>
 800537c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005380:	f7fc ff04 	bl	800218c <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e195      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005392:	4b6d      	ldr	r3, [pc, #436]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d021      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d11d      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80053b2:	4b65      	ldr	r3, [pc, #404]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053c0:	4b61      	ldr	r3, [pc, #388]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c6:	0e1b      	lsrs	r3, r3, #24
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	019a      	lsls	r2, r3, #6
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	071b      	lsls	r3, r3, #28
 80053e6:	4958      	ldr	r1, [pc, #352]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02e      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005418:	d129      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800541a:	4b4b      	ldr	r3, [pc, #300]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005420:	0c1b      	lsrs	r3, r3, #16
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005428:	4b47      	ldr	r3, [pc, #284]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800542e:	0f1b      	lsrs	r3, r3, #28
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	019a      	lsls	r2, r3, #6
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	041b      	lsls	r3, r3, #16
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	431a      	orrs	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	071b      	lsls	r3, r3, #28
 800544e:	493e      	ldr	r1, [pc, #248]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005456:	4b3c      	ldr	r3, [pc, #240]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545c:	f023 021f 	bic.w	r2, r3, #31
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	3b01      	subs	r3, #1
 8005466:	4938      	ldr	r1, [pc, #224]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01d      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800547a:	4b33      	ldr	r3, [pc, #204]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800547c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005480:	0e1b      	lsrs	r3, r3, #24
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005488:	4b2f      	ldr	r3, [pc, #188]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800548a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548e:	0f1b      	lsrs	r3, r3, #28
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	019a      	lsls	r2, r3, #6
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	041b      	lsls	r3, r3, #16
 80054a2:	431a      	orrs	r2, r3
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	061b      	lsls	r3, r3, #24
 80054a8:	431a      	orrs	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	071b      	lsls	r3, r3, #28
 80054ae:	4926      	ldr	r1, [pc, #152]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d011      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	019a      	lsls	r2, r3, #6
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	041b      	lsls	r3, r3, #16
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	491a      	ldr	r1, [pc, #104]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054e6:	4b18      	ldr	r3, [pc, #96]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f2:	f7fc fe4b 	bl	800218c <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054fa:	f7fc fe47 	bl	800218c <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b64      	cmp	r3, #100	; 0x64
 8005506:	d901      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e0d8      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d0f0      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b01      	cmp	r3, #1
 800551c:	f040 80ce 	bne.w	80056bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a08      	ldr	r2, [pc, #32]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800552a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800552c:	f7fc fe2e 	bl	800218c <HAL_GetTick>
 8005530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005532:	e00b      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005534:	f7fc fe2a 	bl	800218c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d904      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e0bb      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800554c:	4b5e      	ldr	r3, [pc, #376]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005558:	d0ec      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005576:	2b00      	cmp	r3, #0
 8005578:	d02e      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d12a      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005582:	4b51      	ldr	r3, [pc, #324]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005590:	4b4d      	ldr	r3, [pc, #308]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005596:	0f1b      	lsrs	r3, r3, #28
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	019a      	lsls	r2, r3, #6
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	061b      	lsls	r3, r3, #24
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	071b      	lsls	r3, r3, #28
 80055b6:	4944      	ldr	r1, [pc, #272]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055be:	4b42      	ldr	r3, [pc, #264]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	3b01      	subs	r3, #1
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	493d      	ldr	r1, [pc, #244]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d022      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ec:	d11d      	bne.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055ee:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	0e1b      	lsrs	r3, r3, #24
 80055f6:	f003 030f 	and.w	r3, r3, #15
 80055fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055fc:	4b32      	ldr	r3, [pc, #200]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	0f1b      	lsrs	r3, r3, #28
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	019a      	lsls	r2, r3, #6
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	041b      	lsls	r3, r3, #16
 8005616:	431a      	orrs	r2, r3
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	071b      	lsls	r3, r3, #28
 8005622:	4929      	ldr	r1, [pc, #164]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d028      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005636:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	0e1b      	lsrs	r3, r3, #24
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005644:	4b20      	ldr	r3, [pc, #128]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f003 0303 	and.w	r3, r3, #3
 8005650:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	019a      	lsls	r2, r3, #6
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	041b      	lsls	r3, r3, #16
 800565c:	431a      	orrs	r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	061b      	lsls	r3, r3, #24
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	071b      	lsls	r3, r3, #28
 800566a:	4917      	ldr	r1, [pc, #92]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	4911      	ldr	r1, [pc, #68]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800568e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005694:	f7fc fd7a 	bl	800218c <HAL_GetTick>
 8005698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800569c:	f7fc fd76 	bl	800218c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e007      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056ae:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ba:	d1ef      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800

080056cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e040      	b.n	8005760 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fc faac 	bl	8001c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2224      	movs	r2, #36	; 0x24
 80056f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fbc2 	bl	8005e94 <UART_SetConfig>
 8005710:	4603      	mov	r3, r0
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e022      	b.n	8005760 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fe1a 	bl	800635c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fea1 	bl	80064a0 <UART_CheckIdleState>
 800575e:	4603      	mov	r3, r0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08a      	sub	sp, #40	; 0x28
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	4613      	mov	r3, r2
 8005776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577c:	2b20      	cmp	r3, #32
 800577e:	d171      	bne.n	8005864 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_UART_Transmit+0x24>
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e06a      	b.n	8005866 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2221      	movs	r2, #33	; 0x21
 800579c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579e:	f7fc fcf5 	bl	800218c <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057bc:	d108      	bne.n	80057d0 <HAL_UART_Transmit+0x68>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d104      	bne.n	80057d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e003      	b.n	80057d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d8:	e02c      	b.n	8005834 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 fea8 	bl	800653a <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e038      	b.n	8005866 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005808:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	3302      	adds	r3, #2
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	e007      	b.n	8005822 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1cc      	bne.n	80057da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2200      	movs	r2, #0
 8005848:	2140      	movs	r1, #64	; 0x40
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fe75 	bl	800653a <UART_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e005      	b.n	8005866 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b0ba      	sub	sp, #232	; 0xe8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005896:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800589a:	f640 030f 	movw	r3, #2063	; 0x80f
 800589e:	4013      	ands	r3, r2
 80058a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d115      	bne.n	80058d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00f      	beq.n	80058d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d009      	beq.n	80058d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 82ac 	beq.w	8005e26 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      }
      return;
 80058d6:	e2a6      	b.n	8005e26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8117 	beq.w	8005b10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80058e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80058ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058f2:	4b85      	ldr	r3, [pc, #532]	; (8005b08 <HAL_UART_IRQHandler+0x298>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 810a 	beq.w	8005b10 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d011      	beq.n	800592c <HAL_UART_IRQHandler+0xbc>
 8005908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2201      	movs	r2, #1
 800591a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d011      	beq.n	800595c <HAL_UART_IRQHandler+0xec>
 8005938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2202      	movs	r2, #2
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005952:	f043 0204 	orr.w	r2, r3, #4
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d011      	beq.n	800598c <HAL_UART_IRQHandler+0x11c>
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2204      	movs	r2, #4
 800597a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005982:	f043 0202 	orr.w	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800598c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00b      	beq.n	80059c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2208      	movs	r2, #8
 80059b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059be:	f043 0208 	orr.w	r2, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d012      	beq.n	80059fa <HAL_UART_IRQHandler+0x18a>
 80059d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8212 	beq.w	8005e2a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d005      	beq.n	8005a52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04f      	beq.n	8005af2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fe37 	bl	80066c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b40      	cmp	r3, #64	; 0x40
 8005a64:	d141      	bne.n	8005aea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1d9      	bne.n	8005a66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d013      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <HAL_UART_IRQHandler+0x29c>)
 8005ac0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fc12 	bl	80032f0 <HAL_DMA_Abort_IT>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d017      	beq.n	8005b02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00f      	b.n	8005b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f9b6 	bl	8005e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00b      	b.n	8005b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f9b2 	bl	8005e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e007      	b.n	8005b02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f9ae 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b00:	e193      	b.n	8005e2a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b02:	bf00      	nop
    return;
 8005b04:	e191      	b.n	8005e2a <HAL_UART_IRQHandler+0x5ba>
 8005b06:	bf00      	nop
 8005b08:	04000120 	.word	0x04000120
 8005b0c:	0800678f 	.word	0x0800678f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f040 814c 	bne.w	8005db2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8145 	beq.w	8005db2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 813e 	beq.w	8005db2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2210      	movs	r2, #16
 8005b3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	f040 80b6 	bne.w	8005cba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 8165 	beq.w	8005e2e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f080 815d 	bcs.w	8005e2e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b88:	f000 8086 	beq.w	8005c98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1da      	bne.n	8005b8c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3308      	adds	r3, #8
 8005bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e1      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3308      	adds	r3, #8
 8005c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e3      	bne.n	8005c12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	f023 0310 	bic.w	r3, r3, #16
 8005c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e4      	bne.n	8005c58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd fabc 	bl	8003210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f8d8 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cb8:	e0b9      	b.n	8005e2e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	f000 80ab 	beq.w	8005e32 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80a6 	beq.w	8005e32 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d08:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e4      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3308      	adds	r3, #8
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d40:	633a      	str	r2, [r7, #48]	; 0x30
 8005d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e3      	bne.n	8005d1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f023 0310 	bic.w	r3, r3, #16
 8005d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	461a      	mov	r2, r3
 8005d86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d8a:	61fb      	str	r3, [r7, #28]
 8005d8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	617b      	str	r3, [r7, #20]
   return(result);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e4      	bne.n	8005d68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 f85c 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005db0:	e03f      	b.n	8005e32 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <HAL_UART_IRQHandler+0x56c>
 8005dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d008      	beq.n	8005ddc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005dd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f853 	bl	8005e80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005dda:	e02d      	b.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00e      	beq.n	8005e06 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d01c      	beq.n	8005e36 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
    }
    return;
 8005e04:	e017      	b.n	8005e36 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d012      	beq.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
 8005e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00c      	beq.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fccb 	bl	80067ba <UART_EndTransmit_IT>
    return;
 8005e24:	e008      	b.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e26:	bf00      	nop
 8005e28:	e006      	b.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e2a:	bf00      	nop
 8005e2c:	e004      	b.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
      return;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <HAL_UART_IRQHandler+0x5c8>
    return;
 8005e36:	bf00      	nop
  }

}
 8005e38:	37e8      	adds	r7, #232	; 0xe8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	431a      	orrs	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4ba6      	ldr	r3, [pc, #664]	; (8006158 <UART_SetConfig+0x2c4>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	6979      	ldr	r1, [r7, #20]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a94      	ldr	r2, [pc, #592]	; (800615c <UART_SetConfig+0x2c8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d120      	bne.n	8005f52 <UART_SetConfig+0xbe>
 8005f10:	4b93      	ldr	r3, [pc, #588]	; (8006160 <UART_SetConfig+0x2cc>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d816      	bhi.n	8005f4c <UART_SetConfig+0xb8>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x90>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f41 	.word	0x08005f41
 8005f2c:	08005f3b 	.word	0x08005f3b
 8005f30:	08005f47 	.word	0x08005f47
 8005f34:	2301      	movs	r3, #1
 8005f36:	77fb      	strb	r3, [r7, #31]
 8005f38:	e150      	b.n	80061dc <UART_SetConfig+0x348>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	77fb      	strb	r3, [r7, #31]
 8005f3e:	e14d      	b.n	80061dc <UART_SetConfig+0x348>
 8005f40:	2304      	movs	r3, #4
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e14a      	b.n	80061dc <UART_SetConfig+0x348>
 8005f46:	2308      	movs	r3, #8
 8005f48:	77fb      	strb	r3, [r7, #31]
 8005f4a:	e147      	b.n	80061dc <UART_SetConfig+0x348>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e144      	b.n	80061dc <UART_SetConfig+0x348>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a83      	ldr	r2, [pc, #524]	; (8006164 <UART_SetConfig+0x2d0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d132      	bne.n	8005fc2 <UART_SetConfig+0x12e>
 8005f5c:	4b80      	ldr	r3, [pc, #512]	; (8006160 <UART_SetConfig+0x2cc>)
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f62:	f003 030c 	and.w	r3, r3, #12
 8005f66:	2b0c      	cmp	r3, #12
 8005f68:	d828      	bhi.n	8005fbc <UART_SetConfig+0x128>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <UART_SetConfig+0xdc>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005fa5 	.word	0x08005fa5
 8005f74:	08005fbd 	.word	0x08005fbd
 8005f78:	08005fbd 	.word	0x08005fbd
 8005f7c:	08005fbd 	.word	0x08005fbd
 8005f80:	08005fb1 	.word	0x08005fb1
 8005f84:	08005fbd 	.word	0x08005fbd
 8005f88:	08005fbd 	.word	0x08005fbd
 8005f8c:	08005fbd 	.word	0x08005fbd
 8005f90:	08005fab 	.word	0x08005fab
 8005f94:	08005fbd 	.word	0x08005fbd
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fbd 	.word	0x08005fbd
 8005fa0:	08005fb7 	.word	0x08005fb7
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e118      	b.n	80061dc <UART_SetConfig+0x348>
 8005faa:	2302      	movs	r3, #2
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e115      	b.n	80061dc <UART_SetConfig+0x348>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e112      	b.n	80061dc <UART_SetConfig+0x348>
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e10f      	b.n	80061dc <UART_SetConfig+0x348>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e10c      	b.n	80061dc <UART_SetConfig+0x348>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a68      	ldr	r2, [pc, #416]	; (8006168 <UART_SetConfig+0x2d4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d120      	bne.n	800600e <UART_SetConfig+0x17a>
 8005fcc:	4b64      	ldr	r3, [pc, #400]	; (8006160 <UART_SetConfig+0x2cc>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005fd6:	2b30      	cmp	r3, #48	; 0x30
 8005fd8:	d013      	beq.n	8006002 <UART_SetConfig+0x16e>
 8005fda:	2b30      	cmp	r3, #48	; 0x30
 8005fdc:	d814      	bhi.n	8006008 <UART_SetConfig+0x174>
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d009      	beq.n	8005ff6 <UART_SetConfig+0x162>
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d810      	bhi.n	8006008 <UART_SetConfig+0x174>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <UART_SetConfig+0x15c>
 8005fea:	2b10      	cmp	r3, #16
 8005fec:	d006      	beq.n	8005ffc <UART_SetConfig+0x168>
 8005fee:	e00b      	b.n	8006008 <UART_SetConfig+0x174>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e0f2      	b.n	80061dc <UART_SetConfig+0x348>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e0ef      	b.n	80061dc <UART_SetConfig+0x348>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e0ec      	b.n	80061dc <UART_SetConfig+0x348>
 8006002:	2308      	movs	r3, #8
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e0e9      	b.n	80061dc <UART_SetConfig+0x348>
 8006008:	2310      	movs	r3, #16
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e0e6      	b.n	80061dc <UART_SetConfig+0x348>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a56      	ldr	r2, [pc, #344]	; (800616c <UART_SetConfig+0x2d8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d120      	bne.n	800605a <UART_SetConfig+0x1c6>
 8006018:	4b51      	ldr	r3, [pc, #324]	; (8006160 <UART_SetConfig+0x2cc>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006022:	2bc0      	cmp	r3, #192	; 0xc0
 8006024:	d013      	beq.n	800604e <UART_SetConfig+0x1ba>
 8006026:	2bc0      	cmp	r3, #192	; 0xc0
 8006028:	d814      	bhi.n	8006054 <UART_SetConfig+0x1c0>
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d009      	beq.n	8006042 <UART_SetConfig+0x1ae>
 800602e:	2b80      	cmp	r3, #128	; 0x80
 8006030:	d810      	bhi.n	8006054 <UART_SetConfig+0x1c0>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <UART_SetConfig+0x1a8>
 8006036:	2b40      	cmp	r3, #64	; 0x40
 8006038:	d006      	beq.n	8006048 <UART_SetConfig+0x1b4>
 800603a:	e00b      	b.n	8006054 <UART_SetConfig+0x1c0>
 800603c:	2300      	movs	r3, #0
 800603e:	77fb      	strb	r3, [r7, #31]
 8006040:	e0cc      	b.n	80061dc <UART_SetConfig+0x348>
 8006042:	2302      	movs	r3, #2
 8006044:	77fb      	strb	r3, [r7, #31]
 8006046:	e0c9      	b.n	80061dc <UART_SetConfig+0x348>
 8006048:	2304      	movs	r3, #4
 800604a:	77fb      	strb	r3, [r7, #31]
 800604c:	e0c6      	b.n	80061dc <UART_SetConfig+0x348>
 800604e:	2308      	movs	r3, #8
 8006050:	77fb      	strb	r3, [r7, #31]
 8006052:	e0c3      	b.n	80061dc <UART_SetConfig+0x348>
 8006054:	2310      	movs	r3, #16
 8006056:	77fb      	strb	r3, [r7, #31]
 8006058:	e0c0      	b.n	80061dc <UART_SetConfig+0x348>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a44      	ldr	r2, [pc, #272]	; (8006170 <UART_SetConfig+0x2dc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d125      	bne.n	80060b0 <UART_SetConfig+0x21c>
 8006064:	4b3e      	ldr	r3, [pc, #248]	; (8006160 <UART_SetConfig+0x2cc>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006072:	d017      	beq.n	80060a4 <UART_SetConfig+0x210>
 8006074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006078:	d817      	bhi.n	80060aa <UART_SetConfig+0x216>
 800607a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607e:	d00b      	beq.n	8006098 <UART_SetConfig+0x204>
 8006080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006084:	d811      	bhi.n	80060aa <UART_SetConfig+0x216>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <UART_SetConfig+0x1fe>
 800608a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800608e:	d006      	beq.n	800609e <UART_SetConfig+0x20a>
 8006090:	e00b      	b.n	80060aa <UART_SetConfig+0x216>
 8006092:	2300      	movs	r3, #0
 8006094:	77fb      	strb	r3, [r7, #31]
 8006096:	e0a1      	b.n	80061dc <UART_SetConfig+0x348>
 8006098:	2302      	movs	r3, #2
 800609a:	77fb      	strb	r3, [r7, #31]
 800609c:	e09e      	b.n	80061dc <UART_SetConfig+0x348>
 800609e:	2304      	movs	r3, #4
 80060a0:	77fb      	strb	r3, [r7, #31]
 80060a2:	e09b      	b.n	80061dc <UART_SetConfig+0x348>
 80060a4:	2308      	movs	r3, #8
 80060a6:	77fb      	strb	r3, [r7, #31]
 80060a8:	e098      	b.n	80061dc <UART_SetConfig+0x348>
 80060aa:	2310      	movs	r3, #16
 80060ac:	77fb      	strb	r3, [r7, #31]
 80060ae:	e095      	b.n	80061dc <UART_SetConfig+0x348>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2f      	ldr	r2, [pc, #188]	; (8006174 <UART_SetConfig+0x2e0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d125      	bne.n	8006106 <UART_SetConfig+0x272>
 80060ba:	4b29      	ldr	r3, [pc, #164]	; (8006160 <UART_SetConfig+0x2cc>)
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060c8:	d017      	beq.n	80060fa <UART_SetConfig+0x266>
 80060ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80060ce:	d817      	bhi.n	8006100 <UART_SetConfig+0x26c>
 80060d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d4:	d00b      	beq.n	80060ee <UART_SetConfig+0x25a>
 80060d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060da:	d811      	bhi.n	8006100 <UART_SetConfig+0x26c>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <UART_SetConfig+0x254>
 80060e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e4:	d006      	beq.n	80060f4 <UART_SetConfig+0x260>
 80060e6:	e00b      	b.n	8006100 <UART_SetConfig+0x26c>
 80060e8:	2301      	movs	r3, #1
 80060ea:	77fb      	strb	r3, [r7, #31]
 80060ec:	e076      	b.n	80061dc <UART_SetConfig+0x348>
 80060ee:	2302      	movs	r3, #2
 80060f0:	77fb      	strb	r3, [r7, #31]
 80060f2:	e073      	b.n	80061dc <UART_SetConfig+0x348>
 80060f4:	2304      	movs	r3, #4
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e070      	b.n	80061dc <UART_SetConfig+0x348>
 80060fa:	2308      	movs	r3, #8
 80060fc:	77fb      	strb	r3, [r7, #31]
 80060fe:	e06d      	b.n	80061dc <UART_SetConfig+0x348>
 8006100:	2310      	movs	r3, #16
 8006102:	77fb      	strb	r3, [r7, #31]
 8006104:	e06a      	b.n	80061dc <UART_SetConfig+0x348>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1b      	ldr	r2, [pc, #108]	; (8006178 <UART_SetConfig+0x2e4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d138      	bne.n	8006182 <UART_SetConfig+0x2ee>
 8006110:	4b13      	ldr	r3, [pc, #76]	; (8006160 <UART_SetConfig+0x2cc>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800611a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800611e:	d017      	beq.n	8006150 <UART_SetConfig+0x2bc>
 8006120:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006124:	d82a      	bhi.n	800617c <UART_SetConfig+0x2e8>
 8006126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800612a:	d00b      	beq.n	8006144 <UART_SetConfig+0x2b0>
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006130:	d824      	bhi.n	800617c <UART_SetConfig+0x2e8>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <UART_SetConfig+0x2aa>
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613a:	d006      	beq.n	800614a <UART_SetConfig+0x2b6>
 800613c:	e01e      	b.n	800617c <UART_SetConfig+0x2e8>
 800613e:	2300      	movs	r3, #0
 8006140:	77fb      	strb	r3, [r7, #31]
 8006142:	e04b      	b.n	80061dc <UART_SetConfig+0x348>
 8006144:	2302      	movs	r3, #2
 8006146:	77fb      	strb	r3, [r7, #31]
 8006148:	e048      	b.n	80061dc <UART_SetConfig+0x348>
 800614a:	2304      	movs	r3, #4
 800614c:	77fb      	strb	r3, [r7, #31]
 800614e:	e045      	b.n	80061dc <UART_SetConfig+0x348>
 8006150:	2308      	movs	r3, #8
 8006152:	77fb      	strb	r3, [r7, #31]
 8006154:	e042      	b.n	80061dc <UART_SetConfig+0x348>
 8006156:	bf00      	nop
 8006158:	efff69f3 	.word	0xefff69f3
 800615c:	40011000 	.word	0x40011000
 8006160:	40023800 	.word	0x40023800
 8006164:	40004400 	.word	0x40004400
 8006168:	40004800 	.word	0x40004800
 800616c:	40004c00 	.word	0x40004c00
 8006170:	40005000 	.word	0x40005000
 8006174:	40011400 	.word	0x40011400
 8006178:	40007800 	.word	0x40007800
 800617c:	2310      	movs	r3, #16
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e02c      	b.n	80061dc <UART_SetConfig+0x348>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a72      	ldr	r2, [pc, #456]	; (8006350 <UART_SetConfig+0x4bc>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d125      	bne.n	80061d8 <UART_SetConfig+0x344>
 800618c:	4b71      	ldr	r3, [pc, #452]	; (8006354 <UART_SetConfig+0x4c0>)
 800618e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800619a:	d017      	beq.n	80061cc <UART_SetConfig+0x338>
 800619c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061a0:	d817      	bhi.n	80061d2 <UART_SetConfig+0x33e>
 80061a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a6:	d00b      	beq.n	80061c0 <UART_SetConfig+0x32c>
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	d811      	bhi.n	80061d2 <UART_SetConfig+0x33e>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <UART_SetConfig+0x326>
 80061b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b6:	d006      	beq.n	80061c6 <UART_SetConfig+0x332>
 80061b8:	e00b      	b.n	80061d2 <UART_SetConfig+0x33e>
 80061ba:	2300      	movs	r3, #0
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e00d      	b.n	80061dc <UART_SetConfig+0x348>
 80061c0:	2302      	movs	r3, #2
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e00a      	b.n	80061dc <UART_SetConfig+0x348>
 80061c6:	2304      	movs	r3, #4
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e007      	b.n	80061dc <UART_SetConfig+0x348>
 80061cc:	2308      	movs	r3, #8
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e004      	b.n	80061dc <UART_SetConfig+0x348>
 80061d2:	2310      	movs	r3, #16
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	e001      	b.n	80061dc <UART_SetConfig+0x348>
 80061d8:	2310      	movs	r3, #16
 80061da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	d15b      	bne.n	800629e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80061e6:	7ffb      	ldrb	r3, [r7, #31]
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d828      	bhi.n	800623e <UART_SetConfig+0x3aa>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x360>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006229 	.word	0x08006229
 8006200:	0800623f 	.word	0x0800623f
 8006204:	0800622f 	.word	0x0800622f
 8006208:	0800623f 	.word	0x0800623f
 800620c:	0800623f 	.word	0x0800623f
 8006210:	0800623f 	.word	0x0800623f
 8006214:	08006237 	.word	0x08006237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fe fe08 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 800621c:	61b8      	str	r0, [r7, #24]
        break;
 800621e:	e013      	b.n	8006248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006220:	f7fe fe18 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
 8006224:	61b8      	str	r0, [r7, #24]
        break;
 8006226:	e00f      	b.n	8006248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006228:	4b4b      	ldr	r3, [pc, #300]	; (8006358 <UART_SetConfig+0x4c4>)
 800622a:	61bb      	str	r3, [r7, #24]
        break;
 800622c:	e00c      	b.n	8006248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622e:	f7fe fceb 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8006232:	61b8      	str	r0, [r7, #24]
        break;
 8006234:	e008      	b.n	8006248 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623a:	61bb      	str	r3, [r7, #24]
        break;
 800623c:	e004      	b.n	8006248 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	77bb      	strb	r3, [r7, #30]
        break;
 8006246:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d074      	beq.n	8006338 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	005a      	lsls	r2, r3, #1
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	441a      	add	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b0f      	cmp	r3, #15
 8006268:	d916      	bls.n	8006298 <UART_SetConfig+0x404>
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006270:	d212      	bcs.n	8006298 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	b29b      	uxth	r3, r3
 8006276:	f023 030f 	bic.w	r3, r3, #15
 800627a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	b29b      	uxth	r3, r3
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	b29a      	uxth	r2, r3
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	4313      	orrs	r3, r2
 800628c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	89fa      	ldrh	r2, [r7, #14]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	e04f      	b.n	8006338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	77bb      	strb	r3, [r7, #30]
 800629c:	e04c      	b.n	8006338 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800629e:	7ffb      	ldrb	r3, [r7, #31]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d828      	bhi.n	80062f6 <UART_SetConfig+0x462>
 80062a4:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <UART_SetConfig+0x418>)
 80062a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062aa:	bf00      	nop
 80062ac:	080062d1 	.word	0x080062d1
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062e1 	.word	0x080062e1
 80062b8:	080062f7 	.word	0x080062f7
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	080062f7 	.word	0x080062f7
 80062c4:	080062f7 	.word	0x080062f7
 80062c8:	080062f7 	.word	0x080062f7
 80062cc:	080062ef 	.word	0x080062ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7fe fdac 	bl	8004e2c <HAL_RCC_GetPCLK1Freq>
 80062d4:	61b8      	str	r0, [r7, #24]
        break;
 80062d6:	e013      	b.n	8006300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062d8:	f7fe fdbc 	bl	8004e54 <HAL_RCC_GetPCLK2Freq>
 80062dc:	61b8      	str	r0, [r7, #24]
        break;
 80062de:	e00f      	b.n	8006300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e0:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <UART_SetConfig+0x4c4>)
 80062e2:	61bb      	str	r3, [r7, #24]
        break;
 80062e4:	e00c      	b.n	8006300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062e6:	f7fe fc8f 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 80062ea:	61b8      	str	r0, [r7, #24]
        break;
 80062ec:	e008      	b.n	8006300 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f2:	61bb      	str	r3, [r7, #24]
        break;
 80062f4:	e004      	b.n	8006300 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	77bb      	strb	r3, [r7, #30]
        break;
 80062fe:	bf00      	nop
    }

    if (pclk != 0U)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d018      	beq.n	8006338 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	085a      	lsrs	r2, r3, #1
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	441a      	add	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b0f      	cmp	r3, #15
 800631e:	d909      	bls.n	8006334 <UART_SetConfig+0x4a0>
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006326:	d205      	bcs.n	8006334 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	e001      	b.n	8006338 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006344:	7fbb      	ldrb	r3, [r7, #30]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40007c00 	.word	0x40007c00
 8006354:	40023800 	.word	0x40023800
 8006358:	00f42400 	.word	0x00f42400

0800635c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	f003 0308 	and.w	r3, r3, #8
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01a      	beq.n	8006472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800645a:	d10a      	bne.n	8006472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af02      	add	r7, sp, #8
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064b0:	f7fb fe6c 	bl	800218c <HAL_GetTick>
 80064b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d10e      	bne.n	80064e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064c8:	9300      	str	r3, [sp, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f831 	bl	800653a <UART_WaitOnFlagUntilTimeout>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e027      	b.n	8006532 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b04      	cmp	r3, #4
 80064ee:	d10e      	bne.n	800650e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f81b 	bl	800653a <UART_WaitOnFlagUntilTimeout>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e011      	b.n	8006532 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b09c      	sub	sp, #112	; 0x70
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	603b      	str	r3, [r7, #0]
 8006546:	4613      	mov	r3, r2
 8006548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654a:	e0a7      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800654c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006552:	f000 80a3 	beq.w	800669c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006556:	f7fb fe19 	bl	800218c <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006562:	429a      	cmp	r2, r3
 8006564:	d302      	bcc.n	800656c <UART_WaitOnFlagUntilTimeout+0x32>
 8006566:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006568:	2b00      	cmp	r3, #0
 800656a:	d13f      	bne.n	80065ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800657a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006580:	667b      	str	r3, [r7, #100]	; 0x64
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800658c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006590:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e6      	bne.n	800656c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	663b      	str	r3, [r7, #96]	; 0x60
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3308      	adds	r3, #8
 80065bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065be:	64ba      	str	r2, [r7, #72]	; 0x48
 80065c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2220      	movs	r2, #32
 80065d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e068      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d050      	beq.n	800669c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006608:	d148      	bne.n	800669c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006612:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	e853 3f00 	ldrex	r3, [r3]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006638:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800663a:	e841 2300 	strex	r3, r2, [r1]
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e6      	bne.n	8006614 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3308      	adds	r3, #8
 800664c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	613b      	str	r3, [r7, #16]
   return(result);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	66bb      	str	r3, [r7, #104]	; 0x68
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3308      	adds	r3, #8
 8006664:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006666:	623a      	str	r2, [r7, #32]
 8006668:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	69f9      	ldr	r1, [r7, #28]
 800666c:	6a3a      	ldr	r2, [r7, #32]
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	61bb      	str	r3, [r7, #24]
   return(result);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e010      	b.n	80066be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69da      	ldr	r2, [r3, #28]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	f43f af48 	beq.w	800654c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3770      	adds	r7, #112	; 0x70
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b095      	sub	sp, #84	; 0x54
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	e853 3f00 	ldrex	r3, [r3]
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ec:	643b      	str	r3, [r7, #64]	; 0x40
 80066ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f4:	e841 2300 	strex	r3, r2, [r1]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e6      	bne.n	80066ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	3308      	adds	r3, #8
 8006706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	f023 0301 	bic.w	r3, r3, #1
 8006716:	64bb      	str	r3, [r7, #72]	; 0x48
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e5      	bne.n	8006700 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	2b01      	cmp	r3, #1
 800673a:	d118      	bne.n	800676e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	60bb      	str	r3, [r7, #8]
   return(result);
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	f023 0310 	bic.w	r3, r3, #16
 8006750:	647b      	str	r3, [r7, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	461a      	mov	r2, r3
 8006758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6979      	ldr	r1, [r7, #20]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	613b      	str	r3, [r7, #16]
   return(result);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e6      	bne.n	800673c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006782:	bf00      	nop
 8006784:	3754      	adds	r7, #84	; 0x54
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fb51 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b088      	sub	sp, #32
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6979      	ldr	r1, [r7, #20]
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	613b      	str	r3, [r7, #16]
   return(result);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e6      	bne.n	80067c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2220      	movs	r2, #32
 80067f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff fb1d 	bl	8005e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006806:	bf00      	nop
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
	...

08006810 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006810:	b084      	sub	sp, #16
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	f107 001c 	add.w	r0, r7, #28
 800681e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	2b01      	cmp	r3, #1
 8006826:	d120      	bne.n	800686a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	4b20      	ldr	r3, [pc, #128]	; (80068bc <USB_CoreInit+0xac>)
 800683a:	4013      	ands	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800684c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684e:	2b01      	cmp	r3, #1
 8006850:	d105      	bne.n	800685e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fa96 	bl	8006d90 <USB_CoreReset>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
 8006868:	e010      	b.n	800688c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa8a 	bl	8006d90 <USB_CoreReset>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006884:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10b      	bne.n	80068aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f043 0206 	orr.w	r2, r3, #6
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f043 0220 	orr.w	r2, r3, #32
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068b6:	b004      	add	sp, #16
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	ffbdffbf 	.word	0xffbdffbf

080068c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f023 0201 	bic.w	r2, r3, #1
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d115      	bne.n	8006930 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006910:	2001      	movs	r0, #1
 8006912:	f7fb fc47 	bl	80021a4 <HAL_Delay>
      ms++;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3301      	adds	r3, #1
 800691a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fa29 	bl	8006d74 <USB_GetMode>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d01e      	beq.n	8006966 <USB_SetCurrentMode+0x84>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b31      	cmp	r3, #49	; 0x31
 800692c:	d9f0      	bls.n	8006910 <USB_SetCurrentMode+0x2e>
 800692e:	e01a      	b.n	8006966 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d115      	bne.n	8006962 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006942:	2001      	movs	r0, #1
 8006944:	f7fb fc2e 	bl	80021a4 <HAL_Delay>
      ms++;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	3301      	adds	r3, #1
 800694c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fa10 	bl	8006d74 <USB_GetMode>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <USB_SetCurrentMode+0x84>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b31      	cmp	r3, #49	; 0x31
 800695e:	d9f0      	bls.n	8006942 <USB_SetCurrentMode+0x60>
 8006960:	e001      	b.n	8006966 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e005      	b.n	8006972 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b32      	cmp	r3, #50	; 0x32
 800696a:	d101      	bne.n	8006970 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800697c:	b084      	sub	sp, #16
 800697e:	b580      	push	{r7, lr}
 8006980:	b086      	sub	sp, #24
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800698a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	e009      	b.n	80069b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	3340      	adds	r3, #64	; 0x40
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3301      	adds	r3, #1
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2b0e      	cmp	r3, #14
 80069b4:	d9f2      	bls.n	800699c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11c      	bne.n	80069f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ca:	f043 0302 	orr.w	r3, r3, #2
 80069ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e005      	b.n	8006a02 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a14:	4619      	mov	r1, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	680b      	ldr	r3, [r1, #0]
 8006a20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d10c      	bne.n	8006a42 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a2e:	2100      	movs	r1, #0
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f965 	bl	8006d00 <USB_SetDevSpeed>
 8006a36:	e008      	b.n	8006a4a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a38:	2101      	movs	r1, #1
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f960 	bl	8006d00 <USB_SetDevSpeed>
 8006a40:	e003      	b.n	8006a4a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a42:	2103      	movs	r1, #3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f95b 	bl	8006d00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a4a:	2110      	movs	r1, #16
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f8f3 	bl	8006c38 <USB_FlushTxFifo>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f91f 	bl	8006ca0 <USB_FlushRxFifo>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a72:	461a      	mov	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2300      	movs	r3, #0
 8006a82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a90:	2300      	movs	r3, #0
 8006a92:	613b      	str	r3, [r7, #16]
 8006a94:	e043      	b.n	8006b1e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006aac:	d118      	bne.n	8006ae0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	e013      	b.n	8006af2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	e008      	b.n	8006af2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	461a      	mov	r2, r3
 8006aee:	2300      	movs	r3, #0
 8006af0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	461a      	mov	r2, r3
 8006b00:	2300      	movs	r3, #0
 8006b02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b10:	461a      	mov	r2, r3
 8006b12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d3b7      	bcc.n	8006a96 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b26:	2300      	movs	r3, #0
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	e043      	b.n	8006bb4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b42:	d118      	bne.n	8006b76 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10a      	bne.n	8006b60 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	015a      	lsls	r2, r3, #5
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b56:	461a      	mov	r2, r3
 8006b58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	e013      	b.n	8006b88 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	e008      	b.n	8006b88 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b82:	461a      	mov	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	461a      	mov	r2, r3
 8006b96:	2300      	movs	r3, #0
 8006b98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d3b7      	bcc.n	8006b2c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006bdc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f043 0210 	orr.w	r2, r3, #16
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	4b0e      	ldr	r3, [pc, #56]	; (8006c30 <USB_DevInit+0x2b4>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	f043 0208 	orr.w	r2, r3, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d105      	bne.n	8006c20 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	699a      	ldr	r2, [r3, #24]
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <USB_DevInit+0x2b8>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c2c:	b004      	add	sp, #16
 8006c2e:	4770      	bx	lr
 8006c30:	803c3800 	.word	0x803c3800
 8006c34:	40000004 	.word	0x40000004

08006c38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <USB_FlushTxFifo+0x64>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d901      	bls.n	8006c58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e01b      	b.n	8006c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	daf2      	bge.n	8006c46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	019b      	lsls	r3, r3, #6
 8006c68:	f043 0220 	orr.w	r2, r3, #32
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <USB_FlushTxFifo+0x64>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e006      	b.n	8006c90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d0f0      	beq.n	8006c70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	00030d40 	.word	0x00030d40

08006ca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <USB_FlushRxFifo+0x5c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e018      	b.n	8006cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	daf2      	bge.n	8006cac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2210      	movs	r2, #16
 8006cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a08      	ldr	r2, [pc, #32]	; (8006cfc <USB_FlushRxFifo+0x5c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d901      	bls.n	8006ce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e006      	b.n	8006cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f003 0310 	and.w	r3, r3, #16
 8006cea:	2b10      	cmp	r3, #16
 8006cec:	d0f0      	beq.n	8006cd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	00030d40 	.word	0x00030d40

08006d00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d60:	f043 0302 	orr.w	r3, r3, #2
 8006d64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	f003 0301 	and.w	r3, r3, #1
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4a13      	ldr	r2, [pc, #76]	; (8006df4 <USB_CoreReset+0x64>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e01b      	b.n	8006de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	daf2      	bge.n	8006d9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4a09      	ldr	r2, [pc, #36]	; (8006df4 <USB_CoreReset+0x64>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d901      	bls.n	8006dd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e006      	b.n	8006de6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d0f0      	beq.n	8006dc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	00030d40 	.word	0x00030d40

08006df8 <std>:
 8006df8:	2300      	movs	r3, #0
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	6183      	str	r3, [r0, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	2208      	movs	r2, #8
 8006e14:	305c      	adds	r0, #92	; 0x5c
 8006e16:	f000 f9f7 	bl	8007208 <memset>
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <std+0x58>)
 8006e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <std+0x5c>)
 8006e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e22:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <std+0x60>)
 8006e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e26:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <std+0x64>)
 8006e28:	6323      	str	r3, [r4, #48]	; 0x30
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <std+0x68>)
 8006e2c:	6224      	str	r4, [r4, #32]
 8006e2e:	429c      	cmp	r4, r3
 8006e30:	d006      	beq.n	8006e40 <std+0x48>
 8006e32:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e36:	4294      	cmp	r4, r2
 8006e38:	d002      	beq.n	8006e40 <std+0x48>
 8006e3a:	33d0      	adds	r3, #208	; 0xd0
 8006e3c:	429c      	cmp	r4, r3
 8006e3e:	d105      	bne.n	8006e4c <std+0x54>
 8006e40:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e48:	f000 ba56 	b.w	80072f8 <__retarget_lock_init_recursive>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	bf00      	nop
 8006e50:	08007059 	.word	0x08007059
 8006e54:	0800707b 	.word	0x0800707b
 8006e58:	080070b3 	.word	0x080070b3
 8006e5c:	080070d7 	.word	0x080070d7
 8006e60:	20004d54 	.word	0x20004d54

08006e64 <stdio_exit_handler>:
 8006e64:	4a02      	ldr	r2, [pc, #8]	; (8006e70 <stdio_exit_handler+0xc>)
 8006e66:	4903      	ldr	r1, [pc, #12]	; (8006e74 <stdio_exit_handler+0x10>)
 8006e68:	4803      	ldr	r0, [pc, #12]	; (8006e78 <stdio_exit_handler+0x14>)
 8006e6a:	f000 b869 	b.w	8006f40 <_fwalk_sglue>
 8006e6e:	bf00      	nop
 8006e70:	20000010 	.word	0x20000010
 8006e74:	08007ba5 	.word	0x08007ba5
 8006e78:	2000001c 	.word	0x2000001c

08006e7c <cleanup_stdio>:
 8006e7c:	6841      	ldr	r1, [r0, #4]
 8006e7e:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <cleanup_stdio+0x34>)
 8006e80:	4299      	cmp	r1, r3
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	d001      	beq.n	8006e8c <cleanup_stdio+0x10>
 8006e88:	f000 fe8c 	bl	8007ba4 <_fflush_r>
 8006e8c:	68a1      	ldr	r1, [r4, #8]
 8006e8e:	4b09      	ldr	r3, [pc, #36]	; (8006eb4 <cleanup_stdio+0x38>)
 8006e90:	4299      	cmp	r1, r3
 8006e92:	d002      	beq.n	8006e9a <cleanup_stdio+0x1e>
 8006e94:	4620      	mov	r0, r4
 8006e96:	f000 fe85 	bl	8007ba4 <_fflush_r>
 8006e9a:	68e1      	ldr	r1, [r4, #12]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <cleanup_stdio+0x3c>)
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d004      	beq.n	8006eac <cleanup_stdio+0x30>
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea8:	f000 be7c 	b.w	8007ba4 <_fflush_r>
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	bf00      	nop
 8006eb0:	20004d54 	.word	0x20004d54
 8006eb4:	20004dbc 	.word	0x20004dbc
 8006eb8:	20004e24 	.word	0x20004e24

08006ebc <global_stdio_init.part.0>:
 8006ebc:	b510      	push	{r4, lr}
 8006ebe:	4b0b      	ldr	r3, [pc, #44]	; (8006eec <global_stdio_init.part.0+0x30>)
 8006ec0:	4c0b      	ldr	r4, [pc, #44]	; (8006ef0 <global_stdio_init.part.0+0x34>)
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	; (8006ef4 <global_stdio_init.part.0+0x38>)
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2104      	movs	r1, #4
 8006ecc:	f7ff ff94 	bl	8006df8 <std>
 8006ed0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	2109      	movs	r1, #9
 8006ed8:	f7ff ff8e 	bl	8006df8 <std>
 8006edc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee6:	2112      	movs	r1, #18
 8006ee8:	f7ff bf86 	b.w	8006df8 <std>
 8006eec:	20004e8c 	.word	0x20004e8c
 8006ef0:	20004d54 	.word	0x20004d54
 8006ef4:	08006e65 	.word	0x08006e65

08006ef8 <__sfp_lock_acquire>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__sfp_lock_acquire+0x8>)
 8006efa:	f000 b9fe 	b.w	80072fa <__retarget_lock_acquire_recursive>
 8006efe:	bf00      	nop
 8006f00:	20004e95 	.word	0x20004e95

08006f04 <__sfp_lock_release>:
 8006f04:	4801      	ldr	r0, [pc, #4]	; (8006f0c <__sfp_lock_release+0x8>)
 8006f06:	f000 b9f9 	b.w	80072fc <__retarget_lock_release_recursive>
 8006f0a:	bf00      	nop
 8006f0c:	20004e95 	.word	0x20004e95

08006f10 <__sinit>:
 8006f10:	b510      	push	{r4, lr}
 8006f12:	4604      	mov	r4, r0
 8006f14:	f7ff fff0 	bl	8006ef8 <__sfp_lock_acquire>
 8006f18:	6a23      	ldr	r3, [r4, #32]
 8006f1a:	b11b      	cbz	r3, 8006f24 <__sinit+0x14>
 8006f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f20:	f7ff bff0 	b.w	8006f04 <__sfp_lock_release>
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <__sinit+0x28>)
 8006f26:	6223      	str	r3, [r4, #32]
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <__sinit+0x2c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1f5      	bne.n	8006f1c <__sinit+0xc>
 8006f30:	f7ff ffc4 	bl	8006ebc <global_stdio_init.part.0>
 8006f34:	e7f2      	b.n	8006f1c <__sinit+0xc>
 8006f36:	bf00      	nop
 8006f38:	08006e7d 	.word	0x08006e7d
 8006f3c:	20004e8c 	.word	0x20004e8c

08006f40 <_fwalk_sglue>:
 8006f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f44:	4607      	mov	r7, r0
 8006f46:	4688      	mov	r8, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f50:	f1b9 0901 	subs.w	r9, r9, #1
 8006f54:	d505      	bpl.n	8006f62 <_fwalk_sglue+0x22>
 8006f56:	6824      	ldr	r4, [r4, #0]
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	d1f7      	bne.n	8006f4c <_fwalk_sglue+0xc>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d907      	bls.n	8006f78 <_fwalk_sglue+0x38>
 8006f68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	d003      	beq.n	8006f78 <_fwalk_sglue+0x38>
 8006f70:	4629      	mov	r1, r5
 8006f72:	4638      	mov	r0, r7
 8006f74:	47c0      	blx	r8
 8006f76:	4306      	orrs	r6, r0
 8006f78:	3568      	adds	r5, #104	; 0x68
 8006f7a:	e7e9      	b.n	8006f50 <_fwalk_sglue+0x10>

08006f7c <iprintf>:
 8006f7c:	b40f      	push	{r0, r1, r2, r3}
 8006f7e:	b507      	push	{r0, r1, r2, lr}
 8006f80:	4906      	ldr	r1, [pc, #24]	; (8006f9c <iprintf+0x20>)
 8006f82:	ab04      	add	r3, sp, #16
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8a:	6881      	ldr	r1, [r0, #8]
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	f000 fad9 	bl	8007544 <_vfiprintf_r>
 8006f92:	b003      	add	sp, #12
 8006f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f98:	b004      	add	sp, #16
 8006f9a:	4770      	bx	lr
 8006f9c:	20000068 	.word	0x20000068

08006fa0 <_puts_r>:
 8006fa0:	6a03      	ldr	r3, [r0, #32]
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	6884      	ldr	r4, [r0, #8]
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	460e      	mov	r6, r1
 8006faa:	b90b      	cbnz	r3, 8006fb0 <_puts_r+0x10>
 8006fac:	f7ff ffb0 	bl	8006f10 <__sinit>
 8006fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	d405      	bmi.n	8006fc2 <_puts_r+0x22>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <_puts_r+0x22>
 8006fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fbe:	f000 f99c 	bl	80072fa <__retarget_lock_acquire_recursive>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	0719      	lsls	r1, r3, #28
 8006fc6:	d513      	bpl.n	8006ff0 <_puts_r+0x50>
 8006fc8:	6923      	ldr	r3, [r4, #16]
 8006fca:	b18b      	cbz	r3, 8006ff0 <_puts_r+0x50>
 8006fcc:	3e01      	subs	r6, #1
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	60a3      	str	r3, [r4, #8]
 8006fd8:	b9e9      	cbnz	r1, 8007016 <_puts_r+0x76>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	da2e      	bge.n	800703c <_puts_r+0x9c>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	210a      	movs	r1, #10
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	f000 f87b 	bl	80070de <__swbuf_r>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d007      	beq.n	8006ffc <_puts_r+0x5c>
 8006fec:	250a      	movs	r5, #10
 8006fee:	e007      	b.n	8007000 <_puts_r+0x60>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f000 f8b0 	bl	8007158 <__swsetup_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d0e7      	beq.n	8006fcc <_puts_r+0x2c>
 8006ffc:	f04f 35ff 	mov.w	r5, #4294967295
 8007000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007002:	07da      	lsls	r2, r3, #31
 8007004:	d405      	bmi.n	8007012 <_puts_r+0x72>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	059b      	lsls	r3, r3, #22
 800700a:	d402      	bmi.n	8007012 <_puts_r+0x72>
 800700c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800700e:	f000 f975 	bl	80072fc <__retarget_lock_release_recursive>
 8007012:	4628      	mov	r0, r5
 8007014:	bd70      	pop	{r4, r5, r6, pc}
 8007016:	2b00      	cmp	r3, #0
 8007018:	da04      	bge.n	8007024 <_puts_r+0x84>
 800701a:	69a2      	ldr	r2, [r4, #24]
 800701c:	429a      	cmp	r2, r3
 800701e:	dc06      	bgt.n	800702e <_puts_r+0x8e>
 8007020:	290a      	cmp	r1, #10
 8007022:	d004      	beq.n	800702e <_puts_r+0x8e>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	6022      	str	r2, [r4, #0]
 800702a:	7019      	strb	r1, [r3, #0]
 800702c:	e7cf      	b.n	8006fce <_puts_r+0x2e>
 800702e:	4622      	mov	r2, r4
 8007030:	4628      	mov	r0, r5
 8007032:	f000 f854 	bl	80070de <__swbuf_r>
 8007036:	3001      	adds	r0, #1
 8007038:	d1c9      	bne.n	8006fce <_puts_r+0x2e>
 800703a:	e7df      	b.n	8006ffc <_puts_r+0x5c>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	250a      	movs	r5, #10
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	701d      	strb	r5, [r3, #0]
 8007046:	e7db      	b.n	8007000 <_puts_r+0x60>

08007048 <puts>:
 8007048:	4b02      	ldr	r3, [pc, #8]	; (8007054 <puts+0xc>)
 800704a:	4601      	mov	r1, r0
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	f7ff bfa7 	b.w	8006fa0 <_puts_r>
 8007052:	bf00      	nop
 8007054:	20000068 	.word	0x20000068

08007058 <__sread>:
 8007058:	b510      	push	{r4, lr}
 800705a:	460c      	mov	r4, r1
 800705c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007060:	f000 f8fc 	bl	800725c <_read_r>
 8007064:	2800      	cmp	r0, #0
 8007066:	bfab      	itete	ge
 8007068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800706a:	89a3      	ldrhlt	r3, [r4, #12]
 800706c:	181b      	addge	r3, r3, r0
 800706e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007072:	bfac      	ite	ge
 8007074:	6563      	strge	r3, [r4, #84]	; 0x54
 8007076:	81a3      	strhlt	r3, [r4, #12]
 8007078:	bd10      	pop	{r4, pc}

0800707a <__swrite>:
 800707a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707e:	461f      	mov	r7, r3
 8007080:	898b      	ldrh	r3, [r1, #12]
 8007082:	05db      	lsls	r3, r3, #23
 8007084:	4605      	mov	r5, r0
 8007086:	460c      	mov	r4, r1
 8007088:	4616      	mov	r6, r2
 800708a:	d505      	bpl.n	8007098 <__swrite+0x1e>
 800708c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007090:	2302      	movs	r3, #2
 8007092:	2200      	movs	r2, #0
 8007094:	f000 f8d0 	bl	8007238 <_lseek_r>
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	4632      	mov	r2, r6
 80070a6:	463b      	mov	r3, r7
 80070a8:	4628      	mov	r0, r5
 80070aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070ae:	f000 b8e7 	b.w	8007280 <_write_r>

080070b2 <__sseek>:
 80070b2:	b510      	push	{r4, lr}
 80070b4:	460c      	mov	r4, r1
 80070b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ba:	f000 f8bd 	bl	8007238 <_lseek_r>
 80070be:	1c43      	adds	r3, r0, #1
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	bf15      	itete	ne
 80070c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070ce:	81a3      	strheq	r3, [r4, #12]
 80070d0:	bf18      	it	ne
 80070d2:	81a3      	strhne	r3, [r4, #12]
 80070d4:	bd10      	pop	{r4, pc}

080070d6 <__sclose>:
 80070d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070da:	f000 b89d 	b.w	8007218 <_close_r>

080070de <__swbuf_r>:
 80070de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e0:	460e      	mov	r6, r1
 80070e2:	4614      	mov	r4, r2
 80070e4:	4605      	mov	r5, r0
 80070e6:	b118      	cbz	r0, 80070f0 <__swbuf_r+0x12>
 80070e8:	6a03      	ldr	r3, [r0, #32]
 80070ea:	b90b      	cbnz	r3, 80070f0 <__swbuf_r+0x12>
 80070ec:	f7ff ff10 	bl	8006f10 <__sinit>
 80070f0:	69a3      	ldr	r3, [r4, #24]
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	071a      	lsls	r2, r3, #28
 80070f8:	d525      	bpl.n	8007146 <__swbuf_r+0x68>
 80070fa:	6923      	ldr	r3, [r4, #16]
 80070fc:	b31b      	cbz	r3, 8007146 <__swbuf_r+0x68>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	1a98      	subs	r0, r3, r2
 8007104:	6963      	ldr	r3, [r4, #20]
 8007106:	b2f6      	uxtb	r6, r6
 8007108:	4283      	cmp	r3, r0
 800710a:	4637      	mov	r7, r6
 800710c:	dc04      	bgt.n	8007118 <__swbuf_r+0x3a>
 800710e:	4621      	mov	r1, r4
 8007110:	4628      	mov	r0, r5
 8007112:	f000 fd47 	bl	8007ba4 <_fflush_r>
 8007116:	b9e0      	cbnz	r0, 8007152 <__swbuf_r+0x74>
 8007118:	68a3      	ldr	r3, [r4, #8]
 800711a:	3b01      	subs	r3, #1
 800711c:	60a3      	str	r3, [r4, #8]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	6022      	str	r2, [r4, #0]
 8007124:	701e      	strb	r6, [r3, #0]
 8007126:	6962      	ldr	r2, [r4, #20]
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	429a      	cmp	r2, r3
 800712c:	d004      	beq.n	8007138 <__swbuf_r+0x5a>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	07db      	lsls	r3, r3, #31
 8007132:	d506      	bpl.n	8007142 <__swbuf_r+0x64>
 8007134:	2e0a      	cmp	r6, #10
 8007136:	d104      	bne.n	8007142 <__swbuf_r+0x64>
 8007138:	4621      	mov	r1, r4
 800713a:	4628      	mov	r0, r5
 800713c:	f000 fd32 	bl	8007ba4 <_fflush_r>
 8007140:	b938      	cbnz	r0, 8007152 <__swbuf_r+0x74>
 8007142:	4638      	mov	r0, r7
 8007144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007146:	4621      	mov	r1, r4
 8007148:	4628      	mov	r0, r5
 800714a:	f000 f805 	bl	8007158 <__swsetup_r>
 800714e:	2800      	cmp	r0, #0
 8007150:	d0d5      	beq.n	80070fe <__swbuf_r+0x20>
 8007152:	f04f 37ff 	mov.w	r7, #4294967295
 8007156:	e7f4      	b.n	8007142 <__swbuf_r+0x64>

08007158 <__swsetup_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4b2a      	ldr	r3, [pc, #168]	; (8007204 <__swsetup_r+0xac>)
 800715c:	4605      	mov	r5, r0
 800715e:	6818      	ldr	r0, [r3, #0]
 8007160:	460c      	mov	r4, r1
 8007162:	b118      	cbz	r0, 800716c <__swsetup_r+0x14>
 8007164:	6a03      	ldr	r3, [r0, #32]
 8007166:	b90b      	cbnz	r3, 800716c <__swsetup_r+0x14>
 8007168:	f7ff fed2 	bl	8006f10 <__sinit>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007172:	0718      	lsls	r0, r3, #28
 8007174:	d422      	bmi.n	80071bc <__swsetup_r+0x64>
 8007176:	06d9      	lsls	r1, r3, #27
 8007178:	d407      	bmi.n	800718a <__swsetup_r+0x32>
 800717a:	2309      	movs	r3, #9
 800717c:	602b      	str	r3, [r5, #0]
 800717e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e034      	b.n	80071f4 <__swsetup_r+0x9c>
 800718a:	0758      	lsls	r0, r3, #29
 800718c:	d512      	bpl.n	80071b4 <__swsetup_r+0x5c>
 800718e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007190:	b141      	cbz	r1, 80071a4 <__swsetup_r+0x4c>
 8007192:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007196:	4299      	cmp	r1, r3
 8007198:	d002      	beq.n	80071a0 <__swsetup_r+0x48>
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f8b0 	bl	8007300 <_free_r>
 80071a0:	2300      	movs	r3, #0
 80071a2:	6363      	str	r3, [r4, #52]	; 0x34
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	2300      	movs	r3, #0
 80071ae:	6063      	str	r3, [r4, #4]
 80071b0:	6923      	ldr	r3, [r4, #16]
 80071b2:	6023      	str	r3, [r4, #0]
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	f043 0308 	orr.w	r3, r3, #8
 80071ba:	81a3      	strh	r3, [r4, #12]
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	b94b      	cbnz	r3, 80071d4 <__swsetup_r+0x7c>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ca:	d003      	beq.n	80071d4 <__swsetup_r+0x7c>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fd36 	bl	8007c40 <__smakebuf_r>
 80071d4:	89a0      	ldrh	r0, [r4, #12]
 80071d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071da:	f010 0301 	ands.w	r3, r0, #1
 80071de:	d00a      	beq.n	80071f6 <__swsetup_r+0x9e>
 80071e0:	2300      	movs	r3, #0
 80071e2:	60a3      	str	r3, [r4, #8]
 80071e4:	6963      	ldr	r3, [r4, #20]
 80071e6:	425b      	negs	r3, r3
 80071e8:	61a3      	str	r3, [r4, #24]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	b943      	cbnz	r3, 8007200 <__swsetup_r+0xa8>
 80071ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071f2:	d1c4      	bne.n	800717e <__swsetup_r+0x26>
 80071f4:	bd38      	pop	{r3, r4, r5, pc}
 80071f6:	0781      	lsls	r1, r0, #30
 80071f8:	bf58      	it	pl
 80071fa:	6963      	ldrpl	r3, [r4, #20]
 80071fc:	60a3      	str	r3, [r4, #8]
 80071fe:	e7f4      	b.n	80071ea <__swsetup_r+0x92>
 8007200:	2000      	movs	r0, #0
 8007202:	e7f7      	b.n	80071f4 <__swsetup_r+0x9c>
 8007204:	20000068 	.word	0x20000068

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <_close_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d06      	ldr	r5, [pc, #24]	; (8007234 <_close_r+0x1c>)
 800721c:	2300      	movs	r3, #0
 800721e:	4604      	mov	r4, r0
 8007220:	4608      	mov	r0, r1
 8007222:	602b      	str	r3, [r5, #0]
 8007224:	f7fa febb 	bl	8001f9e <_close>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d102      	bne.n	8007232 <_close_r+0x1a>
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	b103      	cbz	r3, 8007232 <_close_r+0x1a>
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	bd38      	pop	{r3, r4, r5, pc}
 8007234:	20004e90 	.word	0x20004e90

08007238 <_lseek_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4d07      	ldr	r5, [pc, #28]	; (8007258 <_lseek_r+0x20>)
 800723c:	4604      	mov	r4, r0
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	2200      	movs	r2, #0
 8007244:	602a      	str	r2, [r5, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f7fa fed0 	bl	8001fec <_lseek>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_lseek_r+0x1e>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_lseek_r+0x1e>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20004e90 	.word	0x20004e90

0800725c <_read_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	; (800727c <_read_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fa fe5e 	bl	8001f2c <_read>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_read_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_read_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20004e90 	.word	0x20004e90

08007280 <_write_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	; (80072a0 <_write_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fa fe69 	bl	8001f66 <_write>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_write_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_write_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	20004e90 	.word	0x20004e90

080072a4 <__errno>:
 80072a4:	4b01      	ldr	r3, [pc, #4]	; (80072ac <__errno+0x8>)
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	20000068 	.word	0x20000068

080072b0 <__libc_init_array>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	4d0d      	ldr	r5, [pc, #52]	; (80072e8 <__libc_init_array+0x38>)
 80072b4:	4c0d      	ldr	r4, [pc, #52]	; (80072ec <__libc_init_array+0x3c>)
 80072b6:	1b64      	subs	r4, r4, r5
 80072b8:	10a4      	asrs	r4, r4, #2
 80072ba:	2600      	movs	r6, #0
 80072bc:	42a6      	cmp	r6, r4
 80072be:	d109      	bne.n	80072d4 <__libc_init_array+0x24>
 80072c0:	4d0b      	ldr	r5, [pc, #44]	; (80072f0 <__libc_init_array+0x40>)
 80072c2:	4c0c      	ldr	r4, [pc, #48]	; (80072f4 <__libc_init_array+0x44>)
 80072c4:	f000 fd2a 	bl	8007d1c <_init>
 80072c8:	1b64      	subs	r4, r4, r5
 80072ca:	10a4      	asrs	r4, r4, #2
 80072cc:	2600      	movs	r6, #0
 80072ce:	42a6      	cmp	r6, r4
 80072d0:	d105      	bne.n	80072de <__libc_init_array+0x2e>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d8:	4798      	blx	r3
 80072da:	3601      	adds	r6, #1
 80072dc:	e7ee      	b.n	80072bc <__libc_init_array+0xc>
 80072de:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e2:	4798      	blx	r3
 80072e4:	3601      	adds	r6, #1
 80072e6:	e7f2      	b.n	80072ce <__libc_init_array+0x1e>
 80072e8:	08007f58 	.word	0x08007f58
 80072ec:	08007f58 	.word	0x08007f58
 80072f0:	08007f58 	.word	0x08007f58
 80072f4:	08007f5c 	.word	0x08007f5c

080072f8 <__retarget_lock_init_recursive>:
 80072f8:	4770      	bx	lr

080072fa <__retarget_lock_acquire_recursive>:
 80072fa:	4770      	bx	lr

080072fc <__retarget_lock_release_recursive>:
 80072fc:	4770      	bx	lr
	...

08007300 <_free_r>:
 8007300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007302:	2900      	cmp	r1, #0
 8007304:	d044      	beq.n	8007390 <_free_r+0x90>
 8007306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800730a:	9001      	str	r0, [sp, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f1a1 0404 	sub.w	r4, r1, #4
 8007312:	bfb8      	it	lt
 8007314:	18e4      	addlt	r4, r4, r3
 8007316:	f000 f8df 	bl	80074d8 <__malloc_lock>
 800731a:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <_free_r+0x94>)
 800731c:	9801      	ldr	r0, [sp, #4]
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	b933      	cbnz	r3, 8007330 <_free_r+0x30>
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	6014      	str	r4, [r2, #0]
 8007326:	b003      	add	sp, #12
 8007328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800732c:	f000 b8da 	b.w	80074e4 <__malloc_unlock>
 8007330:	42a3      	cmp	r3, r4
 8007332:	d908      	bls.n	8007346 <_free_r+0x46>
 8007334:	6825      	ldr	r5, [r4, #0]
 8007336:	1961      	adds	r1, r4, r5
 8007338:	428b      	cmp	r3, r1
 800733a:	bf01      	itttt	eq
 800733c:	6819      	ldreq	r1, [r3, #0]
 800733e:	685b      	ldreq	r3, [r3, #4]
 8007340:	1949      	addeq	r1, r1, r5
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	e7ed      	b.n	8007322 <_free_r+0x22>
 8007346:	461a      	mov	r2, r3
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	b10b      	cbz	r3, 8007350 <_free_r+0x50>
 800734c:	42a3      	cmp	r3, r4
 800734e:	d9fa      	bls.n	8007346 <_free_r+0x46>
 8007350:	6811      	ldr	r1, [r2, #0]
 8007352:	1855      	adds	r5, r2, r1
 8007354:	42a5      	cmp	r5, r4
 8007356:	d10b      	bne.n	8007370 <_free_r+0x70>
 8007358:	6824      	ldr	r4, [r4, #0]
 800735a:	4421      	add	r1, r4
 800735c:	1854      	adds	r4, r2, r1
 800735e:	42a3      	cmp	r3, r4
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	d1e0      	bne.n	8007326 <_free_r+0x26>
 8007364:	681c      	ldr	r4, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	6053      	str	r3, [r2, #4]
 800736a:	440c      	add	r4, r1
 800736c:	6014      	str	r4, [r2, #0]
 800736e:	e7da      	b.n	8007326 <_free_r+0x26>
 8007370:	d902      	bls.n	8007378 <_free_r+0x78>
 8007372:	230c      	movs	r3, #12
 8007374:	6003      	str	r3, [r0, #0]
 8007376:	e7d6      	b.n	8007326 <_free_r+0x26>
 8007378:	6825      	ldr	r5, [r4, #0]
 800737a:	1961      	adds	r1, r4, r5
 800737c:	428b      	cmp	r3, r1
 800737e:	bf04      	itt	eq
 8007380:	6819      	ldreq	r1, [r3, #0]
 8007382:	685b      	ldreq	r3, [r3, #4]
 8007384:	6063      	str	r3, [r4, #4]
 8007386:	bf04      	itt	eq
 8007388:	1949      	addeq	r1, r1, r5
 800738a:	6021      	streq	r1, [r4, #0]
 800738c:	6054      	str	r4, [r2, #4]
 800738e:	e7ca      	b.n	8007326 <_free_r+0x26>
 8007390:	b003      	add	sp, #12
 8007392:	bd30      	pop	{r4, r5, pc}
 8007394:	20004e98 	.word	0x20004e98

08007398 <sbrk_aligned>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4e0e      	ldr	r6, [pc, #56]	; (80073d4 <sbrk_aligned+0x3c>)
 800739c:	460c      	mov	r4, r1
 800739e:	6831      	ldr	r1, [r6, #0]
 80073a0:	4605      	mov	r5, r0
 80073a2:	b911      	cbnz	r1, 80073aa <sbrk_aligned+0x12>
 80073a4:	f000 fcaa 	bl	8007cfc <_sbrk_r>
 80073a8:	6030      	str	r0, [r6, #0]
 80073aa:	4621      	mov	r1, r4
 80073ac:	4628      	mov	r0, r5
 80073ae:	f000 fca5 	bl	8007cfc <_sbrk_r>
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d00a      	beq.n	80073cc <sbrk_aligned+0x34>
 80073b6:	1cc4      	adds	r4, r0, #3
 80073b8:	f024 0403 	bic.w	r4, r4, #3
 80073bc:	42a0      	cmp	r0, r4
 80073be:	d007      	beq.n	80073d0 <sbrk_aligned+0x38>
 80073c0:	1a21      	subs	r1, r4, r0
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 fc9a 	bl	8007cfc <_sbrk_r>
 80073c8:	3001      	adds	r0, #1
 80073ca:	d101      	bne.n	80073d0 <sbrk_aligned+0x38>
 80073cc:	f04f 34ff 	mov.w	r4, #4294967295
 80073d0:	4620      	mov	r0, r4
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	20004e9c 	.word	0x20004e9c

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4607      	mov	r7, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d905      	bls.n	8007400 <_malloc_r+0x28>
 80073f4:	230c      	movs	r3, #12
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	2600      	movs	r6, #0
 80073fa:	4630      	mov	r0, r6
 80073fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007400:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80074d4 <_malloc_r+0xfc>
 8007404:	f000 f868 	bl	80074d8 <__malloc_lock>
 8007408:	f8d8 3000 	ldr.w	r3, [r8]
 800740c:	461c      	mov	r4, r3
 800740e:	bb5c      	cbnz	r4, 8007468 <_malloc_r+0x90>
 8007410:	4629      	mov	r1, r5
 8007412:	4638      	mov	r0, r7
 8007414:	f7ff ffc0 	bl	8007398 <sbrk_aligned>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	4604      	mov	r4, r0
 800741c:	d155      	bne.n	80074ca <_malloc_r+0xf2>
 800741e:	f8d8 4000 	ldr.w	r4, [r8]
 8007422:	4626      	mov	r6, r4
 8007424:	2e00      	cmp	r6, #0
 8007426:	d145      	bne.n	80074b4 <_malloc_r+0xdc>
 8007428:	2c00      	cmp	r4, #0
 800742a:	d048      	beq.n	80074be <_malloc_r+0xe6>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	4631      	mov	r1, r6
 8007430:	4638      	mov	r0, r7
 8007432:	eb04 0903 	add.w	r9, r4, r3
 8007436:	f000 fc61 	bl	8007cfc <_sbrk_r>
 800743a:	4581      	cmp	r9, r0
 800743c:	d13f      	bne.n	80074be <_malloc_r+0xe6>
 800743e:	6821      	ldr	r1, [r4, #0]
 8007440:	1a6d      	subs	r5, r5, r1
 8007442:	4629      	mov	r1, r5
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff ffa7 	bl	8007398 <sbrk_aligned>
 800744a:	3001      	adds	r0, #1
 800744c:	d037      	beq.n	80074be <_malloc_r+0xe6>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	442b      	add	r3, r5
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	f8d8 3000 	ldr.w	r3, [r8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d038      	beq.n	80074ce <_malloc_r+0xf6>
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	42a2      	cmp	r2, r4
 8007460:	d12b      	bne.n	80074ba <_malloc_r+0xe2>
 8007462:	2200      	movs	r2, #0
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	e00f      	b.n	8007488 <_malloc_r+0xb0>
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	1b52      	subs	r2, r2, r5
 800746c:	d41f      	bmi.n	80074ae <_malloc_r+0xd6>
 800746e:	2a0b      	cmp	r2, #11
 8007470:	d917      	bls.n	80074a2 <_malloc_r+0xca>
 8007472:	1961      	adds	r1, r4, r5
 8007474:	42a3      	cmp	r3, r4
 8007476:	6025      	str	r5, [r4, #0]
 8007478:	bf18      	it	ne
 800747a:	6059      	strne	r1, [r3, #4]
 800747c:	6863      	ldr	r3, [r4, #4]
 800747e:	bf08      	it	eq
 8007480:	f8c8 1000 	streq.w	r1, [r8]
 8007484:	5162      	str	r2, [r4, r5]
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	4638      	mov	r0, r7
 800748a:	f104 060b 	add.w	r6, r4, #11
 800748e:	f000 f829 	bl	80074e4 <__malloc_unlock>
 8007492:	f026 0607 	bic.w	r6, r6, #7
 8007496:	1d23      	adds	r3, r4, #4
 8007498:	1af2      	subs	r2, r6, r3
 800749a:	d0ae      	beq.n	80073fa <_malloc_r+0x22>
 800749c:	1b9b      	subs	r3, r3, r6
 800749e:	50a3      	str	r3, [r4, r2]
 80074a0:	e7ab      	b.n	80073fa <_malloc_r+0x22>
 80074a2:	42a3      	cmp	r3, r4
 80074a4:	6862      	ldr	r2, [r4, #4]
 80074a6:	d1dd      	bne.n	8007464 <_malloc_r+0x8c>
 80074a8:	f8c8 2000 	str.w	r2, [r8]
 80074ac:	e7ec      	b.n	8007488 <_malloc_r+0xb0>
 80074ae:	4623      	mov	r3, r4
 80074b0:	6864      	ldr	r4, [r4, #4]
 80074b2:	e7ac      	b.n	800740e <_malloc_r+0x36>
 80074b4:	4634      	mov	r4, r6
 80074b6:	6876      	ldr	r6, [r6, #4]
 80074b8:	e7b4      	b.n	8007424 <_malloc_r+0x4c>
 80074ba:	4613      	mov	r3, r2
 80074bc:	e7cc      	b.n	8007458 <_malloc_r+0x80>
 80074be:	230c      	movs	r3, #12
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4638      	mov	r0, r7
 80074c4:	f000 f80e 	bl	80074e4 <__malloc_unlock>
 80074c8:	e797      	b.n	80073fa <_malloc_r+0x22>
 80074ca:	6025      	str	r5, [r4, #0]
 80074cc:	e7dc      	b.n	8007488 <_malloc_r+0xb0>
 80074ce:	605b      	str	r3, [r3, #4]
 80074d0:	deff      	udf	#255	; 0xff
 80074d2:	bf00      	nop
 80074d4:	20004e98 	.word	0x20004e98

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff bf0e 	b.w	80072fa <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	20004e94 	.word	0x20004e94

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff bf09 	b.w	80072fc <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	20004e94 	.word	0x20004e94

080074f0 <__sfputc_r>:
 80074f0:	6893      	ldr	r3, [r2, #8]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	b410      	push	{r4}
 80074f8:	6093      	str	r3, [r2, #8]
 80074fa:	da08      	bge.n	800750e <__sfputc_r+0x1e>
 80074fc:	6994      	ldr	r4, [r2, #24]
 80074fe:	42a3      	cmp	r3, r4
 8007500:	db01      	blt.n	8007506 <__sfputc_r+0x16>
 8007502:	290a      	cmp	r1, #10
 8007504:	d103      	bne.n	800750e <__sfputc_r+0x1e>
 8007506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800750a:	f7ff bde8 	b.w	80070de <__swbuf_r>
 800750e:	6813      	ldr	r3, [r2, #0]
 8007510:	1c58      	adds	r0, r3, #1
 8007512:	6010      	str	r0, [r2, #0]
 8007514:	7019      	strb	r1, [r3, #0]
 8007516:	4608      	mov	r0, r1
 8007518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800751c:	4770      	bx	lr

0800751e <__sfputs_r>:
 800751e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	4614      	mov	r4, r2
 8007526:	18d5      	adds	r5, r2, r3
 8007528:	42ac      	cmp	r4, r5
 800752a:	d101      	bne.n	8007530 <__sfputs_r+0x12>
 800752c:	2000      	movs	r0, #0
 800752e:	e007      	b.n	8007540 <__sfputs_r+0x22>
 8007530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007534:	463a      	mov	r2, r7
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff ffda 	bl	80074f0 <__sfputc_r>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d1f3      	bne.n	8007528 <__sfputs_r+0xa>
 8007540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007544 <_vfiprintf_r>:
 8007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007548:	460d      	mov	r5, r1
 800754a:	b09d      	sub	sp, #116	; 0x74
 800754c:	4614      	mov	r4, r2
 800754e:	4698      	mov	r8, r3
 8007550:	4606      	mov	r6, r0
 8007552:	b118      	cbz	r0, 800755c <_vfiprintf_r+0x18>
 8007554:	6a03      	ldr	r3, [r0, #32]
 8007556:	b90b      	cbnz	r3, 800755c <_vfiprintf_r+0x18>
 8007558:	f7ff fcda 	bl	8006f10 <__sinit>
 800755c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x2a>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x2a>
 8007568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800756a:	f7ff fec6 	bl	80072fa <__retarget_lock_acquire_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	071b      	lsls	r3, r3, #28
 8007572:	d501      	bpl.n	8007578 <_vfiprintf_r+0x34>
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	b99b      	cbnz	r3, 80075a0 <_vfiprintf_r+0x5c>
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff fdec 	bl	8007158 <__swsetup_r>
 8007580:	b170      	cbz	r0, 80075a0 <_vfiprintf_r+0x5c>
 8007582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007584:	07dc      	lsls	r4, r3, #31
 8007586:	d504      	bpl.n	8007592 <_vfiprintf_r+0x4e>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b01d      	add	sp, #116	; 0x74
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	89ab      	ldrh	r3, [r5, #12]
 8007594:	0598      	lsls	r0, r3, #22
 8007596:	d4f7      	bmi.n	8007588 <_vfiprintf_r+0x44>
 8007598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800759a:	f7ff feaf 	bl	80072fc <__retarget_lock_release_recursive>
 800759e:	e7f3      	b.n	8007588 <_vfiprintf_r+0x44>
 80075a0:	2300      	movs	r3, #0
 80075a2:	9309      	str	r3, [sp, #36]	; 0x24
 80075a4:	2320      	movs	r3, #32
 80075a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ae:	2330      	movs	r3, #48	; 0x30
 80075b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007764 <_vfiprintf_r+0x220>
 80075b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075b8:	f04f 0901 	mov.w	r9, #1
 80075bc:	4623      	mov	r3, r4
 80075be:	469a      	mov	sl, r3
 80075c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075c4:	b10a      	cbz	r2, 80075ca <_vfiprintf_r+0x86>
 80075c6:	2a25      	cmp	r2, #37	; 0x25
 80075c8:	d1f9      	bne.n	80075be <_vfiprintf_r+0x7a>
 80075ca:	ebba 0b04 	subs.w	fp, sl, r4
 80075ce:	d00b      	beq.n	80075e8 <_vfiprintf_r+0xa4>
 80075d0:	465b      	mov	r3, fp
 80075d2:	4622      	mov	r2, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	4630      	mov	r0, r6
 80075d8:	f7ff ffa1 	bl	800751e <__sfputs_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	f000 80a9 	beq.w	8007734 <_vfiprintf_r+0x1f0>
 80075e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e4:	445a      	add	r2, fp
 80075e6:	9209      	str	r2, [sp, #36]	; 0x24
 80075e8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80a1 	beq.w	8007734 <_vfiprintf_r+0x1f0>
 80075f2:	2300      	movs	r3, #0
 80075f4:	f04f 32ff 	mov.w	r2, #4294967295
 80075f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075fc:	f10a 0a01 	add.w	sl, sl, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	9307      	str	r3, [sp, #28]
 8007604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007608:	931a      	str	r3, [sp, #104]	; 0x68
 800760a:	4654      	mov	r4, sl
 800760c:	2205      	movs	r2, #5
 800760e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007612:	4854      	ldr	r0, [pc, #336]	; (8007764 <_vfiprintf_r+0x220>)
 8007614:	f7f8 fe14 	bl	8000240 <memchr>
 8007618:	9a04      	ldr	r2, [sp, #16]
 800761a:	b9d8      	cbnz	r0, 8007654 <_vfiprintf_r+0x110>
 800761c:	06d1      	lsls	r1, r2, #27
 800761e:	bf44      	itt	mi
 8007620:	2320      	movmi	r3, #32
 8007622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007626:	0713      	lsls	r3, r2, #28
 8007628:	bf44      	itt	mi
 800762a:	232b      	movmi	r3, #43	; 0x2b
 800762c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007630:	f89a 3000 	ldrb.w	r3, [sl]
 8007634:	2b2a      	cmp	r3, #42	; 0x2a
 8007636:	d015      	beq.n	8007664 <_vfiprintf_r+0x120>
 8007638:	9a07      	ldr	r2, [sp, #28]
 800763a:	4654      	mov	r4, sl
 800763c:	2000      	movs	r0, #0
 800763e:	f04f 0c0a 	mov.w	ip, #10
 8007642:	4621      	mov	r1, r4
 8007644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007648:	3b30      	subs	r3, #48	; 0x30
 800764a:	2b09      	cmp	r3, #9
 800764c:	d94d      	bls.n	80076ea <_vfiprintf_r+0x1a6>
 800764e:	b1b0      	cbz	r0, 800767e <_vfiprintf_r+0x13a>
 8007650:	9207      	str	r2, [sp, #28]
 8007652:	e014      	b.n	800767e <_vfiprintf_r+0x13a>
 8007654:	eba0 0308 	sub.w	r3, r0, r8
 8007658:	fa09 f303 	lsl.w	r3, r9, r3
 800765c:	4313      	orrs	r3, r2
 800765e:	9304      	str	r3, [sp, #16]
 8007660:	46a2      	mov	sl, r4
 8007662:	e7d2      	b.n	800760a <_vfiprintf_r+0xc6>
 8007664:	9b03      	ldr	r3, [sp, #12]
 8007666:	1d19      	adds	r1, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	9103      	str	r1, [sp, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfbb      	ittet	lt
 8007670:	425b      	neglt	r3, r3
 8007672:	f042 0202 	orrlt.w	r2, r2, #2
 8007676:	9307      	strge	r3, [sp, #28]
 8007678:	9307      	strlt	r3, [sp, #28]
 800767a:	bfb8      	it	lt
 800767c:	9204      	strlt	r2, [sp, #16]
 800767e:	7823      	ldrb	r3, [r4, #0]
 8007680:	2b2e      	cmp	r3, #46	; 0x2e
 8007682:	d10c      	bne.n	800769e <_vfiprintf_r+0x15a>
 8007684:	7863      	ldrb	r3, [r4, #1]
 8007686:	2b2a      	cmp	r3, #42	; 0x2a
 8007688:	d134      	bne.n	80076f4 <_vfiprintf_r+0x1b0>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	1d1a      	adds	r2, r3, #4
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	9203      	str	r2, [sp, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfb8      	it	lt
 8007696:	f04f 33ff 	movlt.w	r3, #4294967295
 800769a:	3402      	adds	r4, #2
 800769c:	9305      	str	r3, [sp, #20]
 800769e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007774 <_vfiprintf_r+0x230>
 80076a2:	7821      	ldrb	r1, [r4, #0]
 80076a4:	2203      	movs	r2, #3
 80076a6:	4650      	mov	r0, sl
 80076a8:	f7f8 fdca 	bl	8000240 <memchr>
 80076ac:	b138      	cbz	r0, 80076be <_vfiprintf_r+0x17a>
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	eba0 000a 	sub.w	r0, r0, sl
 80076b4:	2240      	movs	r2, #64	; 0x40
 80076b6:	4082      	lsls	r2, r0
 80076b8:	4313      	orrs	r3, r2
 80076ba:	3401      	adds	r4, #1
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c2:	4829      	ldr	r0, [pc, #164]	; (8007768 <_vfiprintf_r+0x224>)
 80076c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076c8:	2206      	movs	r2, #6
 80076ca:	f7f8 fdb9 	bl	8000240 <memchr>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d03f      	beq.n	8007752 <_vfiprintf_r+0x20e>
 80076d2:	4b26      	ldr	r3, [pc, #152]	; (800776c <_vfiprintf_r+0x228>)
 80076d4:	bb1b      	cbnz	r3, 800771e <_vfiprintf_r+0x1da>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	3307      	adds	r3, #7
 80076da:	f023 0307 	bic.w	r3, r3, #7
 80076de:	3308      	adds	r3, #8
 80076e0:	9303      	str	r3, [sp, #12]
 80076e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e4:	443b      	add	r3, r7
 80076e6:	9309      	str	r3, [sp, #36]	; 0x24
 80076e8:	e768      	b.n	80075bc <_vfiprintf_r+0x78>
 80076ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ee:	460c      	mov	r4, r1
 80076f0:	2001      	movs	r0, #1
 80076f2:	e7a6      	b.n	8007642 <_vfiprintf_r+0xfe>
 80076f4:	2300      	movs	r3, #0
 80076f6:	3401      	adds	r4, #1
 80076f8:	9305      	str	r3, [sp, #20]
 80076fa:	4619      	mov	r1, r3
 80076fc:	f04f 0c0a 	mov.w	ip, #10
 8007700:	4620      	mov	r0, r4
 8007702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007706:	3a30      	subs	r2, #48	; 0x30
 8007708:	2a09      	cmp	r2, #9
 800770a:	d903      	bls.n	8007714 <_vfiprintf_r+0x1d0>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0c6      	beq.n	800769e <_vfiprintf_r+0x15a>
 8007710:	9105      	str	r1, [sp, #20]
 8007712:	e7c4      	b.n	800769e <_vfiprintf_r+0x15a>
 8007714:	fb0c 2101 	mla	r1, ip, r1, r2
 8007718:	4604      	mov	r4, r0
 800771a:	2301      	movs	r3, #1
 800771c:	e7f0      	b.n	8007700 <_vfiprintf_r+0x1bc>
 800771e:	ab03      	add	r3, sp, #12
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	462a      	mov	r2, r5
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <_vfiprintf_r+0x22c>)
 8007726:	a904      	add	r1, sp, #16
 8007728:	4630      	mov	r0, r6
 800772a:	f3af 8000 	nop.w
 800772e:	4607      	mov	r7, r0
 8007730:	1c78      	adds	r0, r7, #1
 8007732:	d1d6      	bne.n	80076e2 <_vfiprintf_r+0x19e>
 8007734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007736:	07d9      	lsls	r1, r3, #31
 8007738:	d405      	bmi.n	8007746 <_vfiprintf_r+0x202>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	059a      	lsls	r2, r3, #22
 800773e:	d402      	bmi.n	8007746 <_vfiprintf_r+0x202>
 8007740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007742:	f7ff fddb 	bl	80072fc <__retarget_lock_release_recursive>
 8007746:	89ab      	ldrh	r3, [r5, #12]
 8007748:	065b      	lsls	r3, r3, #25
 800774a:	f53f af1d 	bmi.w	8007588 <_vfiprintf_r+0x44>
 800774e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007750:	e71c      	b.n	800758c <_vfiprintf_r+0x48>
 8007752:	ab03      	add	r3, sp, #12
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	462a      	mov	r2, r5
 8007758:	4b05      	ldr	r3, [pc, #20]	; (8007770 <_vfiprintf_r+0x22c>)
 800775a:	a904      	add	r1, sp, #16
 800775c:	4630      	mov	r0, r6
 800775e:	f000 f879 	bl	8007854 <_printf_i>
 8007762:	e7e4      	b.n	800772e <_vfiprintf_r+0x1ea>
 8007764:	08007f1c 	.word	0x08007f1c
 8007768:	08007f26 	.word	0x08007f26
 800776c:	00000000 	.word	0x00000000
 8007770:	0800751f 	.word	0x0800751f
 8007774:	08007f22 	.word	0x08007f22

08007778 <_printf_common>:
 8007778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	4616      	mov	r6, r2
 800777e:	4699      	mov	r9, r3
 8007780:	688a      	ldr	r2, [r1, #8]
 8007782:	690b      	ldr	r3, [r1, #16]
 8007784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007788:	4293      	cmp	r3, r2
 800778a:	bfb8      	it	lt
 800778c:	4613      	movlt	r3, r2
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007794:	4607      	mov	r7, r0
 8007796:	460c      	mov	r4, r1
 8007798:	b10a      	cbz	r2, 800779e <_printf_common+0x26>
 800779a:	3301      	adds	r3, #1
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	0699      	lsls	r1, r3, #26
 80077a2:	bf42      	ittt	mi
 80077a4:	6833      	ldrmi	r3, [r6, #0]
 80077a6:	3302      	addmi	r3, #2
 80077a8:	6033      	strmi	r3, [r6, #0]
 80077aa:	6825      	ldr	r5, [r4, #0]
 80077ac:	f015 0506 	ands.w	r5, r5, #6
 80077b0:	d106      	bne.n	80077c0 <_printf_common+0x48>
 80077b2:	f104 0a19 	add.w	sl, r4, #25
 80077b6:	68e3      	ldr	r3, [r4, #12]
 80077b8:	6832      	ldr	r2, [r6, #0]
 80077ba:	1a9b      	subs	r3, r3, r2
 80077bc:	42ab      	cmp	r3, r5
 80077be:	dc26      	bgt.n	800780e <_printf_common+0x96>
 80077c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c4:	1e13      	subs	r3, r2, #0
 80077c6:	6822      	ldr	r2, [r4, #0]
 80077c8:	bf18      	it	ne
 80077ca:	2301      	movne	r3, #1
 80077cc:	0692      	lsls	r2, r2, #26
 80077ce:	d42b      	bmi.n	8007828 <_printf_common+0xb0>
 80077d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d4:	4649      	mov	r1, r9
 80077d6:	4638      	mov	r0, r7
 80077d8:	47c0      	blx	r8
 80077da:	3001      	adds	r0, #1
 80077dc:	d01e      	beq.n	800781c <_printf_common+0xa4>
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	6922      	ldr	r2, [r4, #16]
 80077e2:	f003 0306 	and.w	r3, r3, #6
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	bf02      	ittt	eq
 80077ea:	68e5      	ldreq	r5, [r4, #12]
 80077ec:	6833      	ldreq	r3, [r6, #0]
 80077ee:	1aed      	subeq	r5, r5, r3
 80077f0:	68a3      	ldr	r3, [r4, #8]
 80077f2:	bf0c      	ite	eq
 80077f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077f8:	2500      	movne	r5, #0
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bfc4      	itt	gt
 80077fe:	1a9b      	subgt	r3, r3, r2
 8007800:	18ed      	addgt	r5, r5, r3
 8007802:	2600      	movs	r6, #0
 8007804:	341a      	adds	r4, #26
 8007806:	42b5      	cmp	r5, r6
 8007808:	d11a      	bne.n	8007840 <_printf_common+0xc8>
 800780a:	2000      	movs	r0, #0
 800780c:	e008      	b.n	8007820 <_printf_common+0xa8>
 800780e:	2301      	movs	r3, #1
 8007810:	4652      	mov	r2, sl
 8007812:	4649      	mov	r1, r9
 8007814:	4638      	mov	r0, r7
 8007816:	47c0      	blx	r8
 8007818:	3001      	adds	r0, #1
 800781a:	d103      	bne.n	8007824 <_printf_common+0xac>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	3501      	adds	r5, #1
 8007826:	e7c6      	b.n	80077b6 <_printf_common+0x3e>
 8007828:	18e1      	adds	r1, r4, r3
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	2030      	movs	r0, #48	; 0x30
 800782e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007832:	4422      	add	r2, r4
 8007834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800783c:	3302      	adds	r3, #2
 800783e:	e7c7      	b.n	80077d0 <_printf_common+0x58>
 8007840:	2301      	movs	r3, #1
 8007842:	4622      	mov	r2, r4
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	3001      	adds	r0, #1
 800784c:	d0e6      	beq.n	800781c <_printf_common+0xa4>
 800784e:	3601      	adds	r6, #1
 8007850:	e7d9      	b.n	8007806 <_printf_common+0x8e>
	...

08007854 <_printf_i>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	7e0f      	ldrb	r7, [r1, #24]
 800785a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800785c:	2f78      	cmp	r7, #120	; 0x78
 800785e:	4691      	mov	r9, r2
 8007860:	4680      	mov	r8, r0
 8007862:	460c      	mov	r4, r1
 8007864:	469a      	mov	sl, r3
 8007866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800786a:	d807      	bhi.n	800787c <_printf_i+0x28>
 800786c:	2f62      	cmp	r7, #98	; 0x62
 800786e:	d80a      	bhi.n	8007886 <_printf_i+0x32>
 8007870:	2f00      	cmp	r7, #0
 8007872:	f000 80d4 	beq.w	8007a1e <_printf_i+0x1ca>
 8007876:	2f58      	cmp	r7, #88	; 0x58
 8007878:	f000 80c0 	beq.w	80079fc <_printf_i+0x1a8>
 800787c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007884:	e03a      	b.n	80078fc <_printf_i+0xa8>
 8007886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800788a:	2b15      	cmp	r3, #21
 800788c:	d8f6      	bhi.n	800787c <_printf_i+0x28>
 800788e:	a101      	add	r1, pc, #4	; (adr r1, 8007894 <_printf_i+0x40>)
 8007890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007894:	080078ed 	.word	0x080078ed
 8007898:	08007901 	.word	0x08007901
 800789c:	0800787d 	.word	0x0800787d
 80078a0:	0800787d 	.word	0x0800787d
 80078a4:	0800787d 	.word	0x0800787d
 80078a8:	0800787d 	.word	0x0800787d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800787d 	.word	0x0800787d
 80078b4:	0800787d 	.word	0x0800787d
 80078b8:	0800787d 	.word	0x0800787d
 80078bc:	0800787d 	.word	0x0800787d
 80078c0:	08007a05 	.word	0x08007a05
 80078c4:	0800792d 	.word	0x0800792d
 80078c8:	080079bf 	.word	0x080079bf
 80078cc:	0800787d 	.word	0x0800787d
 80078d0:	0800787d 	.word	0x0800787d
 80078d4:	08007a27 	.word	0x08007a27
 80078d8:	0800787d 	.word	0x0800787d
 80078dc:	0800792d 	.word	0x0800792d
 80078e0:	0800787d 	.word	0x0800787d
 80078e4:	0800787d 	.word	0x0800787d
 80078e8:	080079c7 	.word	0x080079c7
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fc:	2301      	movs	r3, #1
 80078fe:	e09f      	b.n	8007a40 <_printf_i+0x1ec>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	0607      	lsls	r7, r0, #24
 8007906:	f103 0104 	add.w	r1, r3, #4
 800790a:	6029      	str	r1, [r5, #0]
 800790c:	d501      	bpl.n	8007912 <_printf_i+0xbe>
 800790e:	681e      	ldr	r6, [r3, #0]
 8007910:	e003      	b.n	800791a <_printf_i+0xc6>
 8007912:	0646      	lsls	r6, r0, #25
 8007914:	d5fb      	bpl.n	800790e <_printf_i+0xba>
 8007916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800791a:	2e00      	cmp	r6, #0
 800791c:	da03      	bge.n	8007926 <_printf_i+0xd2>
 800791e:	232d      	movs	r3, #45	; 0x2d
 8007920:	4276      	negs	r6, r6
 8007922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007926:	485a      	ldr	r0, [pc, #360]	; (8007a90 <_printf_i+0x23c>)
 8007928:	230a      	movs	r3, #10
 800792a:	e012      	b.n	8007952 <_printf_i+0xfe>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	6820      	ldr	r0, [r4, #0]
 8007930:	1d19      	adds	r1, r3, #4
 8007932:	6029      	str	r1, [r5, #0]
 8007934:	0605      	lsls	r5, r0, #24
 8007936:	d501      	bpl.n	800793c <_printf_i+0xe8>
 8007938:	681e      	ldr	r6, [r3, #0]
 800793a:	e002      	b.n	8007942 <_printf_i+0xee>
 800793c:	0641      	lsls	r1, r0, #25
 800793e:	d5fb      	bpl.n	8007938 <_printf_i+0xe4>
 8007940:	881e      	ldrh	r6, [r3, #0]
 8007942:	4853      	ldr	r0, [pc, #332]	; (8007a90 <_printf_i+0x23c>)
 8007944:	2f6f      	cmp	r7, #111	; 0x6f
 8007946:	bf0c      	ite	eq
 8007948:	2308      	moveq	r3, #8
 800794a:	230a      	movne	r3, #10
 800794c:	2100      	movs	r1, #0
 800794e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007952:	6865      	ldr	r5, [r4, #4]
 8007954:	60a5      	str	r5, [r4, #8]
 8007956:	2d00      	cmp	r5, #0
 8007958:	bfa2      	ittt	ge
 800795a:	6821      	ldrge	r1, [r4, #0]
 800795c:	f021 0104 	bicge.w	r1, r1, #4
 8007960:	6021      	strge	r1, [r4, #0]
 8007962:	b90e      	cbnz	r6, 8007968 <_printf_i+0x114>
 8007964:	2d00      	cmp	r5, #0
 8007966:	d04b      	beq.n	8007a00 <_printf_i+0x1ac>
 8007968:	4615      	mov	r5, r2
 800796a:	fbb6 f1f3 	udiv	r1, r6, r3
 800796e:	fb03 6711 	mls	r7, r3, r1, r6
 8007972:	5dc7      	ldrb	r7, [r0, r7]
 8007974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007978:	4637      	mov	r7, r6
 800797a:	42bb      	cmp	r3, r7
 800797c:	460e      	mov	r6, r1
 800797e:	d9f4      	bls.n	800796a <_printf_i+0x116>
 8007980:	2b08      	cmp	r3, #8
 8007982:	d10b      	bne.n	800799c <_printf_i+0x148>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	07de      	lsls	r6, r3, #31
 8007988:	d508      	bpl.n	800799c <_printf_i+0x148>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	6861      	ldr	r1, [r4, #4]
 800798e:	4299      	cmp	r1, r3
 8007990:	bfde      	ittt	le
 8007992:	2330      	movle	r3, #48	; 0x30
 8007994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800799c:	1b52      	subs	r2, r2, r5
 800799e:	6122      	str	r2, [r4, #16]
 80079a0:	f8cd a000 	str.w	sl, [sp]
 80079a4:	464b      	mov	r3, r9
 80079a6:	aa03      	add	r2, sp, #12
 80079a8:	4621      	mov	r1, r4
 80079aa:	4640      	mov	r0, r8
 80079ac:	f7ff fee4 	bl	8007778 <_printf_common>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d14a      	bne.n	8007a4a <_printf_i+0x1f6>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	b004      	add	sp, #16
 80079ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	f043 0320 	orr.w	r3, r3, #32
 80079c4:	6023      	str	r3, [r4, #0]
 80079c6:	4833      	ldr	r0, [pc, #204]	; (8007a94 <_printf_i+0x240>)
 80079c8:	2778      	movs	r7, #120	; 0x78
 80079ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	6829      	ldr	r1, [r5, #0]
 80079d2:	061f      	lsls	r7, r3, #24
 80079d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d8:	d402      	bmi.n	80079e0 <_printf_i+0x18c>
 80079da:	065f      	lsls	r7, r3, #25
 80079dc:	bf48      	it	mi
 80079de:	b2b6      	uxthmi	r6, r6
 80079e0:	07df      	lsls	r7, r3, #31
 80079e2:	bf48      	it	mi
 80079e4:	f043 0320 	orrmi.w	r3, r3, #32
 80079e8:	6029      	str	r1, [r5, #0]
 80079ea:	bf48      	it	mi
 80079ec:	6023      	strmi	r3, [r4, #0]
 80079ee:	b91e      	cbnz	r6, 80079f8 <_printf_i+0x1a4>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	f023 0320 	bic.w	r3, r3, #32
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	2310      	movs	r3, #16
 80079fa:	e7a7      	b.n	800794c <_printf_i+0xf8>
 80079fc:	4824      	ldr	r0, [pc, #144]	; (8007a90 <_printf_i+0x23c>)
 80079fe:	e7e4      	b.n	80079ca <_printf_i+0x176>
 8007a00:	4615      	mov	r5, r2
 8007a02:	e7bd      	b.n	8007980 <_printf_i+0x12c>
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	6826      	ldr	r6, [r4, #0]
 8007a08:	6961      	ldr	r1, [r4, #20]
 8007a0a:	1d18      	adds	r0, r3, #4
 8007a0c:	6028      	str	r0, [r5, #0]
 8007a0e:	0635      	lsls	r5, r6, #24
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	d501      	bpl.n	8007a18 <_printf_i+0x1c4>
 8007a14:	6019      	str	r1, [r3, #0]
 8007a16:	e002      	b.n	8007a1e <_printf_i+0x1ca>
 8007a18:	0670      	lsls	r0, r6, #25
 8007a1a:	d5fb      	bpl.n	8007a14 <_printf_i+0x1c0>
 8007a1c:	8019      	strh	r1, [r3, #0]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	4615      	mov	r5, r2
 8007a24:	e7bc      	b.n	80079a0 <_printf_i+0x14c>
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	1d1a      	adds	r2, r3, #4
 8007a2a:	602a      	str	r2, [r5, #0]
 8007a2c:	681d      	ldr	r5, [r3, #0]
 8007a2e:	6862      	ldr	r2, [r4, #4]
 8007a30:	2100      	movs	r1, #0
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7f8 fc04 	bl	8000240 <memchr>
 8007a38:	b108      	cbz	r0, 8007a3e <_printf_i+0x1ea>
 8007a3a:	1b40      	subs	r0, r0, r5
 8007a3c:	6060      	str	r0, [r4, #4]
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	6123      	str	r3, [r4, #16]
 8007a42:	2300      	movs	r3, #0
 8007a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a48:	e7aa      	b.n	80079a0 <_printf_i+0x14c>
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	462a      	mov	r2, r5
 8007a4e:	4649      	mov	r1, r9
 8007a50:	4640      	mov	r0, r8
 8007a52:	47d0      	blx	sl
 8007a54:	3001      	adds	r0, #1
 8007a56:	d0ad      	beq.n	80079b4 <_printf_i+0x160>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	079b      	lsls	r3, r3, #30
 8007a5c:	d413      	bmi.n	8007a86 <_printf_i+0x232>
 8007a5e:	68e0      	ldr	r0, [r4, #12]
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	4298      	cmp	r0, r3
 8007a64:	bfb8      	it	lt
 8007a66:	4618      	movlt	r0, r3
 8007a68:	e7a6      	b.n	80079b8 <_printf_i+0x164>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4632      	mov	r2, r6
 8007a6e:	4649      	mov	r1, r9
 8007a70:	4640      	mov	r0, r8
 8007a72:	47d0      	blx	sl
 8007a74:	3001      	adds	r0, #1
 8007a76:	d09d      	beq.n	80079b4 <_printf_i+0x160>
 8007a78:	3501      	adds	r5, #1
 8007a7a:	68e3      	ldr	r3, [r4, #12]
 8007a7c:	9903      	ldr	r1, [sp, #12]
 8007a7e:	1a5b      	subs	r3, r3, r1
 8007a80:	42ab      	cmp	r3, r5
 8007a82:	dcf2      	bgt.n	8007a6a <_printf_i+0x216>
 8007a84:	e7eb      	b.n	8007a5e <_printf_i+0x20a>
 8007a86:	2500      	movs	r5, #0
 8007a88:	f104 0619 	add.w	r6, r4, #25
 8007a8c:	e7f5      	b.n	8007a7a <_printf_i+0x226>
 8007a8e:	bf00      	nop
 8007a90:	08007f2d 	.word	0x08007f2d
 8007a94:	08007f3e 	.word	0x08007f3e

08007a98 <__sflush_r>:
 8007a98:	898a      	ldrh	r2, [r1, #12]
 8007a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	0710      	lsls	r0, r2, #28
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	d458      	bmi.n	8007b58 <__sflush_r+0xc0>
 8007aa6:	684b      	ldr	r3, [r1, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	dc05      	bgt.n	8007ab8 <__sflush_r+0x20>
 8007aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dc02      	bgt.n	8007ab8 <__sflush_r+0x20>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007aba:	2e00      	cmp	r6, #0
 8007abc:	d0f9      	beq.n	8007ab2 <__sflush_r+0x1a>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ac4:	682f      	ldr	r7, [r5, #0]
 8007ac6:	6a21      	ldr	r1, [r4, #32]
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	d032      	beq.n	8007b32 <__sflush_r+0x9a>
 8007acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	075a      	lsls	r2, r3, #29
 8007ad2:	d505      	bpl.n	8007ae0 <__sflush_r+0x48>
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	1ac0      	subs	r0, r0, r3
 8007ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ada:	b10b      	cbz	r3, 8007ae0 <__sflush_r+0x48>
 8007adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ade:	1ac0      	subs	r0, r0, r3
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ae6:	6a21      	ldr	r1, [r4, #32]
 8007ae8:	4628      	mov	r0, r5
 8007aea:	47b0      	blx	r6
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	d106      	bne.n	8007b00 <__sflush_r+0x68>
 8007af2:	6829      	ldr	r1, [r5, #0]
 8007af4:	291d      	cmp	r1, #29
 8007af6:	d82b      	bhi.n	8007b50 <__sflush_r+0xb8>
 8007af8:	4a29      	ldr	r2, [pc, #164]	; (8007ba0 <__sflush_r+0x108>)
 8007afa:	410a      	asrs	r2, r1
 8007afc:	07d6      	lsls	r6, r2, #31
 8007afe:	d427      	bmi.n	8007b50 <__sflush_r+0xb8>
 8007b00:	2200      	movs	r2, #0
 8007b02:	6062      	str	r2, [r4, #4]
 8007b04:	04d9      	lsls	r1, r3, #19
 8007b06:	6922      	ldr	r2, [r4, #16]
 8007b08:	6022      	str	r2, [r4, #0]
 8007b0a:	d504      	bpl.n	8007b16 <__sflush_r+0x7e>
 8007b0c:	1c42      	adds	r2, r0, #1
 8007b0e:	d101      	bne.n	8007b14 <__sflush_r+0x7c>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	b903      	cbnz	r3, 8007b16 <__sflush_r+0x7e>
 8007b14:	6560      	str	r0, [r4, #84]	; 0x54
 8007b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b18:	602f      	str	r7, [r5, #0]
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d0c9      	beq.n	8007ab2 <__sflush_r+0x1a>
 8007b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b22:	4299      	cmp	r1, r3
 8007b24:	d002      	beq.n	8007b2c <__sflush_r+0x94>
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7ff fbea 	bl	8007300 <_free_r>
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007b30:	e7c0      	b.n	8007ab4 <__sflush_r+0x1c>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b0      	blx	r6
 8007b38:	1c41      	adds	r1, r0, #1
 8007b3a:	d1c8      	bne.n	8007ace <__sflush_r+0x36>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c5      	beq.n	8007ace <__sflush_r+0x36>
 8007b42:	2b1d      	cmp	r3, #29
 8007b44:	d001      	beq.n	8007b4a <__sflush_r+0xb2>
 8007b46:	2b16      	cmp	r3, #22
 8007b48:	d101      	bne.n	8007b4e <__sflush_r+0xb6>
 8007b4a:	602f      	str	r7, [r5, #0]
 8007b4c:	e7b1      	b.n	8007ab2 <__sflush_r+0x1a>
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	e7ad      	b.n	8007ab4 <__sflush_r+0x1c>
 8007b58:	690f      	ldr	r7, [r1, #16]
 8007b5a:	2f00      	cmp	r7, #0
 8007b5c:	d0a9      	beq.n	8007ab2 <__sflush_r+0x1a>
 8007b5e:	0793      	lsls	r3, r2, #30
 8007b60:	680e      	ldr	r6, [r1, #0]
 8007b62:	bf08      	it	eq
 8007b64:	694b      	ldreq	r3, [r1, #20]
 8007b66:	600f      	str	r7, [r1, #0]
 8007b68:	bf18      	it	ne
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	eba6 0807 	sub.w	r8, r6, r7
 8007b70:	608b      	str	r3, [r1, #8]
 8007b72:	f1b8 0f00 	cmp.w	r8, #0
 8007b76:	dd9c      	ble.n	8007ab2 <__sflush_r+0x1a>
 8007b78:	6a21      	ldr	r1, [r4, #32]
 8007b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b7c:	4643      	mov	r3, r8
 8007b7e:	463a      	mov	r2, r7
 8007b80:	4628      	mov	r0, r5
 8007b82:	47b0      	blx	r6
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dc06      	bgt.n	8007b96 <__sflush_r+0xfe>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8e:	81a3      	strh	r3, [r4, #12]
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	e78e      	b.n	8007ab4 <__sflush_r+0x1c>
 8007b96:	4407      	add	r7, r0
 8007b98:	eba8 0800 	sub.w	r8, r8, r0
 8007b9c:	e7e9      	b.n	8007b72 <__sflush_r+0xda>
 8007b9e:	bf00      	nop
 8007ba0:	dfbffffe 	.word	0xdfbffffe

08007ba4 <_fflush_r>:
 8007ba4:	b538      	push	{r3, r4, r5, lr}
 8007ba6:	690b      	ldr	r3, [r1, #16]
 8007ba8:	4605      	mov	r5, r0
 8007baa:	460c      	mov	r4, r1
 8007bac:	b913      	cbnz	r3, 8007bb4 <_fflush_r+0x10>
 8007bae:	2500      	movs	r5, #0
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	b118      	cbz	r0, 8007bbe <_fflush_r+0x1a>
 8007bb6:	6a03      	ldr	r3, [r0, #32]
 8007bb8:	b90b      	cbnz	r3, 8007bbe <_fflush_r+0x1a>
 8007bba:	f7ff f9a9 	bl	8006f10 <__sinit>
 8007bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0f3      	beq.n	8007bae <_fflush_r+0xa>
 8007bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bc8:	07d0      	lsls	r0, r2, #31
 8007bca:	d404      	bmi.n	8007bd6 <_fflush_r+0x32>
 8007bcc:	0599      	lsls	r1, r3, #22
 8007bce:	d402      	bmi.n	8007bd6 <_fflush_r+0x32>
 8007bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd2:	f7ff fb92 	bl	80072fa <__retarget_lock_acquire_recursive>
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	4621      	mov	r1, r4
 8007bda:	f7ff ff5d 	bl	8007a98 <__sflush_r>
 8007bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007be0:	07da      	lsls	r2, r3, #31
 8007be2:	4605      	mov	r5, r0
 8007be4:	d4e4      	bmi.n	8007bb0 <_fflush_r+0xc>
 8007be6:	89a3      	ldrh	r3, [r4, #12]
 8007be8:	059b      	lsls	r3, r3, #22
 8007bea:	d4e1      	bmi.n	8007bb0 <_fflush_r+0xc>
 8007bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bee:	f7ff fb85 	bl	80072fc <__retarget_lock_release_recursive>
 8007bf2:	e7dd      	b.n	8007bb0 <_fflush_r+0xc>

08007bf4 <__swhatbuf_r>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	460c      	mov	r4, r1
 8007bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	b096      	sub	sp, #88	; 0x58
 8007c00:	4615      	mov	r5, r2
 8007c02:	461e      	mov	r6, r3
 8007c04:	da0d      	bge.n	8007c22 <__swhatbuf_r+0x2e>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c0c:	f04f 0100 	mov.w	r1, #0
 8007c10:	bf0c      	ite	eq
 8007c12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007c16:	2340      	movne	r3, #64	; 0x40
 8007c18:	2000      	movs	r0, #0
 8007c1a:	6031      	str	r1, [r6, #0]
 8007c1c:	602b      	str	r3, [r5, #0]
 8007c1e:	b016      	add	sp, #88	; 0x58
 8007c20:	bd70      	pop	{r4, r5, r6, pc}
 8007c22:	466a      	mov	r2, sp
 8007c24:	f000 f848 	bl	8007cb8 <_fstat_r>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	dbec      	blt.n	8007c06 <__swhatbuf_r+0x12>
 8007c2c:	9901      	ldr	r1, [sp, #4]
 8007c2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007c32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007c36:	4259      	negs	r1, r3
 8007c38:	4159      	adcs	r1, r3
 8007c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c3e:	e7eb      	b.n	8007c18 <__swhatbuf_r+0x24>

08007c40 <__smakebuf_r>:
 8007c40:	898b      	ldrh	r3, [r1, #12]
 8007c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c44:	079d      	lsls	r5, r3, #30
 8007c46:	4606      	mov	r6, r0
 8007c48:	460c      	mov	r4, r1
 8007c4a:	d507      	bpl.n	8007c5c <__smakebuf_r+0x1c>
 8007c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	2301      	movs	r3, #1
 8007c56:	6163      	str	r3, [r4, #20]
 8007c58:	b002      	add	sp, #8
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	ab01      	add	r3, sp, #4
 8007c5e:	466a      	mov	r2, sp
 8007c60:	f7ff ffc8 	bl	8007bf4 <__swhatbuf_r>
 8007c64:	9900      	ldr	r1, [sp, #0]
 8007c66:	4605      	mov	r5, r0
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f7ff fbb5 	bl	80073d8 <_malloc_r>
 8007c6e:	b948      	cbnz	r0, 8007c84 <__smakebuf_r+0x44>
 8007c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c74:	059a      	lsls	r2, r3, #22
 8007c76:	d4ef      	bmi.n	8007c58 <__smakebuf_r+0x18>
 8007c78:	f023 0303 	bic.w	r3, r3, #3
 8007c7c:	f043 0302 	orr.w	r3, r3, #2
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	e7e3      	b.n	8007c4c <__smakebuf_r+0xc>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	6020      	str	r0, [r4, #0]
 8007c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	9b00      	ldr	r3, [sp, #0]
 8007c90:	6163      	str	r3, [r4, #20]
 8007c92:	9b01      	ldr	r3, [sp, #4]
 8007c94:	6120      	str	r0, [r4, #16]
 8007c96:	b15b      	cbz	r3, 8007cb0 <__smakebuf_r+0x70>
 8007c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f000 f81d 	bl	8007cdc <_isatty_r>
 8007ca2:	b128      	cbz	r0, 8007cb0 <__smakebuf_r+0x70>
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	81a3      	strh	r3, [r4, #12]
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	431d      	orrs	r5, r3
 8007cb4:	81a5      	strh	r5, [r4, #12]
 8007cb6:	e7cf      	b.n	8007c58 <__smakebuf_r+0x18>

08007cb8 <_fstat_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d07      	ldr	r5, [pc, #28]	; (8007cd8 <_fstat_r+0x20>)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	f7fa f976 	bl	8001fb6 <_fstat>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d102      	bne.n	8007cd4 <_fstat_r+0x1c>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b103      	cbz	r3, 8007cd4 <_fstat_r+0x1c>
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	bd38      	pop	{r3, r4, r5, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20004e90 	.word	0x20004e90

08007cdc <_isatty_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4d06      	ldr	r5, [pc, #24]	; (8007cf8 <_isatty_r+0x1c>)
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	602b      	str	r3, [r5, #0]
 8007ce8:	f7fa f975 	bl	8001fd6 <_isatty>
 8007cec:	1c43      	adds	r3, r0, #1
 8007cee:	d102      	bne.n	8007cf6 <_isatty_r+0x1a>
 8007cf0:	682b      	ldr	r3, [r5, #0]
 8007cf2:	b103      	cbz	r3, 8007cf6 <_isatty_r+0x1a>
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	20004e90 	.word	0x20004e90

08007cfc <_sbrk_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	4d06      	ldr	r5, [pc, #24]	; (8007d18 <_sbrk_r+0x1c>)
 8007d00:	2300      	movs	r3, #0
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7fa f97e 	bl	8002008 <_sbrk>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_sbrk_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_sbrk_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20004e90 	.word	0x20004e90

08007d1c <_init>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr

08007d28 <_fini>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr
